#region Using

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Collections;
using Gizmox.WebGUI.Common;
using Gizmox.WebGUI.Forms;
using Gizmox.WebGUI.Forms.Design;
using System.Web.Configuration;
using Captain.Common.Views.Forms.Base;
using Captain.Common.Utilities;
using Captain.Common.Menus;
using System.Data.SqlClient;
using Captain.Common.Model.Data;
using Captain.Common.Model.Objects;
using Gizmox.WebGUI.Common.Resources;
using Captain.Common.Views.UserControls.Base;
using Captain.Common.Exceptions;
using System.Diagnostics;
using Captain.Common.Views.Forms;
using System.IO;
using System.Linq;

using iTextSharp;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Text.RegularExpressions;
using System.Globalization;
#endregion

namespace Captain.Common.Views.Forms
{
    public partial class PrintApplicants : Form
    {
        #region private variables

        private ErrorProvider _errorProvider = null;
        private CaptainModel _model = null;
        private string strNameFormat = string.Empty;
        private string strCwFormat = string.Empty;
        private string strYear = "    ";
        private int strIndex = 0;

        #endregion

        public PrintApplicants(BaseForm baseForm, PrivilegeEntity privileges, string Form_Name)
        {
            InitializeComponent();

            BaseForm = baseForm;
            Privileges = privileges;
            FormName = Form_Name;
            _model = new CaptainModel();

            this.Text = "Print Applications";
            lblAppNo.Text = BaseForm.BaseApplicationNo;
            lblName.Text = BaseForm.BaseApplicationName;
            propReportPath = _model.lookupDataAccess.GetReportPath();
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
            if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            {
                AGYShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
            }
            FillGrid();
            strNameFormat = BaseForm.BaseHierarchyCnFormat.ToString();
            strFolderPath = Consts.Common.ReportFolderLocation + BaseForm.UserID + "\\";
            
            Getdata();
        }

        public PrintApplicants(BaseForm baseForm, PrivilegeEntity privileges, string Form_Name, string Agency, string Dept, string Program, string Year, string Value)
        {
            InitializeComponent();

            BaseForm = baseForm;
            Privileges = privileges;
            FormName = Form_Name;
            PAgency = Agency; PDept = Dept; PProgram = Program; PYear = Year; PValue = Value;
            _model = new CaptainModel();

            this.Text = "Print Applications";
            lblAppNo.Text = BaseForm.BaseApplicationNo;
            lblName.Text = BaseForm.BaseApplicationName;
            propReportPath = _model.lookupDataAccess.GetReportPath();

            strNameFormat = BaseForm.BaseHierarchyCnFormat.ToString();
            //FillGrid();

            strFolderPath = Consts.Common.ReportFolderLocation + BaseForm.UserID + "\\";

            Getdata();

        }


        #region properties

        public BaseForm BaseForm { get; set; }
        public PrivilegeEntity Privileges { get; set; }
        public string FormName { get; set; }
        public string PAgency { get; set; }
        public string PDept { get; set; }
        public string PProgram { get; set; }
        public string PYear { get; set; }
        public string PValue { get; set; }
        public string AGYShortName { get; set; }

        public List<CaseServicesEntity> PropSerViceEntity { get; set; }
        public string propReportPath { get; set; }
        public List<FldcntlHieEntity> preassesCntlEntity { get; set; }
        public List<TMS81ReportEntity> ReportDetails { get; set; }
        public List<AgyTabEntity> AgyList { get; set; }
        public AgyTabEntity AgyMain { get; set; }
        public List<CAMASTEntity> CAMASTList { get; set; }

        #endregion


        private void Getdata()
        {
            CaseServicesEntity SearchEntity = new CaseServicesEntity(true);
            //SearchEntity.Agency = BaseForm.BaseAgency;
            //SearchEntity.Dept = BaseForm.BaseDept;
            //SearchEntity.Program = BaseForm.BaseProg;
            //SearchEntity.Application = "ES";
            PropSerViceEntity = _model.CaseMstData.Browse_CASESER(SearchEntity, "Browse");

            
            CAMASTList = _model.SPAdminData.Browse_CAMAST("Code", null, null, null);

            AgyList = _model.Agytab.GetAgyTab(string.Empty);

            
        }

        string DEPState = string.Empty;
        private void FillGrid()
        {
            gvApp.Rows.Clear();
            int rowIndex = 0; DEPState = string.Empty;
            DataSet ds = Captain.DatabaseLayer.MainMenu.GetCaseDepForHierarchy(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable casedep = ds.Tables[0];
            if (casedep.Rows.Count > 0) DEPState = casedep.Rows[0]["DEP_STATE"].ToString().Trim();

            if (Privileges.ModuleCode != "05")
            {
                if ((FormName == "Case2330" || FormName == "Case2001") && Privileges.ModuleCode == "03")
                {
                    gvApp.Rows.Add(true, "Casemanagement Application");
                    rowIndex = 1;
                }
                else if ((FormName == "Case2330" || FormName == "Case2001") && Privileges.ModuleCode == "08")
                {
                    gvApp.Rows.Add(false, "Casemanagement Application");
                    rowIndex = 1;
                }
                else
                    gvApp.Rows.Add(false, "Casemanagement Application");


                if ((FormName == "Case2330" || FormName == "Case2001") && Privileges.ModuleCode == "02")
                {
                    gvApp.Rows.Add(true, "Headstart Application");
                    rowIndex = 2;
                    gvApp.Rows.Add(false, "Emergency Sheet");
                }
                else if ((FormName == "Case2330" || FormName == "Case2001") && Privileges.ModuleCode == "08")
                {
                    gvApp.Rows.Add(false, "Headstart Application");
                    rowIndex = 2;
                }
                else
                {
                    gvApp.Rows.Add(false, "Headstart Application");
                    //gvApp.Rows.Add(false, "Emergency Sheet");
                }


                if (FormName == "Case2004" && Privileges.ModuleCode != "08")
                {
                    gvApp.Rows.Add(true, "SIM Referral Letter");
                    rowIndex = 3;
                }
                else if (Privileges.ModuleCode != "08")
                    gvApp.Rows.Add(false, "SIM Referral Letter");

                if (DEPState == "TX")
                {
                    gvApp.Rows.Add(false, "Application for Assistance");
                }

                if (Privileges.ModuleCode == "08" && (FormName == "TMS00081" || FormName == "Case2001"))
                {
                    gvApp.Rows.Add(true, "Print Letter");
                    rowIndex = 3;
                }

                if (Privileges.ModuleCode == "08")
                {
                    gvApp.Rows.Add(false, "Energy Assistance Application");

                }

                string HIE = BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg;
                //preassesCntlEntity = _model.FieldControls.GetFLDCNTLHIE("PREASSES", HIE, "FLDCNTL");
                preassesCntlEntity = _model.FieldControls.GetFLDCNTLHIE("PREASSES", HIE, "PREASSES");
                if (preassesCntlEntity.Count > 0)
                {
                    if (preassesCntlEntity.Exists(u => u.Enab.Equals("Y")))
                    {
                        gvApp.Rows.Add(false, "Pre-Assessment Form");
                    }
                }

                if (rowIndex == 1)
                    gvApp.CurrentCell = gvApp.Rows[0].Cells[0];
                else if (rowIndex == 2)
                    gvApp.CurrentCell = gvApp.Rows[1].Cells[0];
                else if (rowIndex == 3)
                    gvApp.CurrentCell = gvApp.Rows[2].Cells[0];
            }
            else if (Privileges.ModuleCode == "05")
            {
                if (DEPState == "TX")
                    gvApp.Rows.Add(true, "Application for Assistance");
            }


        }

        private void gvApp_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 0)
            {
                DataGridView AppGrid = sender as DataGridView;
                string selectedHIE = AppGrid.SelectedRows[0].Cells["AppDet"].Value.ToString();
                bool isSelect = false;
                if (AppGrid.SelectedRows[0].Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True, StringComparison.CurrentCultureIgnoreCase))
                {
                    isSelect = true;
                }
                foreach (DataGridViewRow dr in AppGrid.Rows)
                {
                    string rowCode = dr.Cells["AppDet"].Value.ToString();
                    if (!rowCode.Equals(selectedHIE))
                    {
                        dr.Cells["Check"].Value = "false";
                        dr.DefaultCellStyle.ForeColor = Color.Black;
                    }
                    else
                    {
                        dr.DefaultCellStyle.ForeColor = Color.Black;
                    }
                }
            }
        }

        private void gvApp_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //DataGridView AppGrid = sender as DataGridView;
            //string selectedHIE = AppGrid.SelectedRows[0].Cells["AppDet"].Value.ToString();
            //bool isSelect = false;
            //if (AppGrid.SelectedRows[0].Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True, StringComparison.CurrentCultureIgnoreCase))
            //{
            //    isSelect = true;
            //}
            //foreach (DataGridViewRow dr in AppGrid.Rows)
            //{
            //    string rowCode = dr.Cells["AppDet"].Value.ToString();
            //    if (!rowCode.Equals(selectedHIE))
            //    {
            //        dr.Cells["Check"].Value = "false";
            //        dr.DefaultCellStyle.ForeColor = Color.Black;
            //    }
            //    else
            //    {
            //        dr.DefaultCellStyle.ForeColor = Color.Black;
            //    }
            //}

        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnPrev_Click(object sender, EventArgs e)
        {
            if ((gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Casemanagement Application" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Case Applicant") && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_SaveFormClosed();
            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "SIM Referral Letter" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                string ReaderName = string.Empty;

                switch(AGYShortName.Trim())
                {
                    case "LD": ReaderName = propReportPath + "\\" + "LDCAA_Letterhead.pdf"; break;
                    case "OCO": ReaderName = propReportPath + "\\" + "Simletter.pdf"; break;
                    case "CAPC": ReaderName = propReportPath + "\\" + "CAPC_SIM_Letter.pdf"; break;
                }

                //    ReaderName = propReportPath + "\\" + "Simletter.pdf";

                if (AGYShortName == "LD" && File.Exists(ReaderName))
                    On_SIM_LD_Letter();
                else if (AGYShortName == "CAPC" && File.Exists(ReaderName))
                    On_SIM_CAPC_Letter();
                else if (File.Exists(ReaderName))
                    On_SaveForm_Closed_Pdf1();
                else
                    On_SaveForm_Closed_Pdf();

            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Headstart Application" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_HSS_SaveFormClosed1();
            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Print Letter" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_PrintLetter();//BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, "PrintApplicant");

            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Energy Assistance Application" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_PrintCTApp();

            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Pre-Assessment Form" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_PreAssAppNew();//On_PreAssApp();

            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Emergency Sheet" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_EmergencySheet();

            }
            else if (gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance" && gvApp.CurrentRow.Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True))
            {
                On_SaveFormClosed_CABA();

            }
        }


        PdfContentByte cb;
        int X_Pos, Y_Pos;
        string strFolderPath = string.Empty;
        string Random_Filename = null; string PdfName = "Pdf File";
        //int pageNumber = 1;
        //string PdfScreen = null, rnkCd = null, PrivrnkCd = null, Rankdesc = null;
        //string PrintText = null;

        #region Casemanagement Application
        private void On_SaveFormClosed()
        {
            Random_Filename = null;

            PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }


            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document();
            document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //BaseFont bf_times_Check = BaseFont.CreateFont("c:/windows/fonts/WINGDNG2.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //iTextSharp.text.Font Times_Check = new iTextSharp.text.Font(bf_times_Check, 10);

            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
            cb = writer.DirectContent;

            //Agency Control Table
            string Attention = string.Empty,Roma_Switch=string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();
                Roma_Switch = ds.Tables[0].Rows[0]["ACR_ROMA_SWITCH"].ToString().Trim();
            }
            

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            //Casesite Table
            List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
            CaseSiteEntity Search_Site = new CaseSiteEntity(true);
            Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
            Search_Site.SiteROOM = "0000";
            SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");

            //Services Table
            List<CaseMSTSER> MSTSER_List = new List<CaseMSTSER>();
            CaseMSTSER Search_MSTSER = new CaseMSTSER(true);
            Search_MSTSER.Agency = BaseForm.BaseAgency; Search_MSTSER.Dept = BaseForm.BaseDept; Search_MSTSER.Program = BaseForm.BaseProg;
            Search_MSTSER.Year = BaseForm.BaseYear; Search_MSTSER.AppNo = BaseForm.BaseApplicationNo;
            MSTSER_List = _model.CaseMstData.Browse_MSTSER(Search_MSTSER, "Browse");

            //AddCust Table
            List<AddCustEntity> ADDCUST_List = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            ADDCUST_List = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

            //CUSTFLDS Table for custom Questions
            List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
            CustfldsEntity Search_CustQues = new CustfldsEntity(true);
            custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

            List<CustRespEntity> custResp_List = new List<CustRespEntity>();
            CustRespEntity Search_CustResp = new CustRespEntity(true);
            Search_CustResp.ScrCode = "CASE2001";
            custResp_List = _model.FieldControls.Browse_CUSTRESP(Search_CustResp, "Browse");

            //CaseHie Table
            DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
            DataTable dtCaseHie = dsCaseHie.Tables[0];

            //Getting CaseWorker
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];

            //CaseIncome Table
            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];
            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

            DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCasediff = dsCaseDiff.Tables[0];

            //CHLDMST Table
            ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //CHLDEMER TABLE
            List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);

            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            //DataTable dtrelation = Relations.Tables[0];
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }

            List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

            DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "A");
            DataTable dtFUND = dsFUND.Tables[0];

            cb.BeginText();
            X_Pos = 400; Y_Pos = 580;
            cb.SetFontAndSize(bf_helv, 13);
            //cb.SetColorFill(BaseColor.BLUE.Darker());
            string Header_Desc = string.Empty; string Form_Selection = string.Empty;

            //if (Privileges.ModuleCode == "03")
            //{
            string ShortName = string.Empty;
            string AgencyName = string.Empty; string SerHie = "N";

            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";

            }

            if (Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance")
            {
                if (dtCaseHie.Rows.Count > 0)
                {
                    foreach (DataRow drCasehie in dtCaseHie.Rows)
                    {
                        if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
                        {
                            AgencyName = drCasehie["HIE_NAME"].ToString().Trim(); break;
                        }
                    }

                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " - INTAKE APPLICATION", X_Pos, Y_Pos - 25, 0);
                    Header_Desc = ShortName + " - INTAKE APPLICATION";
                    Form_Selection = AgencyName;//"Casemanagement Application";

                    //cb.SetFontAndSize(bf_helv, 9);
                    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 40, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos-40, 0);

                    cb.SetFontAndSize(bf_helv, 13);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);
                }

                cb.SetFontAndSize(bf_helv, 9);
                //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 40, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 40, 0);
                X_Pos = 30; Y_Pos -= 55;
            }
            else if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
                cb.SetFontAndSize(bf_helv, 9);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
                string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
                Header_Desc = "Application For Assistance";
                //To dispalying the Programme Address
                if (SiteList.Count > 0)
                {
                    //drCaseSite = dsCaseSite.Tables[0].Rows[0];

                    if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
                        SiteName = SiteList[0].SiteNAME.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
                        Site_street = "," + SiteList[0].SiteSTREET.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
                        Site_city = "," + SiteList[0].SiteCITY.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
                        Site_state = "," + SiteList[0].SiteSTATE.Trim();
                    if (SiteList[0].SiteZIP.Trim() != "0")
                        Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

                //To Print the Verifier Name on Application
                string Intake_Worker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            Intake_Worker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }
                if (!string.IsNullOrEmpty(Intake_Worker))
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 26, 0);
                else
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 26, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);
                cb.SetFontAndSize(bf_helv, 9);
                X_Pos = 30; Y_Pos -= 72;
            }

            #region Comment block
            //}
            //else if (Privileges.ModuleCode == "02")
            //{
            //    string ShortName = string.Empty;
            //    if (dtCaseHie.Rows.Count > 0)
            //    {
            //        foreach (DataRow drCasehie in dtCaseHie.Rows)
            //        {
            //            if (drCasehie["Code"].ToString() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
            //            {
            //                ShortName = drCasehie["HIE_SHORT_NAME"].ToString().Trim(); break;
            //            }
            //        }
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " – EARLY CARE & EDUCATION ", X_Pos, Y_Pos - 25, 0);
            //        Header_Desc = ShortName + " – EARLY CARE & EDUCATION ";

            //            Form_Selection = "CASE MANAGEMENT APPLICATION";

            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);

            //    }

            //    cb.SetFontAndSize(bf_helv, 9);
            //    X_Pos = 30; Y_Pos -= 50;
            //}
            //else //if (Privileges.ModuleCode == "05" )
            //{
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
            //    cb.SetFontAndSize(bf_helv, 9);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
            //    string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
            //    Header_Desc = "Application For Assistance";
            //    //To dispalying the Programme Address
            //    if (SiteList.Count > 0)
            //    {
            //        //drCaseSite = dsCaseSite.Tables[0].Rows[0];

            //        if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
            //            SiteName = SiteList[0].SiteNAME.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
            //            Site_street = "," + SiteList[0].SiteSTREET.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
            //            Site_city = "," + SiteList[0].SiteCITY.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
            //            Site_state = "," + SiteList[0].SiteSTATE.Trim();
            //        if (SiteList[0].SiteZIP.Trim() != "0")
            //            Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
            //    }
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

            //    //To Print the Verifier Name on Application
            //    string Intake_Worker = null;
            //    if (dtVerifier.Rows.Count > 0)
            //    {
            //        foreach (DataRow drVerifier in dtVerifier.Rows)
            //        {
            //            if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
            //            {
            //                Intake_Worker = drVerifier["NAME"].ToString().Trim();
            //                break;
            //            }
            //        }
            //    }
            //    if (!string.IsNullOrEmpty(Intake_Worker))
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 26, 0);
            //    else
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 26, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);
            //    cb.SetFontAndSize(bf_helv, 9);
            //    X_Pos = 30; Y_Pos -= 72;
            //}

            //cb.SetFontAndSize(bf_helv, 9);
            //X_Pos = 30; Y_Pos -= 72;



            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Timesline), 780, Y_Pos, 0);

            ////Y_Pos -= 13;
            #endregion

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 700, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToString("g"), Timesline), 780, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 720, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("____________", Times), 780, Y_Pos, 0);

            Y_Pos -= 13;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a citizen or naturalized Alien?", X_Pos, Y_Pos, 0);
            else
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommdation or special help to complete this application?", X_Pos, Y_Pos, 0);

            /************************************CheckBoxes****************************/
            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            RadioCheckField checkbox;
            PdfFormField SField;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
            {
                rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "Yes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 200, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(220, Y_Pos + 8, 228, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "No", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 230, Y_Pos, 0);

                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If no, are you a qualified Alien??", 320, Y_Pos, 0);

                rect = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 460, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(480, Y_Pos + 8, 488, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 490, Y_Pos, 0);
            }
            else
            {
                rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);
            }
            X_Pos = 30; Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);
            //string Zip = string.Empty;
            //if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()))
            //    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            string Zip = string.Empty; 
            if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim();
            if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
            string Comma=string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()) && (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()) || !string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim())))
                Comma=", ";

            string Address = HN + Street + Suffix +Comma+ Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);

            string Language = null;
            DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
            DataTable dtLang = dsLang.Tables[0];
            foreach (DataRow drLang in dtLang.Rows)
            {
                if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
                {
                    Language = drLang["LookUpDesc"].ToString().Trim(); break;
                }
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 400, Y_Pos, 0);//380 changed on 05/22/2017
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 470, Y_Pos, 0); //450 changed on 05/22/2017
            if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
            {
                DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
                DataRow drSITE = dsSITE.Tables[0].Rows[0];
                string Site_Name = null;
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                Site_Name = drSITE["SiteName"].ToString().Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 2);
                cb.LineTo(705, Y_Pos - 2);
                cb.Stroke();
            }
            Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            string House_NO = null, Street1 = null, city = null, state = null, zip = null,DApt=null; string DSuffix = string.Empty;
            if (dtCasediff.Rows.Count > 0)
            {
                foreach (DataRow drCaseDiff in dtCasediff.Rows)
                {
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
                        House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_APT"].ToString().Trim()))
                        DApt = drCaseDiff["DIFF_APT"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
                        DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
                        Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
                        city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
                        state = drCaseDiff["DIFF_STATE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
                        zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
                    if (zip == "00000") zip = ""; else zip = ", " + zip;
                }
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1+DApt+ city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            }
            else
            {
                //cb.SetLineWidth(0.5f);
                ////cb.SetLineCap(5);
                //cb.MoveTo(X_Pos + 72, Y_Pos);
                //cb.LineTo(210, Y_Pos);
                //cb.Stroke();
                //string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
                //string Zip = string.Empty;
                if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                    Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                    Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                    Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                    Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                    HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
                
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()) && (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()) || !string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim())))
                Comma=", ";

                Address = HN + Street + Suffix +Comma+ Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            }


            if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email : ", Times), 400, Y_Pos, 0);//380 changed on 05/22/2017
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 430, Y_Pos, 0);//410 changed on 05/22/2017
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 400, Y_Pos, 0);//380 changed on 05/22/2017
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(430, Y_Pos); //410 changed on 05/22/2017
                cb.LineTo(520, Y_Pos);
                cb.Stroke();
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone ", 640, Y_Pos, 0);
            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);
            Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            //string House_NO = null, Street = null, city = null, state = null, zip = null;
            //if (dtCasediff.Rows.Count > 0)
            //{
            //    foreach (DataRow drCaseDiff in dtCasediff.Rows)
            //    {
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
            //            House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
            //            Street = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
            //            city = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
            //            state = drCaseDiff["DIFF_STATE"].ToString().Trim() + ",";
            //        zip = drCaseDiff["DIFF_ZIP"].ToString().Trim();
            //    }
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            //}
            //else
            //{
            //    //cb.SetLineWidth(0.5f);
            //    ////cb.SetLineCap(5);
            //    //cb.MoveTo(X_Pos + 72, Y_Pos);
            //    //cb.LineTo(210, Y_Pos);
            //    //cb.Stroke();
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
            //}
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Message Number", 400, Y_Pos, 0);//380 changed on 05/22/2017
            if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 470, Y_Pos, 0);//450 changed on 05/22/2017
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(470, Y_Pos);//450 changed on 05/22/2017
                cb.LineTo(505, Y_Pos);
                cb.Stroke();
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Number", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskCell = new MaskedTextBox();
                mskCell.Mask = "(000)000-0000";
                mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }

            //Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Message Number", 640, Y_Pos, 0);
            //if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            //{
            //    MaskedTextBox mskMessage = new MaskedTextBox();
            //    mskMessage.Mask = "(000) 000-0000";
            //    mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
            //}
            //else
            //{
            //    cb.SetLineWidth(0.5f);
            //    //cb.SetLineCap(5);
            //    cb.MoveTo(650, Y_Pos - 3);
            //    cb.LineTo(705, Y_Pos - 3);
            //    cb.Stroke();
            //}

            Y_Pos -= 8;
            SetLine();
            Y_Pos -= 20;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Housing Situation", X_Pos, Y_Pos, 0);
            DataSet dsHouseMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            string strMainData = dsHouseMain.Tables[0].Rows[0]["Agy_9"].ToString();
            string CodeColSubscript = string.Empty, DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();


            //DataSet dsHousing = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.HOUSINGTYPES);
            DataSet dsHousing = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.HOUSINGTYPES);
            DataTable dtHousing = dsHousing.Tables[0];
            PdfFormField Field;
            X_Pos = 140;
            string CheckTitle = string.Empty;
            foreach (DataRow drHousing in dtHousing.Rows)
            {
                if (drHousing["AGY_ACTIVE"].ToString() == "Y" ||
                    (drHousing["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_HOUSING"].ToString().Trim()) && drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drHousing[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHousing[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 25; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Family Type", X_Pos, Y_Pos, 0);
            X_Pos = 140;

            DataSet dsFamilyMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            strMainData = dsFamilyMain.Tables[0].Rows[0]["Agy_9"].ToString();
            CodeColSubscript = string.Empty; DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();

            //DataSet dsFamilyType = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.FAMILYTYPE);
            DataSet dsFamilyType = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.FAMILYTYPE);
            DataTable dtFamilyType = dsFamilyType.Tables[0];
            foreach (DataRow drFamilyType in dtFamilyType.Rows)
            {
                if (drFamilyType["AGY_ACTIVE"].ToString() == "Y" ||
                    (drFamilyType["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_FAMILY_TYPE"].ToString().Trim()) && drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    //checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType["LookUpDesc"].ToString().Trim(), "On");
                    checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFamilyType[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        Y_Pos -= 13;
                        X_Pos = 140;
                    }

                }
            }

            Y_Pos -= 25; X_Pos = 30;
            int Count = dtCaseSNP.Rows.Count;
            int Adults = 0, Child = 0, under5 = 0;
            foreach (DataRow drsnp in dtCaseSNP.Rows)
            {
                if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
                {
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
                        Adults++;
                    else
                        Child++;
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
                        under5++;
                }
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 123, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Adults: ", 210, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Adults.ToString(), Timesline), 260, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children: ", 310, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Child.ToString(), Timesline), 370, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children under 5: ", 420, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(under5.ToString(), Timesline), 508, Y_Pos, 0);
            cb.EndText();

            //Temp table not displayed on the screen
            PdfPTable head = new PdfPTable(1);
            head.HorizontalAlignment = Element.ALIGN_CENTER;
            head.TotalWidth = 50f;
            PdfPCell headcell = new PdfPCell(new Phrase(""));
            headcell.HorizontalAlignment = Element.ALIGN_CENTER;
            headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            head.AddCell(headcell);

            #region To Print SNP Details in the Table
            PdfPTable Snp_Table = new PdfPTable(13);
            Snp_Table.TotalWidth = 750f;
            Snp_Table.WidthPercentage = 100;
            Snp_Table.LockedWidth = true;
            float[] widths = new float[] { 65f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 25f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
            Snp_Table.SetWidths(widths);
            Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
            Snp_Table.SpacingBefore = 270f;

            PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
            Header.Colspan = 13;
            Header.FixedHeight = 15f;
            Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Header.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(Header);

            PdfPCell row2 = new PdfPCell(new Phrase(""));
            row2.Colspan = 9;
            row2.FixedHeight = 15f;
            row2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2);

            PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
            row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Health.FixedHeight = 15f;
            row2_Health.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Health);

            PdfPCell row2_Space = new PdfPCell(new Phrase(""));
            row2_Space.Colspan = 3;
            row2_Space.FixedHeight = 15f;
            row2_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Space);

            //PdfPCell row3 = new PdfPCell(new Phrase(""));
            //row3.Colspan = 3;
            //row3.FixedHeight = 15f;
            //row3.Border = iTextSharp.text.Rectangle.BOX;
            //Snp_Table.AddCell(row3);

            PdfPCell row3 = new PdfPCell(new Phrase(""));
            row3.Colspan = 2;
            row3.FixedHeight = 15f;
            row3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3);

            PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
            row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_SSN.FixedHeight = 15f;
            row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_SSN);

            PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
            row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Birth.FixedHeight = 15f;
            row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Birth);

            PdfPCell row3_Space = new PdfPCell(new Phrase(""));
            //row3_Space.Colspan = 2;
            row3_Space.FixedHeight = 15f;
            row3_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space);

            PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
            row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Sex.FixedHeight = 15f;
            row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Sex);

            PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
            row3_Space2.Colspan = 3;
            row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space2.FixedHeight = 15f;
            row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space2);

            PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
            row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Insurance.FixedHeight = 15f;
            row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Insurance);

            PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
            row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Veteran.FixedHeight = 15f;
            row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Veteran);

            PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("Receive FS", TableFontBoldItalic));
            row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Receive_FS.FixedHeight = 15f;
            row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Receive_FS);

            PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space3.FixedHeight = 15f;
            row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space3);

            string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yyyy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
            for (int i = 0; i < col.Length; ++i)
            {
                PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                cell.FixedHeight = 15f;
                if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                else cell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(cell);
            }

            int Tbl_Count = 0; string FamSeq = string.Empty;
            List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
            foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
                {
                    FamSeq = entity.FamilySeq.Trim();
                    string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
                    {
                        if (entity.Ssno.Trim().Length < 9)
                            entity.Ssno = SetLeadingZeros(entity.Ssno.Trim());
                        
                        //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
                        SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(entity.AltBdate))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (entity.Age.Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (entity.MilitaryStatus.Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(entity.MilitaryStatus.Trim().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);
                }
            }

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {
                if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "F";
                            else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "F";
                                else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "P";
                                break;
                            }
                        }
                    }

                    string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
                    {
                        if (drCaseSNP["SNP_SSNO"].ToString().Trim().Length < 9)
                            drCaseSNP["SNP_SSNO"] = SetLeadingZeros(drCaseSNP["SNP_SSNO"].ToString().Trim());

                        SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);

                    Tbl_Count++;
                    if (Tbl_Count > 10)
                        break;
                }
            }
            int Len_Var = 130 - Tbl_Count * 13;
            for (int j = 0; j <= Len_Var; ++j)  //120
            {
                PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
                SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
                SpaceCell.FixedHeight = 15f;
                SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(SpaceCell);
            }

            document.Add(head);
            document.Add(Snp_Table);
            document.NewPage();

            #endregion End Of SNP details Table

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

            //X_Pos = 30; Y_Pos -= 30;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

            //cb.EndText();

            iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
            //start the Income details of a Family to the table

            //PdfPTable SpaceTable = new PdfPTable(1);
            //SpaceTable.TotalWidth = 750f;
            //SpaceTable.WidthPercentage = 100;
            //SpaceTable.LockedWidth = true;
            //float[] SpaceTablewidths = new float[] { 80f };
            //SpaceTable.SetWidths(SpaceTablewidths);
            //SpaceTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //SpaceTable.SpacingAfter = 70f;

            #region Income Table

            PdfPTable IncomeTable = new PdfPTable(5);
            IncomeTable.TotalWidth = 750f;
            IncomeTable.WidthPercentage = 100;
            IncomeTable.LockedWidth = true;
            float[] Incomewidths = new float[] { 80f, 50f, 40f, 90f, 80f };
            IncomeTable.SetWidths(Incomewidths);
            IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeTable.SpacingBefore = 100f;

            PdfPCell IncomeCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            IncomeCell.Colspan = 5;
            IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell.FixedHeight = 15f;
            IncomeCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell);

            PdfPCell IncomeCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            IncomeCell1.Colspan = 5;
            IncomeCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell1.FixedHeight = 15f;
            IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell1);

            PdfPCell IncomeCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            IncomeCell0.Colspan = 2;
            IncomeCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell0.FixedHeight = 15f;
            IncomeCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell0);

            PdfPCell IncomeCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            IncomeCell2.Colspan = 3;
            IncomeCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            IncomeCell2.FixedHeight = 15f;
            IncomeCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell2);

            PdfPCell IncomeCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            IncomeCell3.Colspan = 3;
            IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell3.FixedHeight = 15f;
            IncomeCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            else
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            PdfPCell IncomeHeader = new PdfPCell(new Phrase("Financial Information - As reported by Applicant", TblFontBold));
            IncomeHeader.Colspan = 5;
            IncomeHeader.FixedHeight = 15f;
            IncomeHeader.BackgroundColor = BaseColor.LIGHT_GRAY;
            IncomeHeader.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeHeader);
            string[] Incomecol = { "Household Member", "Amount", "Interval", "Income Sources", "How Verified?" };
            for (int p = 0; p < Incomecol.Length; ++p)
            {
                PdfPCell Incomecell = new PdfPCell(new Phrase(Incomecol[p], TableFontBoldItalic));
                Incomecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Incomecell.FixedHeight = 15f;
                Incomecell.Border = iTextSharp.text.Rectangle.BOX;
                IncomeTable.AddCell(Incomecell);
            }

            if (dsIncome.Tables.Count > 0)
                dtIncome = dsIncome.Tables[0];

            decimal Row_Prog_Income = 0; string interval = null, MemName = null, Income_Verifier = null;
            string IncomeDesc = null, privSeq = null;
            if (dtCaseIncome.Rows.Count > 0)
            {
                DataView dv = dtCaseIncome.DefaultView;
                dv.RowFilter = "INCOME_EXCLUDE = 'N'";
                dv.Sort = "INCOME_FAMILY_SEQ ASC";
                dtCaseIncome = dv.ToTable();
                foreach (DataRow drCaseIncome in dtCaseIncome.Rows)
                {
                    Income_Verifier = interval = IncomeDesc = string.Empty;
                    if (drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim() != privSeq)
                    {
                        if (!string.IsNullOrEmpty(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim()))
                            MemName = Get_Member_Name(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim(), string.Empty);
                        PdfPCell House_HoldMem = new PdfPCell(new Phrase(MemName, TableFont));
                        House_HoldMem.Colspan = 5;
                        House_HoldMem.HorizontalAlignment = Element.ALIGN_LEFT;
                        House_HoldMem.FixedHeight = 15f;
                        House_HoldMem.Border = iTextSharp.text.Rectangle.BOX;
                        IncomeTable.AddCell(House_HoldMem);
                        privSeq = drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim();
                    }
                    PdfPCell Income_Space = new PdfPCell(new Phrase("", TableFont));
                    Income_Space.Colspan = 1;
                    Income_Space.HorizontalAlignment = Element.ALIGN_CENTER;
                    Income_Space.FixedHeight = 15f;
                    Income_Space.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Income_Space);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim()))
                        Row_Prog_Income = decimal.Parse(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim());
                    PdfPCell Amount = new PdfPCell(new Phrase(Row_Prog_Income.ToString(), TableFont));
                    Amount.HorizontalAlignment = Element.ALIGN_CENTER;
                    Amount.FixedHeight = 15f;
                    Amount.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Amount);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_INTERVAL"].ToString().Trim()))
                        interval = LookupDataAccess.ShowIncomeInterval(drCaseIncome["INCOME_INTERVAL"].ToString().Trim());
                    PdfPCell Freq = new PdfPCell(new Phrase(interval, TableFont));
                    Freq.HorizontalAlignment = Element.ALIGN_LEFT;
                    Freq.FixedHeight = 15f;
                    Freq.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Freq);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_TYPE"].ToString().Trim()))
                        IncomeDesc = Get_IncomeType_Desc(drCaseIncome["INCOME_TYPE"].ToString().Trim());

                    PdfPCell IncomeSource = new PdfPCell(new Phrase(IncomeDesc, TableFont));
                    IncomeSource.HorizontalAlignment = Element.ALIGN_CENTER;
                    IncomeSource.FixedHeight = 15f;
                    IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeSource);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim()))
                        Income_Verifier = drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim();

                    PdfPCell IncomeVer = new PdfPCell(new Phrase(Income_Verifier, TableFont));
                    IncomeVer.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeVer.FixedHeight = 15f;
                    IncomeVer.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeVer);

                }
            }

            PdfPTable TotIncomeTable = new PdfPTable(8);
            TotIncomeTable.TotalWidth = 750f;
            TotIncomeTable.WidthPercentage = 100;
            TotIncomeTable.LockedWidth = true;
            float[] TotIncomeTablewidths = new float[] { 50f, 30f, 50f, 40f, 60f, 30f, 50f, 30f };
            TotIncomeTable.SetWidths(TotIncomeTablewidths);
            TotIncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //IncomeTable.SpacingBefore = 60f;

            PdfPCell Total_Space = new PdfPCell(new Phrase("", TableFont));
            Total_Space.Colspan = 8;
            Total_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            Total_Space.FixedHeight = 15f;
            Total_Space.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Space);

            PdfPCell Total = new PdfPCell(new Phrase("Total Income", TableFont));
            Total.HorizontalAlignment = Element.ALIGN_LEFT;
            Total.FixedHeight = 15f;
            Total.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total);

            PdfPCell Total_Income = new PdfPCell(new Phrase(drCaseMST["MST_FAM_INCOME"].ToString().Trim(), TableFont));
            Total_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Total_Income.FixedHeight = 15f;
            Total_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Income);

            PdfPCell Program = new PdfPCell(new Phrase("Program Income", TableFont));
            Program.HorizontalAlignment = Element.ALIGN_LEFT;
            Program.FixedHeight = 15f;
            Program.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program);

            PdfPCell Program_Income = new PdfPCell(new Phrase(drCaseMST["MST_PROG_INCOME"].ToString().Trim(), TableFont));
            Program_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Program_Income.FixedHeight = 15f;
            Program_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program_Income);

            PdfPCell Federal = new PdfPCell(new Phrase("% of Federal Poverty Level", TableFont));
            Federal.HorizontalAlignment = Element.ALIGN_LEFT;
            Federal.FixedHeight = 15f;
            Federal.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal);

            PdfPCell Federal_Poverty = new PdfPCell(new Phrase(drCaseMST["MST_POVERTY"].ToString().Trim() + "%", TableFont));
            Federal_Poverty.HorizontalAlignment = Element.ALIGN_CENTER;
            Federal_Poverty.FixedHeight = 15f;
            Federal_Poverty.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal_Poverty);

            PdfPCell HUD = new PdfPCell(new Phrase("HUD%", TableFont));
            HUD.HorizontalAlignment = Element.ALIGN_LEFT;
            HUD.FixedHeight = 15f;
            HUD.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD);

            PdfPCell HUD_Value = new PdfPCell(new Phrase(drCaseMST["MST_HUD"].ToString().Trim() + "%", TableFont));
            HUD_Value.HorizontalAlignment = Element.ALIGN_CENTER;
            HUD_Value.FixedHeight = 15f;
            HUD_Value.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD_Value);

            document.Add(IncomeTable);
            document.Add(TotIncomeTable);

            #endregion

           
            #region Income Verification

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            if ((Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance") || DEPState != "TX")
            {
                PdfPTable Income_Last = new PdfPTable(15);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
                Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
                Income_Verified.FixedHeight = 15f;
                Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Income_Verified);

                if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
                {
                    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
                    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2Cheked);
                    //PdfPCell W2Cheked = new PdfPCell(new Phrase("R", Times_Check));
                    //W2Cheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    //W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2Cheked);
                }
                else
                {
                    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
                    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2UnCheked);

                    //PdfPCell W2UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    //W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2UnCheked);
                }

                PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
                W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
                W2Text.FixedHeight = 15f;
                W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(W2Text);

                if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
                {
                    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
                    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_Check);
                    //PdfPCell CHECK_STUB_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //CHECK_STUB_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_Check.FixedHeight = 15f;
                    //CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_Check);
                }
                else
                {
                    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
                    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_UnCheked);
                    //PdfPCell CHECK_STUB_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_UnCheked.FixedHeight = 15f;
                    //CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_UnCheked);
                }

                PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
                CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
                CHECK_STUB.FixedHeight = 15f;
                CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(CHECK_STUB);

                if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
                {
                    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
                    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_Check);
                    //PdfPCell LETTER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //LETTER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_Check.FixedHeight = 15f;
                    //LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_Check);
                }
                else
                {
                    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
                    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_UnCheked);
                    //PdfPCell LETTER_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_UnCheked.FixedHeight = 15f;
                    //LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_UnCheked);
                }

                PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
                LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
                LETTER.FixedHeight = 15f;
                LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(LETTER);

                if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
                {
                    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
                    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_Check);
                    //PdfPCell TAX_RETURN_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //TAX_RETURN_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_Check.FixedHeight = 15f;
                    //TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_Check);
                }
                else
                {
                    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
                    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_UnCheked);
                    //PdfPCell TAX_RETURN_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_UnCheked.FixedHeight = 15f;
                    //TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_UnCheked);
                }

                PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
                TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
                TAX_RETURN.FixedHeight = 15f;
                TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(TAX_RETURN);

                if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
                {
                    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
                    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_Check);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }
                else
                {
                    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
                    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_UnCheked);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("Q", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }

                PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
                OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
                OTHER.FixedHeight = 15f;
                OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(OTHER);

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }


                if (ShortName != "UETHDA")
                {
                    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    V_Space.Colspan = 15;
                    V_Space.FixedHeight = 15f;
                    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(V_Space);

                    PdfPCell P_Ver = new PdfPCell(new Phrase("Client Verification ______________________________________________________________________________", Times));
                    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver.Colspan = 11;
                    P_Ver.FixedHeight = 15f;
                    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver);

                    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver1.Colspan = 2;
                    P_Ver1.FixedHeight = 15f;
                    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver1);

                    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Ver_Date_Space.FixedHeight = 15f;
                    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(Ver_Date_Space);

                    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //P_Ver2.Colspan = 4;
                    P_Ver2.FixedHeight = 15f;
                    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver2);

                    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Ver_Space.FixedHeight = 15f;
                    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Ver_Space);
                }
                document.Add(Income_Last);
            }
            else
            {
                PdfPTable Income_Last = new PdfPTable(5);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 25f, 20f, 13f, 30f, 100f };//80f, 50f, 40f, 90f, 80f 
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }

                PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                V_Space.FixedHeight = 15f;
                V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(V_Space);

                document.Add(Income_Last);
            }

            #endregion


            #region LastIncome Table Not Used

            //PdfPTable Income_Last = new PdfPTable(15);
            //Income_Last.TotalWidth = 750f;
            //Income_Last.WidthPercentage = 100;
            //Income_Last.LockedWidth = true;
            //float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
            //Income_Last.SetWidths(Income_Lastwidths);
            //Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
            //Income_Last.SpacingBefore = 20f;


            //iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            //iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            //_image_UnChecked.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);


            //PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
            //Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
            //Income_Verified.FixedHeight = 15f;
            //Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Income_Verified);

            //if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
            //{
            //    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
            //    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2Cheked);
            //}
            //else
            //{
            //    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
            //    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2UnCheked);
            //}

            //PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
            //W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
            //W2Text.FixedHeight = 15f;
            //W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(W2Text);

            //if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
            //{
            //    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
            //    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_Check);
            //}
            //else
            //{
            //    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
            //    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_UnCheked);
            //}

            //PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
            //CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
            //CHECK_STUB.FixedHeight = 15f;
            //CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(CHECK_STUB);

            //if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
            //    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_Check);
            //}
            //else
            //{
            //    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
            //    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_UnCheked);
            //}

            //PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
            //LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
            //LETTER.FixedHeight = 15f;
            //LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(LETTER);

            //if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
            //{
            //    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
            //    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_Check);
            //}
            //else
            //{
            //    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
            //    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_UnCheked);
            //}

            //PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
            //TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
            //TAX_RETURN.FixedHeight = 15f;
            //TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(TAX_RETURN);

            //if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
            //    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_Check);
            //}
            //else
            //{
            //    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
            //    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_UnCheked);
            //}

            //PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
            //OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
            //OTHER.FixedHeight = 15f;
            //OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(OTHER);

            //PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
            //Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verification_Date.FixedHeight = 15f;
            //Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verification_Date);

            //if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
            //{
            //    PdfPCell Verify_Date = new PdfPCell(new Phrase(drCaseMST["MST_ELIG_DATE"].ToString().Trim(), Timesline));
            //    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date.FixedHeight = 15f;
            //    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date);
            //}
            //else
            //{
            //    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
            //    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date_Space.FixedHeight = 15f;
            //    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date_Space);
            //}

            //PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
            //Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verifier_Head.FixedHeight = 15f;
            //Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verifier_Head);

            //string CaseWorker = null;
            //if (dtVerifier.Rows.Count > 0)
            //{
            //    foreach (DataRow drVerifier in dtVerifier.Rows)
            //    {
            //        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
            //        {
            //            CaseWorker = drVerifier["NAME"].ToString().Trim();
            //            break;
            //        }
            //    }
            //}

            //if (!string.IsNullOrEmpty(CaseWorker))
            //{
            //    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
            //    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier.FixedHeight = 15f;
            //    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier);
            //}
            //else
            //{
            //    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier_Space.FixedHeight = 15f;
            //    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier_Space);
            //}

            //if (ShortName != "UETHDA")
            //{
            //    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
            //    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    V_Space.Colspan = 15;
            //    V_Space.FixedHeight = 15f;
            //    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(V_Space);

            //    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
            //    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
            //    P_Ver.Colspan = 11;
            //    P_Ver.FixedHeight = 15f;
            //    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(P_Ver);

            //    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
            //    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
            //    P_Ver1.Colspan = 2;
            //    P_Ver1.FixedHeight = 15f;
            //    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(P_Ver1);

            //    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
            //    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    //Ver_Date_Space.FixedHeight = 15f;
            //    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    //Income_Last.AddCell(Ver_Date_Space);

            //    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
            //    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
            //    //P_Ver2.Colspan = 4;
            //    P_Ver2.FixedHeight = 15f;
            //    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(P_Ver2);

            //    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Ver_Space.FixedHeight = 15f;
            //    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Ver_Space);
            //}

            //End of Income Details

            #endregion

            #region Start of Energy Calculations
            PdfPTable Energy = new PdfPTable(3);
            Energy.TotalWidth = 750f;
            Energy.WidthPercentage = 100;
            Energy.LockedWidth = true;
            float[] Energy_widths = new float[] { 60, 60f, 60f };
            Energy.SetWidths(Energy_widths);
            Energy.HorizontalAlignment = Element.ALIGN_CENTER;
            Energy.SpacingBefore = 20f;


            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance" || DEPState == "TX")
            {
                PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
                Compute.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute.FixedHeight = 15f;
                Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute);

                PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
                Compute_Space.Colspan = 2;
                Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute_Space.FixedHeight = 15f;
                Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute_Space);

                decimal UtilityCost = 0; decimal EnergyBurden = 0;
                if (ADDCUST_List.Count > 0)
                {
                    AddCustEntity Custdet = ADDCUST_List.Find(u => u.ACTCODE.Equals("C00012") && u.ACTAPPNO.Equals(BaseForm.BaseApplicationNo));
                    if (Custdet != null)
                    {
                        if (!string.IsNullOrEmpty(Custdet.ACTNUMRESP.Trim()))
                            UtilityCost = decimal.Parse(Custdet.ACTNUMRESP.Trim());
                    }
                }

                PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: " + UtilityCost.ToString("0.00"), Times));
                Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
                Utility_Costs.FixedHeight = 15f;
                Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Utility_Costs);

                PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
                Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
                Annual_Income.FixedHeight = 15f;
                Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Annual_Income);

                if (decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim()) > 0 && UtilityCost > 0)
                    EnergyBurden = (UtilityCost / decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim())) * 100;

                PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: " + EnergyBurden.ToString("0.00") + "%", Times));
                Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
                Energy_Burden.FixedHeight = 15f;
                Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Energy_Burden);
            }

            #endregion

            #region Start of the Services table for a applicant

            PdfPTable Services = new PdfPTable(2);
            Services.TotalWidth = 750f;
            Services.WidthPercentage = 100;
            Services.LockedWidth = true;
            float[] Services_widths = new float[] { 40f, 120f };
            Services.SetWidths(Services_widths);
            Services.HorizontalAlignment = Element.ALIGN_CENTER;
            Services.SpacingBefore = 20f;

            PdfPCell Services_Requested = new PdfPCell(new Phrase("Services Requested", TblFontBold));
            Services_Requested.Colspan = 2;
            Services_Requested.HorizontalAlignment = Element.ALIGN_LEFT;
            Services_Requested.FixedHeight = 15f;
            Services_Requested.BackgroundColor = BaseColor.LIGHT_GRAY;
            Services_Requested.Border = iTextSharp.text.Rectangle.BOX;
            Services.AddCell(Services_Requested);

            if (MSTSER_List.Count > 0)
            {
                foreach (CaseMSTSER Entity in MSTSER_List)
                {
                    PdfPCell SerVice_Code = new PdfPCell(new Phrase(Entity.Service.Trim(), Times));
                    SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_Code.FixedHeight = 15f;
                    SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_Code);
                    string Ser_Desc = null;
                    if (SerHie == "Y")
                    {
                        foreach (DataRow drCaseHie in dtCaseHie.Rows)
                        {
                            if (Entity.Service.Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && Entity.Service.Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && Entity.Service.Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
                            {
                                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (CAMASTList.Count > 0)
                        {
                            foreach (CAMASTEntity serEntity in CAMASTList)
                            {
                                if (serEntity.Code.Trim() == Entity.Service.Trim())
                                { Ser_Desc = serEntity.Desc.Trim(); break; }
                            }
                        }
                    }
                    PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
                    SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_DESC.FixedHeight = 15f;
                    SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_DESC);
                }
            }
            //if (dtMSTSER.Rows.Count > 0)
            //{
            //    foreach (DataRow drMSTSER in dtMSTSER.Rows)
            //    {
            //        PdfPCell SerVice_Code = new PdfPCell(new Phrase(drMSTSER["MSTSER_SERVICE"].ToString().Trim(), Times));
            //        SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
            //        SerVice_Code.FixedHeight = 15f;
            //        SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
            //        Services.AddCell(SerVice_Code);
            //        string Ser_Desc = null;
            //        foreach (DataRow drCaseHie in dtCaseHie.Rows)
            //        {
            //            if (drMSTSER["MSTSER_SERVICE"].ToString().Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
            //            {
            //                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
            //                break;
            //            }
            //        }
            //        PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
            //        SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
            //        SerVice_DESC.FixedHeight = 15f;
            //        SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
            //        Services.AddCell(SerVice_DESC);
            //    }
            //}

            #endregion

            //document.Add(Income_Last);
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
                document.Add(Energy);
            document.Add(Services);

            //document.NewPage();

            #region Question Table
            //Start the Custom Question table for an applicant
            PdfPTable Questions = new PdfPTable(3);
            Questions.TotalWidth = 750f;
            Questions.WidthPercentage = 100;
            Questions.LockedWidth = true;
            float[] Questions_widths = new float[] { 100f, 40f, 60f };
            Questions.SetWidths(Questions_widths);
            Questions.HorizontalAlignment = Element.ALIGN_CENTER;
            Questions.SpacingBefore = 30f;
            Questions.HeaderRows = 6;


            PdfPCell QueCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            QueCell.Colspan = 3;
            QueCell.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell.FixedHeight = 15f;
            QueCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell);

            PdfPCell QueCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            QueCell1.Colspan = 3;
            QueCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell1.FixedHeight = 15f;
            QueCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell1);

            PdfPCell QueCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            //QueCell0.Colspan = 2;
            QueCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell0.FixedHeight = 15f;
            QueCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell0);

            PdfPCell QueCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            QueCell2.Colspan = 2;
            QueCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            QueCell2.FixedHeight = 15f;
            QueCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell2);

            PdfPCell QueCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            //QueCell3.Colspan = 3;
            QueCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell3.FixedHeight = 15f;
            QueCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }
            else
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }

            PdfPCell Add_Ques_Header = new PdfPCell(new Phrase("Additional Intake Questions and Answers", TblFontBold));
            Add_Ques_Header.Colspan = 3;
            Add_Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Add_Ques_Header.FixedHeight = 15f;
            //Add_Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Add_Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Add_Ques_Header);

            PdfPCell Ques_Header = new PdfPCell(new Phrase("Question Description", TblFontBold));
            ////Ques_Header.Colspan = 3;
            Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Header.FixedHeight = 15f;
            Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Header);

            PdfPCell Ques_Member = new PdfPCell(new Phrase("Member", TblFontBold));
            Ques_Member.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Member.FixedHeight = 15f;
            Ques_Member.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Member.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Member);

            PdfPCell Ques_Response = new PdfPCell(new Phrase("Response", TblFontBold));
            Ques_Response.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Response.FixedHeight = 15f;
            Ques_Response.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Response.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Response);
            List<CustRespEntity> CustResp_List;
            if (ADDCUST_List.Count > 0)
            {
                foreach (AddCustEntity Entity in ADDCUST_List)
                {
                    string CustQues_Code = Entity.ACTCODE.Trim();
                    string CustQues_Desc = null;
                    string CustQues_Type = null;
                    string CustQuesResponse_Desc = null;
                    string Member_Desc = null;
                    if (custQues_List.Count > 0)
                    {
                        foreach (CustfldsEntity CustQues in custQues_List)
                        {
                            if (CustQues_Code.Trim() == CustQues.CustCode.Trim())
                            {
                                CustQues_Desc = CustQues.CustDesc.Trim();
                                CustQues_Type = CustQues.RespType.Trim();
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(CustQues_Type))
                        {
                            PdfPCell Ques_DESC = new PdfPCell(new Phrase(CustQues_Desc, TableFont));
                            Ques_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_DESC.FixedHeight = 15f;
                            Ques_DESC.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_DESC);

                            if (CustQues_Type.Trim() == "N")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim().Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else if (CustQues_Type.Trim() == "T")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Member";
                                }
                            }
                            else if ((CustQues_Type.Trim() == "A" || CustQues_Type.Trim() == "X"))
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else
                            {
                                CustRespEntity Search_Entity = new CustRespEntity(true);
                                Search_Entity.ResoCode = CustQues_Code.Trim();
                                Search_Entity.ScrCode = "CASE2001";
                                //Search_Entity.RecType = Search_Entity.RespSeq = null;
                                //Search_Entity.RespDesc = Search_Entity.DescCode = Search_Entity.AddDate = Search_Entity.AddOpr = null;
                                //Search_Entity.ChgDate = Search_Entity.ChgOpr = Search_Entity.Changed = null;
                                CustResp_List = _model.FieldControls.Browse_CUSTRESP(Search_Entity, "Browse");
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim().Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Member";
                                }
                            }

                            PdfPCell Ques_Mem_Name = new PdfPCell(new Phrase(Member_Desc, TableFont));
                            Ques_Mem_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_Mem_Name.FixedHeight = 15f;
                            Ques_Mem_Name.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_Mem_Name);

                            PdfPCell Resp_Desc = new PdfPCell(new Phrase(CustQuesResponse_Desc, TableFont));
                            Resp_Desc.HorizontalAlignment = Element.ALIGN_LEFT;
                            Resp_Desc.FixedHeight = 15f;
                            Resp_Desc.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Resp_Desc);

                        }
                    }
                }
            }
            //End of custom Questions Table

            if (ADDCUST_List.Count > 0)
            {
                document.NewPage();
                document.Add(Questions);
            }

            #endregion




            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

            //X_Pos = 30; Y_Pos -= 30;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

            //cb.EndText();

            //PdfPTable Spacetable = new PdfPTable(1);
            //Spacetable.HorizontalAlignment = Element.ALIGN_CENTER;
            //Spacetable.TotalWidth = 600f;

            //document.Add(Spacetable);

            if ((Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance") || DEPState != "TX")
            {
                document.NewPage();

                #region Employment Details

                PdfPTable EmploymentDet = new PdfPTable(6);
                EmploymentDet.TotalWidth = 750f;
                EmploymentDet.WidthPercentage = 100;
                EmploymentDet.LockedWidth = true;
                float[] EmploymentDet_widths = new float[] { 20f, 40f, 1f, 8f, 1f, 10f };
                EmploymentDet.SetWidths(EmploymentDet_widths);
                EmploymentDet.HorizontalAlignment = Element.ALIGN_CENTER;
                EmploymentDet.SpacingBefore = 50f;

                PdfPCell EmpCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                EmpCell.Colspan = 6;
                EmpCell.HorizontalAlignment = Element.ALIGN_CENTER;
                EmpCell.FixedHeight = 15f;
                EmpCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell);

                PdfPCell EmpCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                EmpCell1.Colspan = 6;
                EmpCell1.HorizontalAlignment = Element.ALIGN_CENTER;
                EmpCell1.FixedHeight = 15f;
                EmpCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell1);

                PdfPCell EmpCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                EmpCell0.Colspan = 2;
                EmpCell0.HorizontalAlignment = Element.ALIGN_LEFT;
                EmpCell0.FixedHeight = 13f;
                EmpCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell0);

                PdfPCell EmpCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                EmpCell2.Colspan = 4;
                EmpCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell2.FixedHeight = 13f;
                EmpCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell2);

                PdfPCell EmpCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                EmpCell3.Colspan = 2;
                EmpCell3.HorizontalAlignment = Element.ALIGN_LEFT;
                EmpCell3.FixedHeight = 13f;
                EmpCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell3);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    EmpCell4.Colspan = 4;
                    EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                    EmpCell4.FixedHeight = 13f;
                    EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(EmpCell4);
                }
                else
                {
                    PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    EmpCell4.Colspan = 4;
                    EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                    EmpCell4.FixedHeight = 13f;
                    EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(EmpCell4);
                }
                //if (Privileges.ModuleCode == "02" || Privileges.ModuleCode == "03")
                //{
                PdfPCell Computer = new PdfPCell(new Phrase("EMPLOYMENT INFORMATION", TblFontBold));
                Computer.HorizontalAlignment = Element.ALIGN_LEFT;
                Computer.Colspan = 2;
                Computer.FixedHeight = 15f;
                Computer.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Computer);

                PdfPCell Applicant = new PdfPCell(new Phrase("Applicant Name/ID", Times));
                Applicant.Colspan = 2;
                Applicant.HorizontalAlignment = Element.ALIGN_LEFT;
                Applicant.FixedHeight = 15f;
                Applicant.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Applicant);

                PdfPCell ApplicationName = new PdfPCell(new Phrase(BaseForm.BaseApplicationName, Timesline));
                ApplicationName.HorizontalAlignment = Element.ALIGN_LEFT;
                ApplicationName.Colspan = 2;
                ApplicationName.FixedHeight = 15f;
                ApplicationName.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(ApplicationName);

                PdfPCell Mother = new PdfPCell(new Phrase("Mother/Gurdian Employer Name", Times));
                Mother.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother.FixedHeight = 15f;
                Mother.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother);

                if (!string.IsNullOrEmpty(MotherName.Trim()))
                {
                    PdfPCell Mother_Line = new PdfPCell(new Phrase(MotherName, Timesline));
                    Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Mother_Line.FixedHeight = 15f;
                    Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Mother_Line);
                }
                else
                {
                    PdfPCell Mother_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Mother_Line.FixedHeight = 15f;
                    Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Mother_Line);
                }

                if (M_FullPart == "F")
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell FullTime = new PdfPCell(new Phrase("Full Time", Times));
                FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
                FullTime.FixedHeight = 15f;
                FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime);

                if (M_FullPart == "P")
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell PartTime = new PdfPCell(new Phrase("Part Time", Times));
                PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
                PartTime.FixedHeight = 15f;
                PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime);


                PdfPCell MWork_Add = new PdfPCell(new Phrase("Work Address", Times));
                MWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Add.Colspan = 2;
                MWork_Add.FixedHeight = 15f;
                MWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Add);

                if (!string.IsNullOrEmpty(M_Address.Trim()))
                {
                    PdfPCell MWork_Line = new PdfPCell(new Phrase(M_Address, Timesline));
                    MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    MWork_Line.FixedHeight = 15f;
                    MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Line);
                }
                else
                {
                    PdfPCell MWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    MWork_Line.FixedHeight = 15f;
                    MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Line);
                }

                PdfPCell MWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
                MWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone.Colspan = 2;
                MWork_Phone.FixedHeight = 15f;
                MWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone);

                if (!string.IsNullOrEmpty(M_Phone.Trim()))
                {
                    MaskedTextBox mskphn = new MaskedTextBox();
                    mskphn.Mask = "(999)000-0000";
                    mskphn.Text = M_Phone.Trim();

                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                else
                {
                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                PdfPCell Father = new PdfPCell(new Phrase("Father/Gurdian Employer Name", Times));
                Father.HorizontalAlignment = Element.ALIGN_LEFT;
                Father.FixedHeight = 15f;
                Father.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father);

                if (!string.IsNullOrEmpty(FatherName.Trim()))
                {
                    PdfPCell Father_Line = new PdfPCell(new Phrase(FatherName, Timesline));
                    Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Father_Line.FixedHeight = 15f;
                    Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Father_Line);
                }
                else
                {
                    PdfPCell Father_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Father_Line.FixedHeight = 15f;
                    Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Father_Line);
                }

                if (F_FullPart == "F")
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell F_FullTime = new PdfPCell(new Phrase("Full Time", Times));
                F_FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
                F_FullTime.FixedHeight = 15f;
                F_FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(F_FullTime);

                if (F_FullPart == "P")
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                    //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //FullTime_UnCheked.FixedHeight = 15f;
                    //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell F_PartTime = new PdfPCell(new Phrase("Part Time", Times));
                F_PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
                F_PartTime.FixedHeight = 15f;
                F_PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(F_PartTime);


                PdfPCell FWork_Add = new PdfPCell(new Phrase("Work Address", Times));
                FWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Add.Colspan = 2;
                FWork_Add.FixedHeight = 15f;
                FWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Add);

                if (!string.IsNullOrEmpty(F_Address.Trim()))
                {
                    PdfPCell FWork_Line = new PdfPCell(new Phrase(F_Address, Timesline));
                    FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    FWork_Line.FixedHeight = 15f;
                    FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FWork_Line);
                }
                else
                {
                    PdfPCell FWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    FWork_Line.FixedHeight = 15f;
                    FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FWork_Line);
                }

                PdfPCell FWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
                FWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                FWork_Phone.Colspan = 2;
                FWork_Phone.FixedHeight = 15f;
                FWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Phone);

                if (!string.IsNullOrEmpty(F_Phone.Trim()))
                {
                    MaskedTextBox mskphn = new MaskedTextBox();
                    mskphn.Mask = "(999)000-0000";
                    mskphn.Text = F_Phone.Trim();

                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                else
                {
                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }



                PdfPCell Line = new PdfPCell(new Phrase("", Times));
                Line.HorizontalAlignment = Element.ALIGN_CENTER;
                Line.Colspan = 6;
                //Line.FixedHeight = 15f;
                Line.BorderWidthBottom = 2f;
                Line.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                EmploymentDet.AddCell(Line);

                document.Add(EmploymentDet);

                #endregion

                #region Emergency Data Details

                PdfPTable Emergency = new PdfPTable(4);
                Emergency.TotalWidth = 750f;
                Emergency.WidthPercentage = 100;
                Emergency.LockedWidth = true;
                float[] Emergency_widths = new float[] { 55f, 50f, 40f, 50f };
                Emergency.SetWidths(Emergency_widths);
                Emergency.HorizontalAlignment = Element.ALIGN_CENTER;
                Emergency.SpacingBefore = 10f;

                PdfPCell Emer_Head = new PdfPCell(new Phrase("Emergency/Medical Data", TblFontBold));
                Emer_Head.Colspan = 4;
                Emer_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Head.FixedHeight = 15f;
                Emer_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Head);

                if (chldEmemDetails.Count > 0)
                {
                    int Em_Count = 0;

                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.FixedHeight = 15f;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name);

                    PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                    Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Relation.FixedHeight = 15f;
                    Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Relation);

                    PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                    Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Addr.FixedHeight = 15f;
                    Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Addr);

                    PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                    Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Phone.FixedHeight = 15f;
                    Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Phone);

                    foreach (ChldMstEMEMEntitty item in chldEmemDetails)
                    {
                        //PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", Times));
                        //Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Name.FixedHeight = 15f;
                        //Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Name);
                        if (!string.IsNullOrEmpty(item.EMERName.Trim()))
                        {
                            PdfPCell Emer_Name_Line = new PdfPCell(new Phrase(item.EMERName, Times));
                            Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Name_Line.FixedHeight = 15f;
                            Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Name_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Name_Line.FixedHeight = 15f;
                            Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Name_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
                        {
                            string Rel_Desc = string.Empty;
                            if (AgyTabs_List.Count > 0)
                            {
                                AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
                                Rel_Desc = Rela.Code_Desc.Trim();
                            }

                            PdfPCell Emer_Rela = new PdfPCell(new Phrase(Rel_Desc, Times));
                            Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Rela.FixedHeight = 15f;
                            Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Rela);
                        }
                        else
                        {
                            PdfPCell Emer_Rela = new PdfPCell(new Phrase("________________", Times));
                            Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Rela.FixedHeight = 15f;
                            Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Rela);
                        }


                        if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress1, Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        //PdfPCell Emer_Tel = new PdfPCell(new Phrase("Telephone:", Times));
                        //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                        ////Emer_Space.Colspan = 2;
                        //Emer_Tel.FixedHeight = 15f;
                        //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel);
                        //string Emer_Phone = string.Empty;
                        //if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()) && item.EmerPhone1.Trim().Length == 10)
                        //    Emer_Phone = "(" + item.EmerPhone1.Substring(0, 3).Trim() + ") " + item.EmerPhone1.Substring(3, 3).Trim() + "-" + item.EmerPhone1.Substring(6, 4).Trim();
                        //else
                        //    Emer_Phone = item.EmerPhone1.Trim();

                        if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
                        {
                            MaskedComboBox mskemerphn = new MaskedComboBox();
                            mskemerphn.Mask = "(000)000-0000";
                            mskemerphn.Text = item.EmerPhone1;
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()) || !string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                        {
                            PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                            Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Space.Colspan = 2;
                            Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Space);

                            if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()))
                            {
                                PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress2, Times));
                                Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Address_Line.FixedHeight = 15f;
                                Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Address_Line);
                            }
                            else
                            {
                                PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("", Times));
                                Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Address_Line.FixedHeight = 15f;
                                Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Address_Line);
                            }

                            if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                            {
                                MaskedComboBox mskemerphn = new MaskedComboBox();
                                mskemerphn.Mask = "(000)000-0000";
                                mskemerphn.Text = item.EmerPhone2;
                                PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                                Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Tel_Line.FixedHeight = 15f;
                                Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Tel_Line);
                            }
                            else
                            {
                                PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                                Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Tel_Line.FixedHeight = 15f;
                                Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Tel_Line);
                            }
                        }

                        Em_Count++;
                        if (Em_Count == 2)
                            break;
                    }
                }
                else
                {
                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.FixedHeight = 15f;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name);

                    PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                    Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Relation.FixedHeight = 15f;
                    Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Relation);

                    PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                    Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Addr.FixedHeight = 15f;
                    Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Addr);

                    PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                    Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Phone.FixedHeight = 15f;
                    Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Phone);

                    for (int i = 0; i < 2; i++)
                    {
                        PdfPCell Emer_Name1 = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name1.FixedHeight = 15f;
                        Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name1);

                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);

                        //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Space.Colspan = 2;
                        //Emer_Space.FixedHeight = 15f;
                        //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Space);

                        PdfPCell Emer_Address = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address.FixedHeight = 15f;
                        Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address);

                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);

                        //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Space.Colspan = 2;
                        //Emer_Space.FixedHeight = 15f;
                        //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Space);

                        //PdfPCell Emer_Tel = new PdfPCell(new Phrase("", Times));
                        //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                        ////Emer_Space.Colspan = 2;
                        //Emer_Tel.FixedHeight = 15f;
                        //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel);

                        //PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                        //Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Tel_Line.FixedHeight = 15f;
                        //Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel_Line);
                    }
                }

                //PdfPCell Emer_Space1 = new PdfPCell(new Phrase("", Times));
                //Emer_Space1.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space1.Colspan = 4;
                //Emer_Space1.FixedHeight = 15f;
                //Emer_Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Emergency.AddCell(Emer_Space1);


                document.Add(Emergency);

                #endregion

                #region Health Insurance Information

                PdfPTable InsuranceTable = new PdfPTable(5);
                InsuranceTable.TotalWidth = 750f;
                InsuranceTable.WidthPercentage = 100;
                InsuranceTable.LockedWidth = true;
                float[] InsuranceTable_widths = new float[] { 25f, 30f, 45f, 60f, 25f };
                InsuranceTable.SetWidths(InsuranceTable_widths);
                InsuranceTable.HorizontalAlignment = Element.ALIGN_CENTER;
                InsuranceTable.SpacingBefore = 10f;

                PdfPCell INS_Head = new PdfPCell(new Phrase("HEALTH INSURANCE INFORMATION", TblFontBold));
                INS_Head.Colspan = 5;
                INS_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                INS_Head.FixedHeight = 15f;
                INS_Head.Border = iTextSharp.text.Rectangle.BOX;
                INS_Head.BorderWidth = 1f;
                InsuranceTable.AddCell(INS_Head);

                for (int i = 0; i < 4; i++)
                {
                    PdfPCell I1 = new PdfPCell(new Phrase("Name", TableFont));
                    I1.HorizontalAlignment = Element.ALIGN_LEFT;
                    I1.Colspan = 5;
                    I1.FixedHeight = 15f;
                    I1.BorderWidth = 1f;
                    I1.Border = iTextSharp.text.Rectangle.BOX;
                    InsuranceTable.AddCell(I1);

                    if (chldMstDetails != null && i == 0)
                    {
                        PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
                        I2.HorizontalAlignment = Element.ALIGN_LEFT;
                        I2.Rowspan = 2;
                        I2.BorderWidth = 1f;
                        I2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I2);

                        PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        I3.HorizontalAlignment = Element.ALIGN_LEFT;
                        I3.BorderWidth = 1f;
                        I3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        I4.HorizontalAlignment = Element.ALIGN_LEFT;
                        I4.BorderWidth = 1f;
                        I4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I4);

                        PdfPCell I5 = new PdfPCell(new Phrase(chldMstDetails.DoctorAddress.Trim(), TableFont));
                        I5.HorizontalAlignment = Element.ALIGN_LEFT;
                        I5.BorderWidth = 1f;
                        I5.Rowspan = 2;
                        I5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I5);

                        PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
                        I6.HorizontalAlignment = Element.ALIGN_LEFT;
                        I6.BorderWidth = 1f;
                        I6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I6);

                        if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                        {
                            PdfPCell I7 = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), TableFont));
                            I7.HorizontalAlignment = Element.ALIGN_LEFT;
                            I7.BorderWidth = 1f;
                            I7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I7);
                        }
                        else
                        {
                            PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
                            I7.HorizontalAlignment = Element.ALIGN_LEFT;
                            I7.BorderWidth = 1f;
                            I7.FixedHeight = 15f;
                            I7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I7);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                        {
                            PdfPCell I8 = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim(), TableFont));
                            I8.HorizontalAlignment = Element.ALIGN_LEFT;
                            I8.BorderWidth = 1f;
                            I8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I8);
                        }
                        else
                        {
                            PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
                            I8.HorizontalAlignment = Element.ALIGN_LEFT;
                            I8.BorderWidth = 1f;
                            I8.FixedHeight = 15f;
                            I8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I8);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                        {
                            PdfPCell I9 = new PdfPCell(new Phrase(chldMstDetails.DoctorPhone.Trim(), TableFont));
                            I9.HorizontalAlignment = Element.ALIGN_LEFT;
                            I9.BorderWidth = 1f;
                            I9.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I9);
                        }
                        else
                        {
                            PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
                            I9.HorizontalAlignment = Element.ALIGN_LEFT;
                            I9.BorderWidth = 1f;
                            I9.FixedHeight = 15f;
                            I9.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I9);
                        }

                        PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
                        D1.HorizontalAlignment = Element.ALIGN_LEFT;
                        D1.BorderWidth = 1f;
                        D1.Rowspan = 2;
                        D1.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D1);

                        PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        D2.HorizontalAlignment = Element.ALIGN_LEFT;
                        D2.BorderWidth = 1f;
                        D2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        D3.HorizontalAlignment = Element.ALIGN_LEFT;
                        D3.BorderWidth = 1f;
                        D3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D3);

                        PdfPCell D4 = new PdfPCell(new Phrase(chldMstDetails.DentistAddress.Trim(), TableFont));
                        D4.HorizontalAlignment = Element.ALIGN_LEFT;
                        D4.BorderWidth = 1f;
                        D4.Rowspan = 2;
                        D4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D4);

                        PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
                        D5.HorizontalAlignment = Element.ALIGN_LEFT;
                        D5.BorderWidth = 1f;
                        D5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D5);

                        if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                        {
                            PdfPCell D6 = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), TableFont));
                            D6.HorizontalAlignment = Element.ALIGN_LEFT;
                            D6.BorderWidth = 1f;
                            D6.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D6);
                        }
                        else
                        {
                            PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
                            D6.HorizontalAlignment = Element.ALIGN_LEFT;
                            D6.BorderWidth = 1f;
                            D6.FixedHeight = 15f;
                            D6.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D6);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                        {
                            PdfPCell D7 = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim(), TableFont));
                            D7.HorizontalAlignment = Element.ALIGN_LEFT;
                            D7.BorderWidth = 1f;
                            D7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D7);
                        }
                        else
                        {
                            PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
                            D7.HorizontalAlignment = Element.ALIGN_LEFT;
                            D7.BorderWidth = 1f;
                            D7.FixedHeight = 15f;
                            D7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D7);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                        {
                            PdfPCell D8 = new PdfPCell(new Phrase(chldMstDetails.DentistPhone.Trim(), TableFont));
                            D8.HorizontalAlignment = Element.ALIGN_LEFT;
                            D8.BorderWidth = 1f;
                            D8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D8);
                        }
                        else
                        {
                            PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
                            D8.HorizontalAlignment = Element.ALIGN_LEFT;
                            D8.BorderWidth = 1f;
                            D8.FixedHeight = 15f;
                            D8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D8);
                        }
                    }
                    else
                    {
                        PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
                        I2.HorizontalAlignment = Element.ALIGN_LEFT;
                        I2.Rowspan = 2;
                        I2.BorderWidth = 1f;
                        I2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I2);

                        PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        I3.HorizontalAlignment = Element.ALIGN_LEFT;
                        I3.BorderWidth = 1f;
                        I3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        I4.HorizontalAlignment = Element.ALIGN_LEFT;
                        I4.BorderWidth = 1f;
                        I4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I4);

                        PdfPCell I5 = new PdfPCell(new Phrase("", TableFont));
                        I5.HorizontalAlignment = Element.ALIGN_LEFT;
                        I5.BorderWidth = 1f;
                        I5.Rowspan = 2;
                        I5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I5);

                        PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
                        I6.HorizontalAlignment = Element.ALIGN_LEFT;
                        I6.BorderWidth = 1f;
                        I6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I6);

                        PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
                        I7.HorizontalAlignment = Element.ALIGN_LEFT;
                        I7.BorderWidth = 1f;
                        I7.FixedHeight = 15f;
                        I7.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I7);

                        PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
                        I8.HorizontalAlignment = Element.ALIGN_LEFT;
                        I8.BorderWidth = 1f;
                        I8.FixedHeight = 15f;
                        I8.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I8);

                        PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
                        I9.HorizontalAlignment = Element.ALIGN_LEFT;
                        I9.BorderWidth = 1f;
                        I9.FixedHeight = 15f;
                        I9.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I9);


                        PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
                        D1.HorizontalAlignment = Element.ALIGN_LEFT;
                        D1.BorderWidth = 1f;
                        D1.Rowspan = 2;
                        D1.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D1);

                        PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        D2.HorizontalAlignment = Element.ALIGN_LEFT;
                        D2.BorderWidth = 1f;
                        D2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        D3.HorizontalAlignment = Element.ALIGN_LEFT;
                        D3.BorderWidth = 1f;
                        D3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D3);

                        PdfPCell D4 = new PdfPCell(new Phrase("", TableFont));
                        D4.HorizontalAlignment = Element.ALIGN_LEFT;
                        D4.BorderWidth = 1f;
                        D4.Rowspan = 2;
                        D4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D4);

                        PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
                        D5.HorizontalAlignment = Element.ALIGN_LEFT;
                        D5.BorderWidth = 1f;
                        D5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D5);

                        PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
                        D6.HorizontalAlignment = Element.ALIGN_LEFT;
                        D6.BorderWidth = 1f;
                        D6.FixedHeight = 15f;
                        D6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D6);

                        PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
                        D7.HorizontalAlignment = Element.ALIGN_LEFT;
                        D7.BorderWidth = 1f;
                        D7.FixedHeight = 15f;
                        D7.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D7);

                        PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
                        D8.HorizontalAlignment = Element.ALIGN_LEFT;
                        D8.BorderWidth = 1f;
                        D8.FixedHeight = 15f;
                        D8.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D8);
                    }
                }

                document.Add(InsuranceTable);

                #endregion

                #region Mediacal data from chldmst

                //PdfPTable MediaclTable = new PdfPTable(4);
                //MediaclTable.TotalWidth = 750f;
                //MediaclTable.WidthPercentage = 100;
                //MediaclTable.LockedWidth = true;
                //float[] MediaclTable_widths = new float[] { 55f, 50f, 40f, 50f };
                //MediaclTable.SetWidths(MediaclTable_widths);
                //MediaclTable.HorizontalAlignment = Element.ALIGN_CENTER;
                //MediaclTable.SpacingBefore = 10f;
                //if (chldMstDetails != null)
                //{

                //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan.FixedHeight = 15f;
                //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan);

                //    if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                //    {
                //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
                //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_Plan_Line.FixedHeight = 15f;
                //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_Plan_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_Plan_Line.FixedHeight = 15f;
                //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_Plan_Line);
                //    }

                //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Med_No.FixedHeight = 15f;
                //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No);

                //    if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }

                //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Ins_Catg.FixedHeight = 15f;
                //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg);

                //    if (!string.IsNullOrEmpty(chldMstDetails.InsCat.Trim()))
                //    {
                //        string INS_CATG_DESC=string.Empty;
                //        if (lookInsuranceCategory.Count > 0)
                //        {
                //            foreach (CommonEntity Ins in lookInsuranceCategory)
                //            {
                //                if (chldMstDetails.InsCat.Trim() == Ins.Code.Trim())
                //                {
                //                    INS_CATG_DESC = Ins.Desc.Trim(); break;
                //                }
                //            }
                //        }

                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(INS_CATG_DESC, Timesline));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Colspan = 3;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.Colspan = 3;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }


                //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor.FixedHeight = 15f;
                //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                //    {
                //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim() + ", " + chldMstDetails.DoctorAddress, Timesline));
                //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doctor_Line.FixedHeight = 15f;
                //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doctor_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doctor_Line.FixedHeight = 15f;
                //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doctor_Line);
                //    }

                //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Doc_Phone.FixedHeight = 15f;
                //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                //    {
                //        MaskedTextBox mskdocphn = new MaskedTextBox();
                //        mskdocphn.Mask = "(000)000-0000";
                //        mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();
                //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doc_Phone_Line.FixedHeight = 15f;
                //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doc_Phone_Line.FixedHeight = 15f;
                //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
                //    }


                //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space2.Colspan = 4;
                //    Emer_Space2.FixedHeight = 10f;
                //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space2);

                //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan.FixedHeight = 15f;
                //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                //    {
                //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), Timesline));
                //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_Plan_Line.FixedHeight = 15f;
                //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_Plan_Line.FixedHeight = 15f;
                //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
                //    }

                //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dent_No.FixedHeight = 15f;
                //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentalInsurer.Trim()))
                //    {
                //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase(chldMstDetails.DentalInsurer.Trim(), Timesline));
                //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_No_Line.FixedHeight = 15f;
                //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_No_Line.FixedHeight = 15f;
                //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_No_Line);
                //    }


                //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist.FixedHeight = 15f;
                //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist);
                //    if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                //    {
                //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim() + ", " + chldMstDetails.DentistAddress, Timesline));
                //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Line.FixedHeight = 15f;
                //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Line.FixedHeight = 15f;
                //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Line);
                //    }

                //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dentist_Phone.FixedHeight = 15f;
                //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                //    {
                //        MaskedTextBox mskdocphn = new MaskedTextBox();
                //        mskdocphn.Mask = "(000)000-0000";
                //        mskdocphn.Text = chldMstDetails.DentistPhone.Trim();
                //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
                //    }

                //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space3.Colspan = 4;
                //    Emer_Space3.FixedHeight = 10f;
                //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space3);

                //    if (caseconddet != null)
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                //        {
                //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        else
                //        {
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Timesline));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Timesline));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }


                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                //        {
                //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        HH_Space.FixedHeight = 15f;
                //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HH_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DEVL_Space.FixedHeight = 15f;
                //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DEVL_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                //        {
                //            string AltFund_Desc = string.Empty;
                //            foreach (DataRow drFUND in dtFUND.Rows)
                //            {
                //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                //                {
                //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                //                }
                //            }

                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                //        {
                //            string Trans_Desc = string.Empty;
                //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                //            foreach (CommonEntity agyEntity in lookClsTransport)
                //            {
                //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                //                {
                //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                //                }
                //            }

                //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //            else
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);

                //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //    else
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIESLine.FixedHeight = 15f;
                //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIESLine);

                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITYLine.FixedHeight = 15f;
                //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITYLine);

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY_Date_Line.FixedHeight = 15f;
                //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date_Line);

                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONSLine.FixedHeight = 15f;
                //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONSLine);

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICALLine.FixedHeight = 15f;
                //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICALLine);

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DIETLine.Colspan = 2;
                //        DIETLine.FixedHeight = 15f;
                //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIETLine);

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DIET_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //HOUSEHOLDLine.Colspan = 2;
                //        HOUSEHOLDLine.FixedHeight = 15f;
                //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLDLine);

                //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        HOUSEHOLD_Space.Colspan = 2;
                //        HOUSEHOLD_Space.FixedHeight = 15f;
                //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLD_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DevpLine.Colspan = 2;
                //        DevpLine.FixedHeight = 15f;
                //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DevpLine);

                //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp_Space.Colspan = 2;
                //        Devp_Space.FixedHeight = 15f;
                //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnddesc.FixedHeight = 15f;
                //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnddesc);

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);


                //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Trans_Space.FixedHeight = 15f;
                //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans_Space);

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);


                //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        PickSpace.FixedHeight = 15f;
                //        PickSpace.Colspan = 3;
                //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(PickSpace);

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);


                //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        dropSpace.FixedHeight = 15f;
                //        dropSpace.Colspan = 3;
                //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(dropSpace);

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //}
                //else
                //{
                //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan.FixedHeight = 15f;
                //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan);

                //    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan_Line.FixedHeight = 15f;
                //    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan_Line);

                //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Med_No.FixedHeight = 15f;
                //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No);


                //    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_No_Line.FixedHeight = 15f;
                //    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No_Line);

                //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Ins_Catg.FixedHeight = 15f;
                //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg);


                //    PdfPCell Chld_Ins_Catg_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Ins_Catg_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Ins_Catg_Line.FixedHeight = 15f;
                //    Chld_Ins_Catg_Line.Colspan = 3;
                //    Chld_Ins_Catg_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg_Line);

                //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor.FixedHeight = 15f;
                //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor);

                //    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor_Line.FixedHeight = 15f;
                //    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor_Line);

                //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Doc_Phone.FixedHeight = 15f;
                //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone);


                //    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doc_Phone_Line.FixedHeight = 15f;
                //    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone_Line);

                //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space2.Colspan = 4;
                //    Emer_Space2.FixedHeight = 10f;
                //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space2);

                //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan.FixedHeight = 15f;
                //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan);

                //    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan_Line.FixedHeight = 15f;
                //    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan_Line);

                //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dent_No.FixedHeight = 15f;
                //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No);

                //    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_No_Line.FixedHeight = 15f;
                //    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No_Line);

                //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist.FixedHeight = 15f;
                //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist);

                //    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist_Line.FixedHeight = 15f;
                //    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Line);

                //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dentist_Phone.FixedHeight = 15f;
                //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone);

                //    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone_Line);

                //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space3.Colspan = 4;
                //    Emer_Space3.FixedHeight = 10f;
                //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space3);

                //    if (caseconddet != null)
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                //        {
                //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        else
                //        {
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }


                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                //        {
                //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        HH_Space.FixedHeight = 15f;
                //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HH_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DEVL_Space.FixedHeight = 15f;
                //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DEVL_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                //        {
                //            string AltFund_Desc = string.Empty;
                //            foreach (DataRow drFUND in dtFUND.Rows)
                //            {
                //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                //                {
                //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                //                }
                //            }

                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                //        {
                //            string Trans_Desc = string.Empty;
                //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                //            foreach (CommonEntity agyEntity in lookClsTransport)
                //            {
                //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                //                {
                //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                //                }
                //            }

                //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //            else
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);

                //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //    else
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIESLine.FixedHeight = 15f;
                //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIESLine);

                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITYLine.FixedHeight = 15f;
                //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITYLine);

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY_Date_Line.FixedHeight = 15f;
                //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date_Line);

                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONSLine.FixedHeight = 15f;
                //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONSLine);

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICALLine.FixedHeight = 15f;
                //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICALLine);

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DIETLine.Colspan = 2;
                //        DIETLine.FixedHeight = 15f;
                //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIETLine);

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DIET_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //HOUSEHOLDLine.Colspan = 2;
                //        HOUSEHOLDLine.FixedHeight = 15f;
                //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLDLine);

                //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        HOUSEHOLD_Space.Colspan = 2;
                //        HOUSEHOLD_Space.FixedHeight = 15f;
                //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLD_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DevpLine.Colspan = 2;
                //        DevpLine.FixedHeight = 15f;
                //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DevpLine);

                //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp_Space.Colspan = 2;
                //        Devp_Space.FixedHeight = 15f;
                //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnddesc.FixedHeight = 15f;
                //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnddesc);

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);


                //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Trans_Space.FixedHeight = 15f;
                //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans_Space);

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);


                //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        PickSpace.FixedHeight = 15f;
                //        PickSpace.Colspan = 3;
                //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(PickSpace);

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);


                //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        dropSpace.FixedHeight = 15f;
                //        dropSpace.Colspan = 3;
                //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(dropSpace);

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //}

                //}
                //document.Add(MediaclTable);
                #endregion
            }

            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance" || DEPState == "TX")
            {
                PdfPTable Declartion = new PdfPTable(2);
                Declartion.TotalWidth = 750f;
                Declartion.WidthPercentage = 100;
                Declartion.LockedWidth = true;
                float[] Declartion_widths = new float[] { 80f, 40f };
                Declartion.SetWidths(Declartion_widths);
                Declartion.HorizontalAlignment = Element.ALIGN_CENTER;
                Declartion.SpacingBefore = 20f;

                PdfPCell Declartion_DESC = new PdfPCell(new Phrase("The information provided is true and correct to the best of my knowledge and belief. I am aware that I am subject to prosecution for providing false or fraudulent information. I understand I may request a hearing to appeal a denial of eligibility, amount of assistancereceived, or a delay of service delivery.", Times));
                Declartion_DESC.Colspan = 2;
                Declartion_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                //SerVice_DESC.FixedHeight = 15f;
                Declartion_DESC.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(Declartion_DESC);

                PdfPCell App_Sign = new PdfPCell(new Phrase("Applicant Signature: ______________________________________", Times));
                App_Sign.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Sign);

                PdfPCell App_Date = new PdfPCell(new Phrase("Date: ______________________", Times));
                App_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Date);

                document.Add(Declartion);
            }

            #region Last Paragarph
            if (!string.IsNullOrEmpty(Attention.Trim()))
            {
                document.NewPage();

                PdfPTable CTAttn = new PdfPTable(2);
                CTAttn.TotalWidth = 750f;
                CTAttn.WidthPercentage = 100;
                CTAttn.LockedWidth = true;
                float[] CTAttn_widths = new float[] { 80f, 40f };
                CTAttn.SetWidths(CTAttn_widths);
                CTAttn.HorizontalAlignment = Element.ALIGN_CENTER;
                CTAttn.SpacingBefore = 20f;

                PdfPCell S1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                S1.Colspan = 2;
                S1.HorizontalAlignment = Element.ALIGN_CENTER;
                S1.FixedHeight = 15f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S1);

                PdfPCell S2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                S2.Colspan = 2;
                S2.HorizontalAlignment = Element.ALIGN_CENTER;
                S2.FixedHeight = 15f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S2);

                PdfPCell S3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.FixedHeight = 15f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S3);

                PdfPCell S4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                S4.HorizontalAlignment = Element.ALIGN_RIGHT;
                S4.FixedHeight = 15f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S4);

                PdfPCell S5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.FixedHeight = 15f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }
                else
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }

                PdfPCell P1 = new PdfPCell(new Phrase("", Times));
                P1.Colspan = 2;
                P1.FixedHeight = 20f;
                P1.HorizontalAlignment = Element.ALIGN_LEFT;
                P1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(P1);


                PdfPCell A1 = new PdfPCell(new Phrase(Attention.Trim(), Times));
                A1.Colspan = 2;
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(A1);

                document.Add(CTAttn);

            }

            #endregion

            if (ShortName == "UETHDA")
            {
                document.NewPage();
                PdfPTable Uethdadecl = new PdfPTable(2);
                Uethdadecl.TotalWidth = 750f;
                Uethdadecl.WidthPercentage = 100;
                Uethdadecl.LockedWidth = true;
                float[] Declartion_widths = new float[] { 100f, 50f };
                Uethdadecl.SetWidths(Declartion_widths);
                Uethdadecl.HorizontalAlignment = Element.ALIGN_CENTER;
                //Uethdadecl.SpacingBefore = 20f;

                PdfPCell E1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                E1.Colspan = 2;
                E1.HorizontalAlignment = Element.ALIGN_CENTER;
                E1.FixedHeight = 15f;
                E1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E1);

                PdfPCell E2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                E2.Colspan = 2;
                E2.HorizontalAlignment = Element.ALIGN_CENTER;
                E2.FixedHeight = 15f;
                E2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E2);

                PdfPCell E3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                //E3.Colspan = 2;
                E3.HorizontalAlignment = Element.ALIGN_LEFT;
                E3.FixedHeight = 13f;
                E3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E3);

                PdfPCell E4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                //E4.Colspan = 4;
                E4.HorizontalAlignment = Element.ALIGN_RIGHT;
                E4.FixedHeight = 13f;
                E4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E4);

                PdfPCell E5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                //E5.Colspan = 2;
                E5.HorizontalAlignment = Element.ALIGN_LEFT;
                E5.FixedHeight = 13f;
                E5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    //E6.Colspan = 4;
                    E6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    E6.FixedHeight = 13f;
                    E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(E6);
                }
                else
                {
                    PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    //E6.Colspan = 4;
                    E6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    E6.FixedHeight = 13f;
                    E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(E6);
                }

                PdfPCell S = new PdfPCell(new Phrase("", TableFont));
                S.HorizontalAlignment = Element.ALIGN_LEFT;
                S.Colspan = 2;
                S.FixedHeight = 15f;
                S.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S);

                PdfPCell A1 = new PdfPCell(new Phrase("Applicant was:     Approved ________      Denied________    (Over Income________       No Proof________       No Need________)", TableFont));
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Colspan = 2;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A1);

                PdfPCell A2 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
                A2.HorizontalAlignment = Element.ALIGN_LEFT;
                A2.Colspan = 2;
                A2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A2);

                PdfPCell S1 = new PdfPCell(new Phrase("", TableFont));
                S1.HorizontalAlignment = Element.ALIGN_LEFT;
                S1.Colspan = 2;
                S1.FixedHeight = 20f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S1);

                PdfPCell A3 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
                A3.HorizontalAlignment = Element.ALIGN_LEFT;
                A3.Colspan = 2;
                A3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A3);

                PdfPCell A4 = new PdfPCell(new Phrase("Certification Period:                        Service                                                                  Open                                  Close", TableFont));
                A4.HorizontalAlignment = Element.ALIGN_LEFT;
                A4.Colspan = 2;
                A4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A4);

                for (int i = 0; i < 3; i++)
                {
                    PdfPCell A5 = new PdfPCell(new Phrase("_____________________________________________________                   __/__/__                            __/__/__", TableFont));
                    A5.HorizontalAlignment = Element.ALIGN_LEFT;
                    A5.Colspan = 2;
                    A5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(A5);
                }

                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 2;
                S2.FixedHeight = 20f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S2);

                PdfPCell A6 = new PdfPCell(new Phrase(" CSBG Statement of Need:", TableFont));
                A6.HorizontalAlignment = Element.ALIGN_LEFT;
                A6.Colspan = 2;
                A6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A6);

                PdfPCell A7 = new PdfPCell(new Phrase("Why was client requesting Assistance?", TableFont));
                A7.HorizontalAlignment = Element.ALIGN_LEFT;
                A7.Colspan = 2;
                A7.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A7);

                for (int j = 0; j < 3; j++)
                {
                    PdfPCell A8 = new PdfPCell(new Phrase("________________________________________________________________________", TableFont));
                    A8.HorizontalAlignment = Element.ALIGN_LEFT;
                    A8.Colspan = 2;
                    A8.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(A8);
                }

                PdfPCell S3 = new PdfPCell(new Phrase("", TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.Colspan = 2;
                S3.FixedHeight = 20f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S3);

                PdfPCell A9 = new PdfPCell(new Phrase("I certify that all of the information provided by me is true and correct.  I authorize the verification of any and all information provided herein to determine my eligibility and acknowledge I have been informed of the appeal process.  I understand that I will be notified in writing of my eligibility status.  Identifying information provided by you for determination of your eligibility for CSBG and for the provision of services from the program will be considered confidential, unless otherwise authorized or required by law, will not be shared with any other persons or agencies except for the purposes directly related to the administration of the CSBG program.  I attest under penalty of perjury that all persons applying for or receiving aid are either a United States citizen or qualified alien as defined by 8 U.S.C. 1641(b), or eligible immigrants.  I swear under penalty of perjury (a crime for lying under oath) and all other applicable penalties that the statements made on this application, any attachments, and to whoever interviewed me are true and correct.  I understand that anyone who fraudulently covers up a material fact or who knowingly gives false information for the receipt of CSBG assistance is liable upon conviction of a fine of $10,000 or imprisonment for not more than five years or both.", TableFont));
                A9.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                A9.Colspan = 2;
                A9.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A9);

                PdfPCell S4 = new PdfPCell(new Phrase("", TableFont));
                S4.HorizontalAlignment = Element.ALIGN_LEFT;
                S4.Colspan = 2;
                S4.FixedHeight = 20f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S4);

                PdfPCell A10 = new PdfPCell(new Phrase("By signing, I agree that the information contained in my application may be shared with other agencies from which I seek additional services.  If I DO NOT want my information shared, Please initial here_______.", TableFont));
                A10.HorizontalAlignment = Element.ALIGN_LEFT;
                A10.Colspan = 2;
                A10.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A10);

                PdfPCell S5 = new PdfPCell(new Phrase("", TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.Colspan = 2;
                S5.FixedHeight = 30f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S5);

                PdfPCell A11 = new PdfPCell(new Phrase("Applicant Signature_________________________________                                 Date____________", TableFont));
                A11.HorizontalAlignment = Element.ALIGN_LEFT;
                A11.Colspan = 2;
                A11.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A11);

                PdfPCell S6 = new PdfPCell(new Phrase("", TableFont));
                S6.HorizontalAlignment = Element.ALIGN_LEFT;
                S6.Colspan = 2;
                S6.FixedHeight = 20f;
                S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S6);

                PdfPCell A12 = new PdfPCell(new Phrase("Case Worker/Intake Worker__________________________                                 Date____________", TableFont));
                A12.HorizontalAlignment = Element.ALIGN_LEFT;
                A12.Colspan = 2;
                A12.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A12);

                PdfPCell S7 = new PdfPCell(new Phrase("", TableFont));
                S7.HorizontalAlignment = Element.ALIGN_LEFT;
                S7.Colspan = 2;
                S7.FixedHeight = 15f;
                S7.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S7);

                PdfPCell A13 = new PdfPCell(new Phrase("No person on the basis of race, color, national origin, sex, age, disability, ancestry, status as a veteran, or any other characteristics protected by federal, state, or local will be excluded from participation in, or be denied benefits of, or be otherwise subjected to discrimination in the operation of CSBG.", TableFont));
                A13.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                A13.Colspan = 2;
                A13.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A13);

                document.Add(Uethdadecl);

            }

            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion

        private void On_Delete_PDF_File(object sender, FormClosedEventArgs e)
        {
            System.IO.File.Delete(PdfName);
        }

        private void SetLine()
        {
            cb.SetLineWidth(2f);
            cb.SetLineCap(5);
            cb.MoveTo(X_Pos, Y_Pos);
            cb.LineTo(780, Y_Pos);
            cb.Stroke();
        }

        DataTable dtIncome = new DataTable();
        private string Get_IncomeType_Desc(string Type_Code)
        {
            string Income_Desc = string.Empty;
            foreach (DataRow drIncome in dtIncome.Rows)
            {
                if (Type_Code == drIncome["Code"].ToString().Trim())
                {
                    Income_Desc = drIncome["LookUpDesc"].ToString().Trim(); break;
                }
            }

            return Income_Desc;
        }

        DataTable dtCaseSNP = new DataTable();
        private string Get_Member_Name(string Mem_Seq, string NameFormat)
        {
            string Member_NAme = string.Empty;
            foreach (DataRow drCaseSnp in dtCaseSNP.Rows)
            {
                if (Mem_Seq == drCaseSnp["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (NameFormat == "First")
                    {
                        Member_NAme = drCaseSnp["SNP_NAME_IX_FI"].ToString().Trim(); break;
                    }
                    else
                        Member_NAme = LookupDataAccess.GetMemberName(drCaseSnp["SNP_NAME_IX_FI"].ToString().Trim(), drCaseSnp["SNP_NAME_IX_MI"].ToString().Trim(), drCaseSnp["SNP_NAME_IX_LAST"].ToString().Trim(), strNameFormat) + "  "; break;
                }
            }

            return Member_NAme;
        }




        //int X_Pos, Y_Pos;
        //PdfContentByte cb;
        private void On_SaveForm_Closed_Pdf()
        {

            Random_Filename = null;
            PdfName = "Pdf File";
            PdfName = "SIMLTR_" + BaseForm.BaseApplicationNo;
            PdfName = propReportPath + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }


            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            //document.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.A4.Width, iTextSharp.text.PageSize.A4.Height));
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();




            BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, false);
            BaseFont bfTimesBold = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1250, false);
            iTextSharp.text.Font fc = new iTextSharp.text.Font(bfTimes, 12, 2);
            iTextSharp.text.Font fc1 = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.BLUE);
            iTextSharp.text.Font fcRed = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.RED);

            cb = writer.DirectContent;


            //PdfShading axial = PdfShading.SimpleAxial(writer, 36, 716, 396,788, BaseColor.ORANGE, BaseColor.BLUE);
            ////cb.PaintShading(axial);
            //PdfShadingPattern shading = new PdfShadingPattern(axial);
            //cb.SetShadingFill(shading);

            cb.BeginText();
            //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES_ROMAN).BaseFont, 12);
            cb.SetFontAndSize(bfTimes, 12);
            //cb.SetRGBColorFill(00, 00, 00);      //ss

            string Zip = BaseForm.BaseCaseMstListEntity[0].Zip;
            if (BaseForm.BaseCaseMstListEntity[0].Zipplus != "0")
                Zip = BaseForm.BaseCaseMstListEntity[0].Zip + "-" + BaseForm.BaseCaseMstListEntity[0].Zipplus;

            string State = string.Empty; string ShortName = string.Empty; string SerHie = "N";
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                State = ds.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim();
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);



            if (ShortName == "NEOCAA")
            {
                //iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
                ////iTextSharp.text.Image _Logo_Head = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Address.jpg"));
                //_Logo.ScalePercent(60f);
                ////_Logo_Head.ScalePercent(60f);

                //_Logo.SetAbsolutePosition(30f, 700f);
                ////_Logo_Head.SetAbsolutePosition(320f, 700f);
                //cb.AddImage(_Logo);
                ////cb.AddImage(_Logo_Head);

                if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                {
                    if (dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim() == "NEOCAA")
                    {
                        iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
                        _Logo.ScalePercent(60f);

                        _Logo.SetAbsolutePosition(30f, 700f);
                        cb.AddImage(_Logo);
                    }


                    MaskedTextBox mskPhn = new MaskedTextBox();
                    mskPhn.Mask = "000-000-0000";
                    MaskedTextBox mskFax = new MaskedTextBox();
                    mskFax.Mask = "000-000-0000";
                    string Ext = string.Empty; string Fax = string.Empty;
                    //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                    if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                    {
                        mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
                        if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
                            Ext = " Ext # " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
                        if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim()))
                            mskFax.Text = dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim();

                        //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                    }

                    cb.SetFontAndSize(bfTimesBold, 12);
                    cb.SetRGBColorFill(198, 6, 82);
                    //cb.SetColorFill(BaseColor.MAGENTA.Darker());
                    X_Pos = 450; Y_Pos = 750;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    cb.SetFontAndSize(bfTimes, 12);
                    cb.SetRGBColorFill(00, 00, 00);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_STREET"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_CITY"].ToString().Trim() + "," + dsAgency.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_ZIP1"].ToString().Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "PH: " + mskPhn.Text + "," + Ext + " " + " FAX " + mskFax.Text, X_Pos, Y_Pos, 0);
                    //Y_Pos -= 15;
                    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
                }


                //document.Add(_Logo);
                Y_Pos = 640;
                //cb.AddImage( 

            }

            else Y_Pos = 740;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, LookupDataAccess.GetLetterDate(DateTime.Now.ToString()), 40, Y_Pos, 0);

            string MSTCity = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].City.Trim()))
                MSTCity = BaseForm.BaseCaseMstListEntity[0].City.Trim() + ",";
            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseApplicationName, 40, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Suffix.Trim(), 40, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, MSTCity + " " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip, 40, Y_Pos, 0);
            string Name = string.Empty;
            foreach (CaseSnpEntity SnpEntity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq.Equals(SnpEntity.FamilySeq))
                {
                    Name = SnpEntity.NameixFi.Substring(0, 1).ToUpper() + SnpEntity.NameixFi.Substring(1, SnpEntity.NameixFi.Length - 1).ToLower();
                }
            }
            Y_Pos -= 30;
            if (!string.IsNullOrEmpty(Name))
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Dear " + Name + ",", 40, Y_Pos, 0);
            DataRow drAgy;// = new DataRow();


            string Agency = string.Empty; string Prog = string.Empty;
            DataSet dsAgy = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, "**", "**");
            if (dsAgy.Tables.Count > 0)
            {
                drAgy = dsAgy.Tables[0].Rows[0];
                Agency = drAgy["HIE_NAME"].ToString().Trim();
            }
            DataRow drProg;//= new DataRow();
            DataSet dsProg = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            if (dsProg.Tables.Count > 0)
            {
                drProg = dsProg.Tables[0].Rows[0];
                Prog = drProg["HIE_NAME"].ToString().Trim();
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drProg["HIE_NAME"].ToString(), 130, 625, 0);
            }
            if (!string.IsNullOrEmpty(Agency) && !string.IsNullOrEmpty(Prog))
            {
                Y_Pos -= 30;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, Agency + " was very pleased to meet you when you applied for " + Prog + ".", 40, Y_Pos, 0);
            }

            if (ShortName == "NEOCAA")
            {
                Y_Pos -= 45;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you shared shows that you, and your household, could potentially benefit from ", 40, Y_Pos, 0);
                Y_Pos -= 15;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "the following services:", 40, Y_Pos, 0);
            }
            else
            {
                Y_Pos -= 30;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you gave us shows that you could also be eligible for the following services", 40, Y_Pos, 0);
                Y_Pos -= 15;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "from this agency:", 40, Y_Pos, 0);
            }

            List<CaseSumEntity> casesumdetails = new List<CaseSumEntity>();
            casesumdetails = _model.CaseSumData.GetCaseSumDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            X_Pos = 40;
            if (ShortName == "NEOCAA")
                Y_Pos -= 25;
            else
                Y_Pos -= 25;
            if (casesumdetails.Count > 0)
            {
                foreach (CaseSumEntity Entity in casesumdetails)
                {
                    if (Entity.CaseSumNotInterested == "False")
                    {
                        DataRow drHie;//=new DataRow();
                        DataSet dsHie = DatabaseLayer.AgyTab.GetHierarchyNames(Entity.CaseSumRefHierachy.Substring(0, 2), Entity.CaseSumRefHierachy.Substring(2, 2), Entity.CaseSumRefHierachy.Substring(4, 2));

                        if (dsHie.Tables.Count > 0)
                        {
                            drHie = dsHie.Tables[0].Rows[0];
                            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drHie["HIE_NAME"].ToString(), X_Pos, Y_Pos, 0);
                            Y_Pos -= 15;
                            CheckBottomBorderReached(document, writer);
                        }
                    }

                }
            }
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("1", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];
            string Intake_Worker = null;
            if (dtVerifier.Rows.Count > 0)
            {
                foreach (DataRow drVerifier in dtVerifier.Rows)
                {
                    if (BaseForm.BaseCaseMstListEntity[0].IntakeWorker.Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                    {
                        Intake_Worker = drVerifier["NAME"].ToString().Trim();
                        break;
                    }
                }
            }
            X_Pos = 40; Y_Pos -= 10;
            CheckBottomBorderReached(document, writer);
            if (ShortName == "NEOCAA")
            {
                MaskedTextBox mskPhn = new MaskedTextBox();
                mskPhn.Mask = "(000)000-0000";
                string Ext = string.Empty;
                //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                {
                    mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
                        Ext = " Ext. " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
                    //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                }

                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "I hope that you will contact me to find out more about these services.  Please feel free to contact me at", X_Pos, Y_Pos, 0);

                if (!string.IsNullOrEmpty(Ext.Trim()))
                {
                    Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + Ext + ". I look forward to hearing from you and helping you learn more about how these ", X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "services might assist you and your family.", X_Pos, Y_Pos, 0);
                }
                else
                {
                    Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + ". I look forward to hearing from you and helping you learn more about how these services ", X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "might assist you and your family.", X_Pos, Y_Pos, 0);
                }

                //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "your family.", X_Pos, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more, we hope you will contact the following person: " + Intake_Worker + " to find", X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "out more about these services. Please call today so that we might visit with you about the services. We look", X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "forward to working with you now and in the future to provide you with services that might help you and", X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "your family.", X_Pos, Y_Pos, 0);
            }
            Y_Pos -= 30; CheckBottomBorderReached(document, writer);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Sincerely,", X_Pos, Y_Pos, 0);

            if (ShortName != "NEOCAA")
            {
                Y_Pos -= 90; CheckBottomBorderReached(document, writer);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
            }
            else
            {
                DepContactEntity caseDepContactEntity = new DepContactEntity();
                caseDepContactEntity.Agency = BaseForm.BaseAgency;
                caseDepContactEntity.Dept = BaseForm.BaseDept;
                caseDepContactEntity.Program = BaseForm.BaseProg;
                List<DepContactEntity> contactEntity = _model.HierarchyAndPrograms.GetCASEDEPContacts(caseDepContactEntity);

                Y_Pos -= 70; CheckBottomBorderReached(document, writer);
                if (contactEntity.Count > 0)
                {
                    contactEntity = contactEntity.OrderBy(u => Convert.ToInt32(u.SEQ)).ToList();

                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, contactEntity[0].FirstName.Trim() + " " + contactEntity[0].LastName.Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "", X_Pos, Y_Pos, 0);
                }
                else
                {
                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
                }
                //Y_Pos -= 70; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Debby Foreman", X_Pos, Y_Pos, 0);
                //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Northeast Oklahoma Community Action Agency", X_Pos, Y_Pos, 0);
            }

            cb.EndText();
            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }


        private void On_SaveForm_Closed_Pdf1()
        {

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "Simletter.pdf";

            PdfName = "Pdf File";
            PdfName = "SIMLTR_" + BaseForm.BaseApplicationNo;
            PdfName = propReportPath + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }


            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            //FileStream fs = new FileStream(PdfName, FileMode.Create);

            //Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            ////document.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.A4.Width, iTextSharp.text.PageSize.A4.Height));
            //PdfWriter writer = PdfWriter.GetInstance(document, fs);
            //document.Open();




            BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, false);
            BaseFont bfTimesBold = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1250, false);
            iTextSharp.text.Font fc = new iTextSharp.text.Font(bfTimes, 12, 2);
            iTextSharp.text.Font fc1 = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.BLUE);
            iTextSharp.text.Font fcRed = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.RED);

            //cb = writer.DirectContent;


            //PdfShading axial = PdfShading.SimpleAxial(writer, 36, 716, 396,788, BaseColor.ORANGE, BaseColor.BLUE);
            ////cb.PaintShading(axial);
            //PdfShadingPattern shading = new PdfShadingPattern(axial);
            //cb.SetShadingFill(shading);

            cb.BeginText();
            //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES_ROMAN).BaseFont, 12);
            cb.SetFontAndSize(bfTimes, 12);
            //cb.SetRGBColorFill(00, 00, 00);      //ss

            string Zip = BaseForm.BaseCaseMstListEntity[0].Zip;
            if (BaseForm.BaseCaseMstListEntity[0].Zipplus != "0")
                Zip = BaseForm.BaseCaseMstListEntity[0].Zip + "-" + BaseForm.BaseCaseMstListEntity[0].Zipplus;

            string State = string.Empty; string ShortName = string.Empty; string SerHie = "N";
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                State = ds.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim();
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);



            if (ShortName == "NEOCAA")
            {
                //iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
                ////iTextSharp.text.Image _Logo_Head = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Address.jpg"));
                //_Logo.ScalePercent(60f);
                ////_Logo_Head.ScalePercent(60f);

                //_Logo.SetAbsolutePosition(30f, 700f);
                ////_Logo_Head.SetAbsolutePosition(320f, 700f);
                //cb.AddImage(_Logo);
                ////cb.AddImage(_Logo_Head);

                if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                {
                    if (dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim() == "NEOCAA")
                    {
                        iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
                        _Logo.ScalePercent(60f);

                        _Logo.SetAbsolutePosition(30f, 700f);
                        cb.AddImage(_Logo);
                    }


                    MaskedTextBox mskPhn = new MaskedTextBox();
                    mskPhn.Mask = "000-000-0000";
                    MaskedTextBox mskFax = new MaskedTextBox();
                    mskFax.Mask = "000-000-0000";
                    string Ext = string.Empty; string Fax = string.Empty;
                    //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                    if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                    {
                        mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
                        if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
                            Ext = " Ext # " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
                        if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim()))
                            mskFax.Text = dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim();

                        //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                    }

                    cb.SetFontAndSize(bfTimesBold, 12);
                    cb.SetRGBColorFill(198, 6, 82);
                    //cb.SetColorFill(BaseColor.MAGENTA.Darker());
                    X_Pos = 450; Y_Pos = 750;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    cb.SetFontAndSize(bfTimes, 12);
                    cb.SetRGBColorFill(00, 00, 00);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_STREET"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_CITY"].ToString().Trim() + "," + dsAgency.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_ZIP1"].ToString().Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "PH: " + mskPhn.Text + "," + Ext + " " + " FAX " + mskFax.Text, X_Pos, Y_Pos, 0);
                    //Y_Pos -= 15;
                    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
                }


                //document.Add(_Logo);
                Y_Pos = 640;
                //cb.AddImage( 

            }

            else Y_Pos = 670;
            X_Pos = 90;

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, LookupDataAccess.GetLetterDate(DateTime.Now.ToString()), X_Pos, Y_Pos, 0);

            string MSTCity = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].City.Trim()))
                MSTCity = BaseForm.BaseCaseMstListEntity[0].City.Trim() + ",";
            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseApplicationName, X_Pos, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Suffix.Trim(), X_Pos, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, MSTCity + " " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip, X_Pos, Y_Pos, 0);
            string Name = string.Empty;
            foreach (CaseSnpEntity SnpEntity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq.Equals(SnpEntity.FamilySeq))
                {
                    //Name = SnpEntity.NameixFi.Substring(0, 1).ToUpper() + SnpEntity.NameixFi.Substring(1, SnpEntity.NameixFi.Length - 1).ToLower() ;
                    Name = SnpEntity.NameixFi.Substring(0, 1).ToUpper() + SnpEntity.NameixFi.Substring(1, SnpEntity.NameixFi.Length - 1).ToLower() + " "+
                        SnpEntity.NameixLast.Substring(0, 1).ToUpper() + SnpEntity.NameixLast.Substring(1, SnpEntity.NameixLast.Length - 1).ToLower();
                }
            }
            Y_Pos -= 30;
            if (!string.IsNullOrEmpty(Name))
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Dear " + Name + ",", X_Pos, Y_Pos, 0);
            DataRow drAgy;// = new DataRow();


            string Agency = string.Empty; string Prog = string.Empty;
            DataSet dsAgy = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, "**", "**");
            if (dsAgy.Tables.Count > 0)
            {
                drAgy = dsAgy.Tables[0].Rows[0];
                Agency = drAgy["HIE_NAME"].ToString().Trim();
            }
            DataRow drProg;//= new DataRow();
            DataSet dsProg = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            if (dsProg.Tables.Count > 0)
            {
                drProg = dsProg.Tables[0].Rows[0];
                Prog = drProg["HIE_NAME"].ToString().Trim();
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drProg["HIE_NAME"].ToString(), 130, 625, 0);
            }
            if (!string.IsNullOrEmpty(Agency) && !string.IsNullOrEmpty(Prog))
            {
                Y_Pos -= 30;
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, Agency + " was very pleased to meet you when you applied for " + Prog + ".", X_Pos, Y_Pos, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "We were very pleased you chose to visit one of our sites in search of assistance." , X_Pos, Y_Pos, 0);
            }

            if (ShortName == "NEOCAA")
            {
                Y_Pos -= 45;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you shared shows that you, and your household, could potentially benefit from ", X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "the following services:", X_Pos, Y_Pos, 0);
            }
            else
            {
                Y_Pos -= 30;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you provided, indicates that you may possibly be eligible for the following ", X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "additional services from this agency:", X_Pos, Y_Pos, 0);
            }

            List<CaseSumEntity> casesumdetails = new List<CaseSumEntity>();
            casesumdetails = _model.CaseSumData.GetCaseSumDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            //X_Pos = 40;
            if (ShortName == "NEOCAA")
                Y_Pos -= 25;
            else
                Y_Pos -= 25;
            if (casesumdetails.Count > 0)
            {
                foreach (CaseSumEntity Entity in casesumdetails)
                {
                    if (Entity.CaseSumNotInterested == "False")
                    {
                        DataRow drHie;//=new DataRow();
                        DataSet dsHie = DatabaseLayer.AgyTab.GetHierarchyNames(Entity.CaseSumRefHierachy.Substring(0, 2), Entity.CaseSumRefHierachy.Substring(2, 2), Entity.CaseSumRefHierachy.Substring(4, 2));

                        if (dsHie.Tables.Count > 0)
                        {
                            drHie = dsHie.Tables[0].Rows[0];
                            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drHie["HIE_NAME"].ToString(), X_Pos, Y_Pos, 0);
                            Y_Pos -= 15;
                            CheckBottomBorderReachedLetterHead(Hstamper);
                        }
                    }

                }
            }
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("1", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];
            string Intake_Worker = null;
            if (dtVerifier.Rows.Count > 0)
            {
                foreach (DataRow drVerifier in dtVerifier.Rows)
                {
                    if (BaseForm.BaseCaseMstListEntity[0].IntakeWorker.Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                    {
                        Intake_Worker = drVerifier["NAME"].ToString().Trim();
                        break;
                    }
                }
            }
            X_Pos = 90; Y_Pos -= 10;
            CheckBottomBorderReachedLetterHead(Hstamper);
            if (ShortName == "NEOCAA")
            {
                MaskedTextBox mskPhn = new MaskedTextBox();
                mskPhn.Mask = "(000)000-0000";
                string Ext = string.Empty;
                //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                {
                    mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
                        Ext = " Ext. " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
                    //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                }

                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "I hope that you will contact me to find out more about these services.  Please feel free to contact me at", X_Pos, Y_Pos, 0);

                if (!string.IsNullOrEmpty(Ext.Trim()))
                {
                    Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + Ext + ". I look forward to hearing from you and helping you learn more about how these ", X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "services might assist you and your family.", X_Pos, Y_Pos, 0);
                }
                else
                {
                    Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + ". I look forward to hearing from you and helping you learn more about how these services ", X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "might assist you and your family.", X_Pos, Y_Pos, 0);
                }

                //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "your family.", X_Pos, Y_Pos, 0);
            }
            else
            {
                //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more, we hope you will contact the following person: " + Intake_Worker , X_Pos, Y_Pos, 0);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more about the services listed above and the eligibility needed, we hope " , X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "you will contact the following person: " + Intake_Worker, X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "Please feel free to contact us at your earliest convenience so that we can talk with you about how we can ", X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "help you to meet your needs.", X_Pos, Y_Pos, 0);
                Y_Pos -= 25; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "We look forward to working with you now, and in the future to provide you with services that might help", X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "you and your family.", X_Pos, Y_Pos, 0);
            }
            Y_Pos -= 30; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Sincerely,", X_Pos, Y_Pos, 0);

            if (ShortName != "NEOCAA")
            {
                Y_Pos -= 90; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
            }
            else
            {
                DepContactEntity caseDepContactEntity = new DepContactEntity();
                caseDepContactEntity.Agency = BaseForm.BaseAgency;
                caseDepContactEntity.Dept = BaseForm.BaseDept;
                caseDepContactEntity.Program = BaseForm.BaseProg;
                List<DepContactEntity> contactEntity = _model.HierarchyAndPrograms.GetCASEDEPContacts(caseDepContactEntity);

                Y_Pos -= 70; CheckBottomBorderReachedLetterHead(Hstamper);
                if (contactEntity.Count > 0)
                {
                    contactEntity = contactEntity.OrderBy(u => Convert.ToInt32(u.SEQ)).ToList();

                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, contactEntity[0].FirstName.Trim() + " " + contactEntity[0].LastName.Trim(), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "", X_Pos, Y_Pos, 0);
                }
                else
                {
                    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
                }
                //Y_Pos -= 70; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Debby Foreman", X_Pos, Y_Pos, 0);
                //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Northeast Oklahoma Community Action Agency", X_Pos, Y_Pos, 0);
            }

            cb.EndText();
            //document.Close();
            //fs.Close();
            //fs.Dispose();
            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }


        private void On_SIM_LD_Letter()
        {

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "LDCAA_Letterhead.pdf";

            PdfName = "Pdf File";

            PdfName = "SIMLTR_" + BaseForm.BaseApplicationNo;
            PdfName = propReportPath + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }


            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            //FileStream fs = new FileStream(PdfName, FileMode.Create);

            //Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            ////document.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.A4.Width, iTextSharp.text.PageSize.A4.Height));
            //PdfWriter writer = PdfWriter.GetInstance(document, fs);
            //document.Open();




            BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, false);
            BaseFont bfTimesBold = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1250, false);
            iTextSharp.text.Font fc = new iTextSharp.text.Font(bfTimes, 12, 2);
            iTextSharp.text.Font fc1 = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.BLUE);
            iTextSharp.text.Font fcRed = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.RED);

            //cb = writer.DirectContent;


            //PdfShading axial = PdfShading.SimpleAxial(writer, 36, 716, 396,788, BaseColor.ORANGE, BaseColor.BLUE);
            ////cb.PaintShading(axial);
            //PdfShadingPattern shading = new PdfShadingPattern(axial);
            //cb.SetShadingFill(shading);

            cb.BeginText();
            //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES_ROMAN).BaseFont, 12);
            cb.SetFontAndSize(bfTimes, 12);
            //cb.SetRGBColorFill(00, 00, 00);      //ss

            string Zip = BaseForm.BaseCaseMstListEntity[0].Zip;
            if (BaseForm.BaseCaseMstListEntity[0].Zipplus != "0" && !string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                Zip = BaseForm.BaseCaseMstListEntity[0].Zip + "-" + BaseForm.BaseCaseMstListEntity[0].Zipplus;

            string State = string.Empty; string ShortName = string.Empty; string SerHie = "N";
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                State = ds.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim();
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);



            //if (ShortName == "NEOCAA")
            //{
            //    //iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
            //    ////iTextSharp.text.Image _Logo_Head = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Address.jpg"));
            //    //_Logo.ScalePercent(60f);
            //    ////_Logo_Head.ScalePercent(60f);

            //    //_Logo.SetAbsolutePosition(30f, 700f);
            //    ////_Logo_Head.SetAbsolutePosition(320f, 700f);
            //    //cb.AddImage(_Logo);
            //    ////cb.AddImage(_Logo_Head);

            //    if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            //    {
            //        if (dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim() == "NEOCAA")
            //        {
            //            iTextSharp.text.Image _Logo = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\images\\CAPOK_SIM_Image.jpg"));
            //            _Logo.ScalePercent(60f);

            //            _Logo.SetAbsolutePosition(30f, 700f);
            //            cb.AddImage(_Logo);
            //        }


            //        MaskedTextBox mskPhn = new MaskedTextBox();
            //        mskPhn.Mask = "000-000-0000";
            //        MaskedTextBox mskFax = new MaskedTextBox();
            //        mskFax.Mask = "000-000-0000";
            //        string Ext = string.Empty; string Fax = string.Empty;
            //        //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
            //        if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            //        {
            //            mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
            //            if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
            //                Ext = " Ext # " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
            //            if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim()))
            //                mskFax.Text = dsAgency.Tables[0].Rows[0]["ACR_FAX_NUMBER"].ToString().Trim();

            //            //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
            //        }

            //        cb.SetFontAndSize(bfTimesBold, 12);
            //        cb.SetRGBColorFill(198, 6, 82);
            //        //cb.SetColorFill(BaseColor.MAGENTA.Darker());
            //        X_Pos = 450; Y_Pos = 750;
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
            //        Y_Pos -= 15;
            //        cb.SetFontAndSize(bfTimes, 12);
            //        cb.SetRGBColorFill(00, 00, 00);
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_STREET"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_CITY"].ToString().Trim() + "," + dsAgency.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim() + " " + dsAgency.Tables[0].Rows[0]["ACR_ZIP1"].ToString().Trim(), X_Pos, Y_Pos, 0);
            //        Y_Pos -= 15;
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "PH: " + mskPhn.Text + "," + Ext + " " + " FAX " + mskFax.Text, X_Pos, Y_Pos, 0);
            //        //Y_Pos -= 15;
            //        //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, dsAgency.Tables[0].Rows[0]["ACR_NAME"].ToString().Trim(), X_Pos, Y_Pos, 0);
            //    }


            //    //document.Add(_Logo);
            //    Y_Pos = 640;
            //    //cb.AddImage( 

            //}

            Y_Pos = 640;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, LookupDataAccess.GetLetterDate(DateTime.Now.ToString()), 40, Y_Pos, 0);

            string MSTCity = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].City.Trim()))
                MSTCity = BaseForm.BaseCaseMstListEntity[0].City.Trim() + ",";
            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseApplicationName, 40, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Suffix.Trim(), 40, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, MSTCity + " " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip, 40, Y_Pos, 0);
            string Name = string.Empty;
            foreach (CaseSnpEntity SnpEntity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq.Equals(SnpEntity.FamilySeq))
                {
                    Name = SnpEntity.NameixFi.Substring(0, 1).ToUpper() + SnpEntity.NameixFi.Substring(1, SnpEntity.NameixFi.Length - 1).ToLower();
                }
            }
            Y_Pos -= 30;
            if (!string.IsNullOrEmpty(Name))
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Dear " + Name + ",", 40, Y_Pos, 0);
            DataRow drAgy;// = new DataRow();


            string Agency = string.Empty; string Prog = string.Empty;
            DataSet dsAgy = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, "**", "**");
            if (dsAgy.Tables.Count > 0)
            {
                drAgy = dsAgy.Tables[0].Rows[0];
                Agency = drAgy["HIE_NAME"].ToString().Trim();
            }
            DataRow drProg;//= new DataRow();
            DataSet dsProg = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            if (dsProg.Tables.Count > 0)
            {
                drProg = dsProg.Tables[0].Rows[0];
                Prog = drProg["HIE_NAME"].ToString().Trim();
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drProg["HIE_NAME"].ToString(), 130, 625, 0);
            }
            if (!string.IsNullOrEmpty(Agency) && !string.IsNullOrEmpty(Prog))
            {
                Y_Pos -= 30;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, Agency + " was very pleased to meet you when you applied for services. ", 40, Y_Pos, 0); //+ Prog + "."
            }

            //if (ShortName == "NEOCAA")
            //{
            //    Y_Pos -= 45;
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you shared shows that you, and your household, could potentially benefit from ", 40, Y_Pos, 0);
            //    Y_Pos -= 15;
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "the following services:", 40, Y_Pos, 0);
            //}
            //else
            //{
            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you provided indicated that you could also be eligible for the following ", 40, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "services from this agency:", 40, Y_Pos, 0);
            //}

            List<CaseSumEntity> casesumdetails = new List<CaseSumEntity>();
            casesumdetails = _model.CaseSumData.GetCaseSumDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            X_Pos = 40;
            if (ShortName == "NEOCAA")
                Y_Pos -= 25;
            else
                Y_Pos -= 25;
            if (casesumdetails.Count > 0)
            {
                foreach (CaseSumEntity Entity in casesumdetails)
                {
                    if (Entity.CaseSumNotInterested == "False")
                    {
                        DataRow drHie;//=new DataRow();
                        DataSet dsHie = DatabaseLayer.AgyTab.GetHierarchyNames(Entity.CaseSumRefHierachy.Substring(0, 2), Entity.CaseSumRefHierachy.Substring(2, 2), Entity.CaseSumRefHierachy.Substring(4, 2));

                        if (dsHie.Tables.Count > 0)
                        {
                            drHie = dsHie.Tables[0].Rows[0];
                            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drHie["HIE_NAME"].ToString(), X_Pos, Y_Pos, 0);
                            Y_Pos -= 15;
                            CheckBottomBorderReachedLetterHead(Hstamper);
                        }
                    }

                }
            }
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("1", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];
            string Intake_Worker = null;
            if (dtVerifier.Rows.Count > 0)
            {
                foreach (DataRow drVerifier in dtVerifier.Rows)
                {
                    if (BaseForm.BaseCaseMstListEntity[0].IntakeWorker.Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                    {
                        Intake_Worker = drVerifier["NAME"].ToString().Trim();
                        break;
                    }
                }
            }
            X_Pos = 40; Y_Pos -= 10;
            CheckBottomBorderReachedLetterHead(Hstamper);
            //if (ShortName == "NEOCAA")
            //{
            //    MaskedTextBox mskPhn = new MaskedTextBox();
            //    mskPhn.Mask = "(000)000-0000";
            //    string Ext = string.Empty;
            //    //DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
            //    if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            //    {
            //        mskPhn.Text = dsAgency.Tables[0].Rows[0]["ACR_MAIN_PHONE"].ToString().Trim();
            //        if (!string.IsNullOrEmpty(dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim()))
            //            Ext = " Ext. " + dsAgency.Tables[0].Rows[0]["ACR_MAIN_EXT"].ToString().Trim();
            //        //ShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
            //    }

            //    cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "I hope that you will contact me to find out more about these services.  Please feel free to contact me at", X_Pos, Y_Pos, 0);

            //    if (!string.IsNullOrEmpty(Ext.Trim()))
            //    {
            //        Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //        cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + Ext + ". I look forward to hearing from you and helping you learn more about how these ", X_Pos, Y_Pos, 0);
            //        Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //        cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "services might assist you and your family.", X_Pos, Y_Pos, 0);
            //    }
            //    else
            //    {
            //        Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //        cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, mskPhn.Text.Trim() + ". I look forward to hearing from you and helping you learn more about how these services ", X_Pos, Y_Pos, 0);
            //        Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //        cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "might assist you and your family.", X_Pos, Y_Pos, 0);
            //    }

            //    //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //    //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "your family.", X_Pos, Y_Pos, 0);
            //}
            //else
            //{
            //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more, we hope you will contact the following person: " + Intake_Worker + " to find", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more, we hope you will contact the service representative for the", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "out more about these services. Please call today so that we might visit with you about the services. We look", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "previously listed programs. The service representatives located on page two of this document will be", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "forward to working with you now and in the future to provide you with services that might help you and", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "able to provide more information regarding eligibility, applications and other various program ", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            //cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "your family.", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "information. Please call today so that we might visit with you about these services. We look forward to ", X_Pos, Y_Pos, 0);

            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "working with you now and in the future to provide you with services that might help you and your ", X_Pos, Y_Pos, 0);

            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "family. ", X_Pos, Y_Pos, 0);

            //}
            Y_Pos -= 30; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Sincerely,", X_Pos, Y_Pos, 0);

            //if (ShortName != "NEOCAA")
            //{
            //    Y_Pos -= 90; CheckBottomBorderReached(document, writer);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
            //}
            //else
            //{
            //    DepContactEntity caseDepContactEntity = new DepContactEntity();
            //    caseDepContactEntity.Agency = BaseForm.BaseAgency;
            //    caseDepContactEntity.Dept = BaseForm.BaseDept;
            //    caseDepContactEntity.Program = BaseForm.BaseProg;
            //    List<DepContactEntity> contactEntity = _model.HierarchyAndPrograms.GetCASEDEPContacts(caseDepContactEntity);

            //    Y_Pos -= 70; CheckBottomBorderReachedLetterHead(Hstamper);
            //if (contactEntity.Count > 0)
            //    {
            //        contactEntity = contactEntity.OrderBy(u => Convert.ToInt32(u.SEQ)).ToList();

            //        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, contactEntity[0].FirstName.Trim() + " " + contactEntity[0].LastName.Trim(), X_Pos, Y_Pos, 0);
            //        Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "", X_Pos, Y_Pos, 0);
            //    }
            //    else
            //    {
            //Rebecca Reynolds
            Y_Pos -= 70; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Rebecca Reynolds", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
            // }
            //Y_Pos -= 70; CheckBottomBorderReached(document, writer);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Debby Foreman", X_Pos, Y_Pos, 0);
            //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Northeast Oklahoma Community Action Agency", X_Pos, Y_Pos, 0);
            //}

            cb.EndText();
            //document.Close();
            //fs.Close();
            //fs.Dispose();
            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        private void On_SIM_CAPC_Letter()
        {

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "CAPC_SIM_Letter.pdf";

            PdfName = "Pdf File";
            PdfName = "SIMLTR_" + BaseForm.BaseApplicationNo;
            PdfName = propReportPath + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }


            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);




            BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, false);
            BaseFont bfTimesBold = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1250, false);
            iTextSharp.text.Font fc = new iTextSharp.text.Font(bfTimes, 12, 2);
            iTextSharp.text.Font fc1 = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.BLUE);
            iTextSharp.text.Font fcRed = new iTextSharp.text.Font(bfTimes, 12, 2, BaseColor.RED);

            

            //PdfShading axial = PdfShading.SimpleAxial(writer, 36, 716, 396,788, BaseColor.ORANGE, BaseColor.BLUE);
            ////cb.PaintShading(axial);
            //PdfShadingPattern shading = new PdfShadingPattern(axial);
            //cb.SetShadingFill(shading);

            cb.BeginText();
            //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES_ROMAN).BaseFont, 12);
            cb.SetFontAndSize(bfTimes, 12);
            //cb.SetRGBColorFill(00, 00, 00);      //ss

            string Zip = BaseForm.BaseCaseMstListEntity[0].Zip;
            if (BaseForm.BaseCaseMstListEntity[0].Zipplus != "0")
                Zip = BaseForm.BaseCaseMstListEntity[0].Zip + "-" + BaseForm.BaseCaseMstListEntity[0].Zipplus;

            string State = string.Empty; string ShortName = string.Empty; string SerHie = "N";
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                State = ds.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim();
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);



            Y_Pos = 650;
            X_Pos = 40;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, LookupDataAccess.GetLetterDate(DateTime.Now.ToString()), X_Pos, Y_Pos, 0);

            string MSTCity = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].City.Trim()))
                MSTCity = BaseForm.BaseCaseMstListEntity[0].City.Trim() + ",";
            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseApplicationName, X_Pos, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " " + BaseForm.BaseCaseMstListEntity[0].Suffix.Trim(), X_Pos, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, MSTCity + " " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip, X_Pos, Y_Pos, 0);
            string Name = string.Empty;
            foreach (CaseSnpEntity SnpEntity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq.Equals(SnpEntity.FamilySeq))
                {
                    Name = SnpEntity.NameixFi.Substring(0, 1).ToUpper() + SnpEntity.NameixFi.Substring(1, SnpEntity.NameixFi.Length - 1).ToLower();
                }
            }
            Y_Pos -= 30;
            if (!string.IsNullOrEmpty(Name))
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Dear " + Name + ",", X_Pos, Y_Pos, 0);
            DataRow drAgy;// = new DataRow();


            string Agency = string.Empty; string Prog = string.Empty;
            DataSet dsAgy = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, "**", "**");
            if (dsAgy.Tables.Count > 0)
            {
                drAgy = dsAgy.Tables[0].Rows[0];
                Agency = drAgy["HIE_NAME"].ToString().Trim();
            }
            DataRow drProg;//= new DataRow();
            DataSet dsProg = DatabaseLayer.AgyTab.GetHierarchyNames(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            if (dsProg.Tables.Count > 0)
            {
                drProg = dsProg.Tables[0].Rows[0];
                Prog = drProg["HIE_NAME"].ToString().Trim();
                //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drProg["HIE_NAME"].ToString(), 130, 625, 0);
            }
            if (!string.IsNullOrEmpty(Agency) && !string.IsNullOrEmpty(Prog))
            {
                Y_Pos -= 30;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, Agency + " was very pleased to meet you when you applied for " + Prog + ".", X_Pos, Y_Pos, 0);
            }


            Y_Pos -= 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Our review of the information you gave us shows that you could also be eligible for the following services", X_Pos, Y_Pos, 0);
            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "from this agency:", X_Pos, Y_Pos, 0);

            List<CaseSumEntity> casesumdetails = new List<CaseSumEntity>();
            casesumdetails = _model.CaseSumData.GetCaseSumDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            //X_Pos = 40;

            Y_Pos -= 25;
            if (casesumdetails.Count > 0)
            {
                foreach (CaseSumEntity Entity in casesumdetails)
                {
                    if (Entity.CaseSumNotInterested == "False")
                    {
                        DataRow drHie;//=new DataRow();
                        DataSet dsHie = DatabaseLayer.AgyTab.GetHierarchyNames(Entity.CaseSumRefHierachy.Substring(0, 2), Entity.CaseSumRefHierachy.Substring(2, 2), Entity.CaseSumRefHierachy.Substring(4, 2));

                        if (dsHie.Tables.Count > 0)
                        {
                            drHie = dsHie.Tables[0].Rows[0];
                            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, drHie["HIE_NAME"].ToString(), X_Pos, Y_Pos, 0);
                            Y_Pos -= 15;
                            CheckBottomBorderReachedLetterHead(Hstamper);
                        }
                    }

                }
            }
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("1", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];
            string Intake_Worker = null;
            if (dtVerifier.Rows.Count > 0)
            {
                foreach (DataRow drVerifier in dtVerifier.Rows)
                {
                    if (BaseForm.BaseCaseMstListEntity[0].IntakeWorker.Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                    {
                        Intake_Worker = drVerifier["NAME"].ToString().Trim();
                        break;
                    }
                }
            }
            X_Pos = 40; Y_Pos -= 10;
            CheckBottomBorderReachedLetterHead(Hstamper);

            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "If you are interested in learning more and would like to be contacted regarding the above services, please sign", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "and date this referral letter.  We look forward to working with you now and in the future to provide you with", X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "the services that might help you and your family.", X_Pos, Y_Pos, 0);

            Y_Pos -= 35; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "I hereby give permission and authorize Community Action Planning Council of Jefferson County to release my" , X_Pos, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(Element.ALIGN_JUSTIFIED, "demographic information from our database regarding the referrals stated above.", X_Pos, Y_Pos, 0);

            Y_Pos -= 40; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "__________________________________________", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "______________", X_Pos+330, Y_Pos, 0);
            Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Signature", X_Pos, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Date", X_Pos + 330, Y_Pos, 0);

            Y_Pos -= 45; CheckBottomBorderReachedLetterHead(Hstamper);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Sincerely,", X_Pos, Y_Pos, 0);


            DepContactEntity caseDepContactEntity = new DepContactEntity();
            caseDepContactEntity.Agency = BaseForm.BaseAgency;
            caseDepContactEntity.Dept = BaseForm.BaseDept;
            caseDepContactEntity.Program = BaseForm.BaseProg;
            List<DepContactEntity> contactEntity = _model.HierarchyAndPrograms.GetCASEDEPContacts(caseDepContactEntity);

            Y_Pos -= 70; CheckBottomBorderReachedLetterHead(Hstamper);
            if (contactEntity.Count > 0)
            {
                contactEntity = contactEntity.OrderBy(u => Convert.ToInt32(u.SEQ)).ToList();

                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, contactEntity[0].FirstName.Trim() + " " + contactEntity[0].LastName.Trim(), X_Pos, Y_Pos, 0);
                Y_Pos -= 15; CheckBottomBorderReachedLetterHead(Hstamper);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "", X_Pos, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Executive Director", X_Pos, Y_Pos, 0);
            }
            //Y_Pos -= 70; CheckBottomBorderReached(document, writer);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Debby Foreman", X_Pos, Y_Pos, 0);
            //Y_Pos -= 15; CheckBottomBorderReached(document, writer);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Northeast Oklahoma Community Action Agency", X_Pos, Y_Pos, 0);


            cb.EndText();
            //document.Close();
            //fs.Close();
            //fs.Dispose();
            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }




        int pageNumber = 1;
        private void CheckBottomBorderReached(Document document, PdfWriter writer)
        {
            if (Y_Pos <= 20)
            {
                cb.EndText();
                //cb.BeginText();
                //Y_Pos = 07;
                //X_Pos = 20;
                //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES).BaseFont, 12);
                //cb.SetCMYKColorFill(0, 0, 0, 255);
                ////PrintRec(DateTime.Now.ToLocalTime().ToString(), 130);
                //Y_Pos = 07;
                //X_Pos = 550;
                //PrintRec("Page:", 28);
                //PrintRec(pageNumber.ToString(), 15);
                //cb.EndText();

                document.NewPage();
                pageNumber = writer.PageNumber - 1;

                //cb.BeginText();

                //X_Pos = 50;
                //Y_Pos -= 5;

                //cb.EndText();

                Y_Pos = 770;
                X_Pos = 40;                                                           //modified

                cb.BeginText();

            }
        }

        private void CheckBottomBorderReachedLetterHead(PdfStamper Hstamper)
        {
            if (Y_Pos <= 20)
            {
                cb.EndText();
                //cb.BeginText();
                //Y_Pos = 07;
                //X_Pos = 20;
                //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES).BaseFont, 12);
                //cb.SetCMYKColorFill(0, 0, 0, 255);
                ////PrintRec(DateTime.Now.ToLocalTime().ToString(), 130);
                //Y_Pos = 07;
                //X_Pos = 550;
                //PrintRec("Page:", 28);
                //PrintRec(pageNumber.ToString(), 15);
                //cb.EndText();
                Document document = new Document(PageSize.A4, 25, 25, 30, 30);
                ////document.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.A4.Width, iTextSharp.text.PageSize.A4.Height));

                document.NewPage();
                //pageNumber = Hstamper.PageNumber - 1;

                //cb.BeginText();

                //X_Pos = 50;
                //Y_Pos -= 5;

                //cb.EndText();

                Y_Pos = 770;
                X_Pos = 90;                                                           //modified

                cb.BeginText();

            }
        }

        #region HeadStart App
        private void On_HSS_SaveFormClosed()
        {
            Random_Filename = null;

            PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }
            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document();
            document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //BaseFont bf_times_Check = BaseFont.CreateFont("c:/windows/fonts/WINGDNG2.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //iTextSharp.text.Font Times_Check = new iTextSharp.text.Font(bf_times_Check, 10);

            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
            cb = writer.DirectContent;

            string Attention = string.Empty, Roma_Switch = string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();
                Roma_Switch = ds.Tables[0].Rows[0]["ACR_ROMA_SWITCH"].ToString().Trim();
            }

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            //Casesite Table
            List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
            CaseSiteEntity Search_Site = new CaseSiteEntity(true);
            Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
            Search_Site.SiteROOM = "0000";
            SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");


            //Getting CaseWorker
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];

            //CaseIncome Table
            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];
            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

            DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCasediff = dsCaseDiff.Tables[0];

            //Services Table
            List<CaseMSTSER> MSTSER_List = new List<CaseMSTSER>();
            CaseMSTSER Search_MSTSER = new CaseMSTSER(true);
            Search_MSTSER.Agency = BaseForm.BaseAgency; Search_MSTSER.Dept = BaseForm.BaseDept; Search_MSTSER.Program = BaseForm.BaseProg;
            Search_MSTSER.Year = BaseForm.BaseYear; Search_MSTSER.AppNo = BaseForm.BaseApplicationNo;
            MSTSER_List = _model.CaseMstData.Browse_MSTSER(Search_MSTSER, "Browse");
            //DataSet dsMSTSER = DatabaseLayer.CaseMst.Browse_MSTSER(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            //DataTable dtMSTSER = dsMSTSER.Tables[0];

            //AddCust Table
            List<AddCustEntity> ADDCUST_List = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            ADDCUST_List = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");
            //DataSet dsAddCust = DatabaseLayer.CaseSum.Browse_AddCust(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            //DataTable dtAddCust = dsAddCust.Tables[0];

            //CUSTFLDS Table for custom Questions
            List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
            CustfldsEntity Search_CustQues = new CustfldsEntity(true);
            custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

            //CaseHie Table
            DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
            DataTable dtCaseHie = dsCaseHie.Tables[0];

            //CHLDMST Table
            ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //CHLDEMER TABLE
            List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);


            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            //DataTable dtrelation = Relations.Tables[0];
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }

            List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

            cb.BeginText();
            X_Pos = 400; Y_Pos = 580;
            cb.SetFontAndSize(bf_helv, 13);
            //cb.SetColorFill(BaseColor.BLUE.Darker());
            string Header_Desc = string.Empty; string Form_Selection = string.Empty;

            //if (Privileges.ModuleCode == "03")
            //{
            string ShortName = string.Empty;
            string AgencyName = string.Empty; string SerHie = "N";
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ShortName = AGYShortName; //ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }

            if (dtCaseHie.Rows.Count > 0)
            {
                foreach (DataRow drCasehie in dtCaseHie.Rows)
                {
                    if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
                    {
                        AgencyName = drCasehie["HIE_NAME"].ToString().Trim(); break;
                    }
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " - EARLY CARE & EDUCATION APPLICATION", X_Pos, Y_Pos - 25, 0);
                Header_Desc = ShortName + " - EARLY CARE & EDUCATION APPLICATION";

                Form_Selection = AgencyName;//"Head Start Application";

                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);
            }
            cb.SetFontAndSize(bf_helv, 9);
          
            X_Pos = 30; Y_Pos -= 50;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 700, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToString("g"), Timesline), 780, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 720, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("____________", Times), 780, Y_Pos, 0);


            Y_Pos -= 13;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a citizen or naturalized Alien?", X_Pos, Y_Pos, 0);
            else
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommdation or special help to complete this application?", X_Pos, Y_Pos, 0);

            //cb.EndText();
            /************************************CheckBoxes****************************/
            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            RadioCheckField checkbox;
            PdfFormField SField;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
            {
                rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "Yes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 200, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(220, Y_Pos + 8, 228, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "No", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 230, Y_Pos, 0);

                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If no, are you a qualified Alien??", 320, Y_Pos, 0);

                rect = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 460, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(480, Y_Pos + 8, 488, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 490, Y_Pos, 0);
            }
            else
            {
                rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);
            }
            //cb.BeginText();
            X_Pos = 30; Y_Pos -= 13;
           
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            string Zip = string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() ;
            if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
            string Comma=string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()) && (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()) || !string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim())))
                Comma=", ";

            string Address = HN + Street + Suffix +Comma+ Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);

            string Language = null;
            DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
            DataTable dtLang = dsLang.Tables[0];
            foreach (DataRow drLang in dtLang.Rows)
            {
                if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
                {
                    Language = drLang["LookUpDesc"].ToString().Trim(); break;
                }
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 400, Y_Pos, 0);//380 changed on 05/22/2017
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 470, Y_Pos, 0);//450 changed on 05/22/2017
            //cb.EndText();
            if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
            {
                DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
                DataRow drSITE = dsSITE.Tables[0].Rows[0];
                string Site_Name = null;
                //cb.BeginText();
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                Site_Name = drSITE["SiteName"].ToString().Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
                //cb.EndText();
            }
            else
            {
                //cb.BeginText();
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                //cb.EndText();
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 2);
                cb.LineTo(705, Y_Pos - 2);
                cb.Stroke();
            }
            Y_Pos -= 13; //cb.BeginText();
            
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            string House_NO = null, Street1 = null, city = null, state = null, zip = null, DApt = null; string DSuffix = string.Empty;
            if (dtCasediff.Rows.Count > 0)
            {
                foreach (DataRow drCaseDiff in dtCasediff.Rows)
                {
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
                        House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_APT"].ToString().Trim()))
                        DApt = drCaseDiff["DIFF_APT"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
                        DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
                        Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
                        city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
                        state = drCaseDiff["DIFF_STATE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
                        zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
                    if (zip == "00000") zip = ""; else zip = ", " + zip;
                }
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1 +DApt+ city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            }
            else
            {
                if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                    Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                    Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                    Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                    Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                    HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

                Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            }

            if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email :", Times), 400, Y_Pos, 0);//380 changed on 05/22/2017
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 430, Y_Pos, 0);//410 changed on 05/22/2017
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 400, Y_Pos, 0);//380 changed on 05/22/2017
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(430, Y_Pos);//410 changed on 05/22/2017
                cb.LineTo(520, Y_Pos);
                cb.Stroke();
            }
            //cb.EndText();


            //cb.BeginText();
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone : ", 640, Y_Pos, 0);
            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();  //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);
           
            Y_Pos -= 13;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Message Number", 400, Y_Pos, 0);//380 changed on 05/22/2017
            if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 470, Y_Pos, 0);//450 changed on 05/22/2017
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(470, Y_Pos);//450 changed on 05/22/2017
                cb.LineTo(505, Y_Pos);
                cb.Stroke();
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Phone : ", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
                //cb.EndText();
            }
            else
            {
                //cb.EndText();
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }

            
            Y_Pos -= 13; //cb.BeginText();
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Funding Source", X_Pos, Y_Pos, 0);
            DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "H");
            DataTable dtFUND = dsFUND.Tables[0];
            PdfFormField Field;
            X_Pos = 140;
            string CheckTitle = string.Empty;
            foreach (DataRow drFUND in dtFUND.Rows)
            {
                if (drFUND["Active"].ToString() == "Y" ||
                    (drFUND["Active"].ToString() == "N" && chldMstDetails != null))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drFUND["LookUpDesc"].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (chldMstDetails != null)
                    {
                        if (chldMstDetails.FundSource.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            checkbox.Checked = true;
                    }
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFUND["LookUpDesc"].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 13; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Class Prefer", X_Pos, Y_Pos, 0);

            //X_Pos = 140;
            //string[] Checkboxes = { "AM", "PM", "FULL", "EXT", "Repeater", "Birth Cert", "Next Yrs Prep" };
            //for (int Z = 0; Z < Checkboxes.Length; ++Z)
            //{
            //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
            //    checkbox = new RadioCheckField(writer, rect, "Z" + Checkboxes[Z], "On");
            //    checkbox.BorderColor = new GrayColor(0.3f);
            //    checkbox.Rotation = 90;
            //    if (chldMstDetails != null)
            //    {
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "A" && Checkboxes[Z].StartsWith("A"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "P" && Checkboxes[Z].StartsWith("P"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "F" && Checkboxes[Z].StartsWith("F"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "E" && Checkboxes[Z].StartsWith("E"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ChldReat.ToString().Trim() == "Y" && Checkboxes[Z].StartsWith("R"))
            //            checkbox.Checked = true;
            //        if ((chldMstDetails.BirthCert.ToString().Trim() == "Y" || chldMstDetails.BirthCert.ToString().Trim() == "1") && Checkboxes[Z].StartsWith("B"))
            //            checkbox.Checked = true;
            //        if ((chldMstDetails.NextYearPrep.ToString().Trim() == "Y" || chldMstDetails.NextYearPrep.ToString().Trim() == "1") && Checkboxes[Z].StartsWith("N"))
            //            checkbox.Checked = true;
            //    }
            //    Field = checkbox.CheckField;
            //    writer.AddAnnotation(Field);
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Checkboxes[Z].ToString(), Times), X_Pos + 10, Y_Pos, 0);
            //    X_Pos += 70;
            //    if (X_Pos > 600)
            //    {
            //        X_Pos = 30;
            //        Y_Pos -= 13;
            //    }
            //}
            //X_Pos = 30;
            rect = new iTextSharp.text.Rectangle(140, Y_Pos + 8, 148, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "AM", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "A")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("AM", Times), 150, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "PM", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "P")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("PM", Times), 200, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(240, Y_Pos + 8, 248, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "FULL", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "F")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("FULL", Times), 250, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(290, Y_Pos + 8, 298, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "EXT", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "E")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EXT", Times), 300, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(340, Y_Pos + 8, 348, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "RP1", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ChldReat.ToString().Trim() == "Y")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Repeater", Times), 350, Y_Pos, 0);


            rect = new iTextSharp.text.Rectangle(400, Y_Pos + 8, 408, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "BI1", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.BirthCert.ToString().Trim() == "Y")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Cert", Times), 410, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(470, Y_Pos + 8, 480, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "NYP1", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.NextYearPrep.ToString().Trim() == "Y")
                    checkbox.Checked = true;
            }
            Field = checkbox.CheckField;
            writer.AddAnnotation(Field);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Next Yrs Prep", Times), 485, Y_Pos, 0);

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Place", Times), 540, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Birth Place", 530, Y_Pos, 0);
            if (chldMstDetails != null)
            {
                if (!string.IsNullOrEmpty(chldMstDetails.Pob.Trim()))
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(chldMstDetails.Pob.Trim(), Timesline), 590, Y_Pos, 0);
                else
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("______________", Times), 590, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("______________", Times), 590, Y_Pos, 0);
            Y_Pos -= 8; cb.EndText();
            SetLine();
            cb.BeginText();
            Y_Pos -= 20;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Housing Situation", X_Pos, Y_Pos, 0);
            DataSet dsHouseMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            string strMainData = dsHouseMain.Tables[0].Rows[0]["Agy_9"].ToString();
            string CodeColSubscript = string.Empty, DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();


            //DataSet dsHousing = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.HOUSINGTYPES);
            DataSet dsHousing = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.HOUSINGTYPES);
            DataTable dtHousing = dsHousing.Tables[0];
            //PdfFormField Field;
            X_Pos = 140;
            //string CheckTitle = string.Empty;
            foreach (DataRow drHousing in dtHousing.Rows)
            {
                if (drHousing["AGY_ACTIVE"].ToString() == "Y" ||
                    (drHousing["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_HOUSING"].ToString().Trim()) && drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, "H"+ drHousing[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHousing[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 25; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Family Type", X_Pos, Y_Pos, 0);
            X_Pos = 140;

            DataSet dsFamilyMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            strMainData = dsFamilyMain.Tables[0].Rows[0]["Agy_9"].ToString();
            CodeColSubscript = string.Empty; DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();

            //DataSet dsFamilyType = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.FAMILYTYPE);
            DataSet dsFamilyType = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.FAMILYTYPE);
            DataTable dtFamilyType = dsFamilyType.Tables[0];
            foreach (DataRow drFamilyType in dtFamilyType.Rows)
            {
                if (drFamilyType["AGY_ACTIVE"].ToString() == "Y" ||
                    (drFamilyType["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_FAMILY_TYPE"].ToString().Trim()) && drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    //checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType["LookUpDesc"].ToString().Trim(), "On");
                    checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFamilyType[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        Y_Pos -= 13;
                        X_Pos = 140;
                    }

                }
            }

            Y_Pos -= 25; X_Pos = 30;
            int Count = dtCaseSNP.Rows.Count;
            int Adults = 0, Child = 0, under5 = 0;
            foreach (DataRow drsnp in dtCaseSNP.Rows)
            {
                if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
                {
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
                        Adults++;
                    else
                        Child++;
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
                        under5++;
                }
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 123, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Adults: ", 210, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Adults.ToString(), Timesline), 260, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children: ", 310, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Child.ToString(), Timesline), 370, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children under 5: ", 420, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(under5.ToString(), Timesline), 508, Y_Pos, 0);
            cb.EndText();

            //Temp table not displayed on the screen
            PdfPTable head = new PdfPTable(1);
            head.HorizontalAlignment = Element.ALIGN_CENTER;
            head.TotalWidth = 50f;
            PdfPCell headcell = new PdfPCell(new Phrase(""));
            headcell.HorizontalAlignment = Element.ALIGN_CENTER;
            headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            head.AddCell(headcell);

            #region To Print SNP Details in the Table

            PdfPTable Snp_Table = new PdfPTable(13);
            Snp_Table.TotalWidth = 750f;
            Snp_Table.WidthPercentage = 100;
            Snp_Table.LockedWidth = true;
            float[] widths = new float[] { 65f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 25f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
            Snp_Table.SetWidths(widths);
            Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
            Snp_Table.SpacingBefore = 310f;

            PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
            Header.Colspan = 13;
            Header.FixedHeight = 15f;
            Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Header.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(Header);

            PdfPCell row2 = new PdfPCell(new Phrase(""));
            row2.Colspan = 9;
            row2.FixedHeight = 15f;
            row2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2);

            PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
            row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Health.FixedHeight = 15f;
            row2_Health.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Health);

            PdfPCell row2_Space = new PdfPCell(new Phrase(""));
            row2_Space.Colspan = 3;
            row2_Space.FixedHeight = 15f;
            row2_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Space);

            //PdfPCell row3 = new PdfPCell(new Phrase(""));
            //row3.Colspan = 3;
            //row3.FixedHeight = 15f;
            //row3.Border = iTextSharp.text.Rectangle.BOX;
            //Snp_Table.AddCell(row3);

            PdfPCell row3 = new PdfPCell(new Phrase(""));
            row3.Colspan = 2;
            row3.FixedHeight = 15f;
            row3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3);

            PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
            row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_SSN.FixedHeight = 15f;
            row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_SSN);

            PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
            row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Birth.FixedHeight = 15f;
            row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Birth);

            PdfPCell row3_Space = new PdfPCell(new Phrase(""));
            //row3_Space.Colspan = 2;
            row3_Space.FixedHeight = 15f;
            row3_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space);

            PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
            row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Sex.FixedHeight = 15f;
            row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Sex);

            PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
            row3_Space2.Colspan = 3;
            row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space2.FixedHeight = 15f;
            row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space2);

            PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
            row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Insurance.FixedHeight = 15f;
            row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Insurance);

            PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
            row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Veteran.FixedHeight = 15f;
            row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Veteran);

            PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("Receive FS", TableFontBoldItalic));
            row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Receive_FS.FixedHeight = 15f;
            row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Receive_FS);

            PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space3.FixedHeight = 15f;
            row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space3);

            string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yyyy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
            for (int i = 0; i < col.Length; ++i)
            {
                PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                cell.FixedHeight = 15f;
                if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                else cell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(cell);
            }

            int Tbl_Count = 0; string FamSeq = string.Empty;
            List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
            foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
                {
                    FamSeq = entity.FamilySeq.Trim();
                    string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
                    {
                        if (entity.Ssno.Trim().Length < 9)
                            entity.Ssno = SetLeadingZeros(entity.Ssno.Trim());

                        //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
                        SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(entity.AltBdate))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (entity.Age.Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (entity.MilitaryStatus.Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(entity.MilitaryStatus.Trim().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }


                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);
                }
            }

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {
                if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "F";
                            else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "F";
                                else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "P";
                                break;
                            }
                        }
                    }


                    string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
                    {
                        if (drCaseSNP["SNP_SSNO"].ToString().Trim().Length < 9)
                            drCaseSNP["SNP_SSNO"] = SetLeadingZeros(drCaseSNP["SNP_SSNO"].ToString().Trim());

                        SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
                    FoodStamps.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps.FixedHeight = 15f;
                    FoodStamps.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);

                    Tbl_Count++;
                    if (Tbl_Count >= 10)
                        break;
                }
            }
            int Len_Var = 130 - Tbl_Count * 13;
            for (int j = 0; j <= Len_Var; ++j)  //120
            {
                PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
                SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
                SpaceCell.FixedHeight = 15f;
                SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(SpaceCell);
            }

            document.Add(head);
            document.Add(Snp_Table);
            document.NewPage();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            #endregion End Of SNP details Table


            #region Income Table

            iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
            //start the Income details of a Family to the table
            PdfPTable IncomeTable = new PdfPTable(5);
            IncomeTable.TotalWidth = 750f;
            IncomeTable.WidthPercentage = 100;
            IncomeTable.LockedWidth = true;
            float[] Incomewidths = new float[] { 80f, 50f, 40f, 90f, 80f };
            IncomeTable.SetWidths(Incomewidths);
            IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeTable.SpacingBefore = 60f;

            PdfPCell IncomeCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            IncomeCell.Colspan = 5;
            IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell.FixedHeight = 15f;
            IncomeCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell);

            PdfPCell IncomeCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            IncomeCell1.Colspan = 5;
            IncomeCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell1.FixedHeight = 15f;
            IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell1);

            PdfPCell IncomeCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            IncomeCell0.Colspan = 2;
            IncomeCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell0.FixedHeight = 15f;
            IncomeCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell0);

            PdfPCell IncomeCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            IncomeCell2.Colspan = 3;
            IncomeCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            IncomeCell2.FixedHeight = 15f;
            IncomeCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell2);

            PdfPCell IncomeCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            IncomeCell3.Colspan = 3;
            IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell3.FixedHeight = 15f;
            IncomeCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            else
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }

            PdfPCell IncomeHeader = new PdfPCell(new Phrase("Financial Information - As reported by Applicant", TblFontBold));
            IncomeHeader.Colspan = 5;
            IncomeHeader.FixedHeight = 15f;
            IncomeHeader.BackgroundColor = BaseColor.LIGHT_GRAY;
            IncomeHeader.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeHeader);
            string[] Incomecol = { "Household Member", "Amount", "Interval", "Income Sources", "How Verified?" };
            for (int p = 0; p < Incomecol.Length; ++p)
            {
                PdfPCell Incomecell = new PdfPCell(new Phrase(Incomecol[p], TableFontBoldItalic));
                Incomecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Incomecell.FixedHeight = 15f;
                Incomecell.Border = iTextSharp.text.Rectangle.BOX;
                IncomeTable.AddCell(Incomecell);
            }

            if (dsIncome.Tables.Count > 0)
                dtIncome = dsIncome.Tables[0];

             decimal Row_Prog_Income = 0;  string interval = null, MemName = null, Income_Verifier = null;
            string IncomeDesc = null, privSeq = null ;
            if (dtCaseIncome.Rows.Count > 0)
            {
                DataView dv = dtCaseIncome.DefaultView;
                dv.RowFilter = "INCOME_EXCLUDE='N'";
                dv.Sort = "INCOME_FAMILY_SEQ ASC";
                dtCaseIncome = dv.ToTable();
                foreach (DataRow drCaseIncome in dtCaseIncome.Rows)
                {
                    Income_Verifier = interval = IncomeDesc = string.Empty;
                    if (drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim() != privSeq)
                    {
                        if (!string.IsNullOrEmpty(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim()))
                            MemName = Get_Member_Name(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim(), string.Empty);
                        PdfPCell House_HoldMem = new PdfPCell(new Phrase(MemName, TableFont));
                        House_HoldMem.Colspan = 5;
                        House_HoldMem.HorizontalAlignment = Element.ALIGN_LEFT;
                        House_HoldMem.FixedHeight = 15f;
                        House_HoldMem.Border = iTextSharp.text.Rectangle.BOX;
                        IncomeTable.AddCell(House_HoldMem);
                        privSeq = drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim();
                    }
                    PdfPCell Income_Space = new PdfPCell(new Phrase("", TableFont));
                    Income_Space.Colspan = 1;
                    Income_Space.HorizontalAlignment = Element.ALIGN_CENTER;
                    Income_Space.FixedHeight = 15f;
                    Income_Space.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Income_Space);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim()))
                        Row_Prog_Income = decimal.Parse(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim());
                    PdfPCell Amount = new PdfPCell(new Phrase(Row_Prog_Income.ToString(), TableFont));
                    Amount.HorizontalAlignment = Element.ALIGN_CENTER;
                    Amount.FixedHeight = 15f;
                    Amount.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Amount);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_INTERVAL"].ToString().Trim()))
                        interval = LookupDataAccess.ShowIncomeInterval(drCaseIncome["INCOME_INTERVAL"].ToString().Trim());
                    PdfPCell Freq = new PdfPCell(new Phrase(interval, TableFont));
                    Freq.HorizontalAlignment = Element.ALIGN_LEFT;
                    Freq.FixedHeight = 15f;
                    Freq.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Freq);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_TYPE"].ToString().Trim()))
                        IncomeDesc = Get_IncomeType_Desc(drCaseIncome["INCOME_TYPE"].ToString().Trim());
                    PdfPCell IncomeSource = new PdfPCell(new Phrase(IncomeDesc, TableFont));
                    IncomeSource.HorizontalAlignment = Element.ALIGN_CENTER;
                    IncomeSource.FixedHeight = 15f;
                    IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeSource);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim()))
                        Income_Verifier = drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim();
                    PdfPCell IncomeVer = new PdfPCell(new Phrase(Income_Verifier, TableFont));
                    IncomeVer.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeVer.FixedHeight = 15f;
                    IncomeVer.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeVer);

                }
            }

            PdfPTable TotIncomeTable = new PdfPTable(8);
            TotIncomeTable.TotalWidth = 750f;
            TotIncomeTable.WidthPercentage = 100;
            TotIncomeTable.LockedWidth = true;
            float[] TotIncomeTablewidths = new float[] { 50f, 30f, 50f, 40f, 60f, 30f, 50f, 30f };
            TotIncomeTable.SetWidths(TotIncomeTablewidths);
            TotIncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //IncomeTable.SpacingBefore = 60f;

            PdfPCell Total_Space = new PdfPCell(new Phrase("", TableFont));
            Total_Space.Colspan = 8;
            Total_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            Total_Space.FixedHeight = 15f;
            Total_Space.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Space);

            PdfPCell Total = new PdfPCell(new Phrase("Total Income", TableFont));
            Total.HorizontalAlignment = Element.ALIGN_LEFT;
            Total.FixedHeight = 15f;
            Total.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total);

            PdfPCell Total_Income = new PdfPCell(new Phrase(drCaseMST["MST_FAM_INCOME"].ToString().Trim(), TableFont));
            Total_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Total_Income.FixedHeight = 15f;
            Total_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Income);

            PdfPCell Program = new PdfPCell(new Phrase("Program Income", TableFont));
            Program.HorizontalAlignment = Element.ALIGN_LEFT;
            Program.FixedHeight = 15f;
            Program.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program);

            PdfPCell Program_Income = new PdfPCell(new Phrase(drCaseMST["MST_PROG_INCOME"].ToString().Trim(), TableFont));
            Program_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Program_Income.FixedHeight = 15f;
            Program_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program_Income);

            PdfPCell Federal = new PdfPCell(new Phrase("% of Federal Poverty Level", TableFont));
            Federal.HorizontalAlignment = Element.ALIGN_LEFT;
            Federal.FixedHeight = 15f;
            Federal.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal);

            PdfPCell Federal_Poverty = new PdfPCell(new Phrase(drCaseMST["MST_POVERTY"].ToString().Trim() + "%", TableFont));
            Federal_Poverty.HorizontalAlignment = Element.ALIGN_CENTER;
            Federal_Poverty.FixedHeight = 15f;
            Federal_Poverty.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal_Poverty);

            PdfPCell HUD = new PdfPCell(new Phrase("HUD%", TableFont));
            HUD.HorizontalAlignment = Element.ALIGN_LEFT;
            HUD.FixedHeight = 15f;
            HUD.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD);

            PdfPCell HUD_Value = new PdfPCell(new Phrase(drCaseMST["MST_HUD"].ToString().Trim() + "%", TableFont));
            HUD_Value.HorizontalAlignment = Element.ALIGN_CENTER;
            HUD_Value.FixedHeight = 15f;
            HUD_Value.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD_Value);

            document.Add(IncomeTable);
            document.Add(TotIncomeTable);


            #endregion



            #region Income Verification

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            if ((Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance") || DEPState != "TX")
            {
                PdfPTable Income_Last = new PdfPTable(15);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
                Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
                Income_Verified.FixedHeight = 15f;
                Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Income_Verified);

                if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
                {
                    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
                    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2Cheked);
                    //PdfPCell W2Cheked = new PdfPCell(new Phrase("R", Times_Check));
                    //W2Cheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    //W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2Cheked);
                }
                else
                {
                    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
                    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2UnCheked);

                    //PdfPCell W2UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    //W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2UnCheked);
                }

                PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
                W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
                W2Text.FixedHeight = 15f;
                W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(W2Text);

                if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
                {
                    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
                    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_Check);
                    //PdfPCell CHECK_STUB_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //CHECK_STUB_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_Check.FixedHeight = 15f;
                    //CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_Check);
                }
                else
                {
                    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
                    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_UnCheked);
                    //PdfPCell CHECK_STUB_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_UnCheked.FixedHeight = 15f;
                    //CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_UnCheked);
                }

                PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
                CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
                CHECK_STUB.FixedHeight = 15f;
                CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(CHECK_STUB);

                if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
                {
                    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
                    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_Check);
                    //PdfPCell LETTER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //LETTER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_Check.FixedHeight = 15f;
                    //LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_Check);
                }
                else
                {
                    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
                    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_UnCheked);
                    //PdfPCell LETTER_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_UnCheked.FixedHeight = 15f;
                    //LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_UnCheked);
                }

                PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
                LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
                LETTER.FixedHeight = 15f;
                LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(LETTER);

                if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
                {
                    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
                    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_Check);
                    //PdfPCell TAX_RETURN_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //TAX_RETURN_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_Check.FixedHeight = 15f;
                    //TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_Check);
                }
                else
                {
                    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
                    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_UnCheked);
                    //PdfPCell TAX_RETURN_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_UnCheked.FixedHeight = 15f;
                    //TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_UnCheked);
                }

                PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
                TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
                TAX_RETURN.FixedHeight = 15f;
                TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(TAX_RETURN);

                if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
                {
                    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
                    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_Check);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }
                else
                {
                    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
                    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_UnCheked);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("Q", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }

                PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
                OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
                OTHER.FixedHeight = 15f;
                OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(OTHER);

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }


                if (ShortName != "UETHDA")
                {
                    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    V_Space.Colspan = 15;
                    V_Space.FixedHeight = 15f;
                    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(V_Space);

                    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver.Colspan = 11;
                    P_Ver.FixedHeight = 15f;
                    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver);

                    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver1.Colspan = 2;
                    P_Ver1.FixedHeight = 15f;
                    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver1);

                    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Ver_Date_Space.FixedHeight = 15f;
                    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(Ver_Date_Space);

                    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //P_Ver2.Colspan = 4;
                    P_Ver2.FixedHeight = 15f;
                    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver2);

                    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Ver_Space.FixedHeight = 15f;
                    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Ver_Space);
                }
                document.Add(Income_Last);
            }
            else
            {
                PdfPTable Income_Last = new PdfPTable(5);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 25f, 20f, 13f, 30f, 100f };//80f, 50f, 40f, 90f, 80f 
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }

                PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                V_Space.FixedHeight = 15f;
                V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(V_Space);

                //if (ShortName != "UETHDA")
                //{
                //    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                //    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    V_Space.Colspan = 15;
                //    V_Space.FixedHeight = 15f;
                //    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(V_Space);

                //    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                //    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver.Colspan = 11;
                //    P_Ver.FixedHeight = 15f;
                //    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver);

                //    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                //    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver1.Colspan = 2;
                //    P_Ver1.FixedHeight = 15f;
                //    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver1);

                //    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                //    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //Ver_Date_Space.FixedHeight = 15f;
                //    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    //Income_Last.AddCell(Ver_Date_Space);

                //    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                //    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //P_Ver2.Colspan = 4;
                //    P_Ver2.FixedHeight = 15f;
                //    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver2);

                //    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                //    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Ver_Space.FixedHeight = 15f;
                //    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(Ver_Space);
                //}

                document.Add(Income_Last);
            }

            #endregion

            #region Comment Code Incomelast
            //PdfPTable Income_Last = new PdfPTable(15);
            //Income_Last.TotalWidth = 750f;
            //Income_Last.WidthPercentage = 100;
            //Income_Last.LockedWidth = true;
            //float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
            //Income_Last.SetWidths(Income_Lastwidths);
            //Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
            //Income_Last.SpacingBefore = 20f;


            //iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            //iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            //_image_UnChecked.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);


            //PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
            //Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
            //Income_Verified.FixedHeight = 15f;
            //Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Income_Verified);

            //if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
            //{
            //    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
            //    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2Cheked);
            //}
            //else
            //{
            //    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
            //    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2UnCheked);
            //}

            //PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
            //W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
            //W2Text.FixedHeight = 15f;
            //W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(W2Text);

            //if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
            //{
            //    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
            //    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_Check);
            //}
            //else
            //{
            //    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
            //    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_UnCheked);
            //}

            //PdfPCell CHECK_STUB = new PdfPCell(new Phrase("Check Stub", Times));
            //CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
            //CHECK_STUB.FixedHeight = 15f;
            //CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(CHECK_STUB);

            //if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
            //    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_Check);
            //}
            //else
            //{
            //    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
            //    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_UnCheked);
            //}

            //PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
            //LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
            //LETTER.FixedHeight = 15f;
            //LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(LETTER);

            //if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
            //{
            //    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
            //    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_Check);
            //}
            //else
            //{
            //    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
            //    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_UnCheked);
            //}

            //PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
            //TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
            //TAX_RETURN.FixedHeight = 15f;
            //TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(TAX_RETURN);

            //if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
            //    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_Check);
            //}
            //else
            //{
            //    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
            //    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_UnCheked);
            //}

            //PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
            //OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
            //OTHER.FixedHeight = 15f;
            //OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(OTHER);

            //PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
            //Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verification_Date.FixedHeight = 15f;
            //Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verification_Date);

            //if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
            //{
            //    PdfPCell Verify_Date = new PdfPCell(new Phrase(drCaseMST["MST_ELIG_DATE"].ToString().Trim(), Timesline));
            //    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date.FixedHeight = 15f;
            //    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date);
            //}
            //else
            //{
            //    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
            //    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date_Space.FixedHeight = 15f;
            //    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date_Space);
            //}

            //PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
            //Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verifier_Head.FixedHeight = 15f;
            //Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verifier_Head);

            //string CaseWorker = null;
            //if (dtVerifier.Rows.Count > 0)
            //{
            //    foreach (DataRow drVerifier in dtVerifier.Rows)
            //    {
            //        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
            //        {
            //            CaseWorker = drVerifier["NAME"].ToString().Trim();
            //            break;
            //        }
            //    }
            //}

            //if (!string.IsNullOrEmpty(CaseWorker))
            //{
            //    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
            //    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier.FixedHeight = 15f;
            //    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier);
            //}
            //else
            //{
            //    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier_Space.FixedHeight = 15f;
            //    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier_Space);
            //}


            //PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
            //V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //V_Space.Colspan = 15;
            //V_Space.FixedHeight = 15f;
            //V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(V_Space);

            //PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
            //P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
            //P_Ver.Colspan = 11;
            //P_Ver.FixedHeight = 15f;
            //P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver);

            //PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
            //P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
            //P_Ver1.Colspan = 2;
            //P_Ver1.FixedHeight = 15f;
            //P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver1);

            ////PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
            ////Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            ////Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            ////Ver_Date_Space.FixedHeight = 15f;
            ////Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            ////Income_Last.AddCell(Ver_Date_Space);

            //PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
            //P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
            ////P_Ver2.Colspan = 4;
            //P_Ver2.FixedHeight = 15f;
            //P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver2);

            //PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //Ver_Space.FixedHeight = 15f;
            //Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Ver_Space);

            //document.Add(Income_Last);

            #endregion


            #region Start of Energy Calculations
            PdfPTable Energy = new PdfPTable(3);
            Energy.TotalWidth = 750f;
            Energy.WidthPercentage = 100;
            Energy.LockedWidth = true;
            float[] Energy_widths = new float[] { 60, 60f, 60f };
            Energy.SetWidths(Energy_widths);
            Energy.HorizontalAlignment = Element.ALIGN_CENTER;
            Energy.SpacingBefore = 20f;

            if (Privileges.ModuleCode == "05" || DEPState == "TX")
            {
                PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
                Compute.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute.FixedHeight = 15f;
                Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute);

                PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
                Compute_Space.Colspan = 2;
                Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute_Space.FixedHeight = 15f;
                Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute_Space);

                PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: 0.00", Times));
                Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
                Utility_Costs.FixedHeight = 15f;
                Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Utility_Costs);

                PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
                Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
                Annual_Income.FixedHeight = 15f;
                Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Annual_Income);

                PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: 0.00", Times));
                Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
                Energy_Burden.FixedHeight = 15f;
                Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Energy_Burden);
            }

            #endregion

            #region  Start of the Services table for a applicant

            PdfPTable Services = new PdfPTable(2);
            Services.TotalWidth = 750f;
            Services.WidthPercentage = 100;
            Services.LockedWidth = true;
            float[] Services_widths = new float[] { 40f, 120f };
            Services.SetWidths(Services_widths);
            Services.HorizontalAlignment = Element.ALIGN_CENTER;
            Services.SpacingBefore = 20f;

            PdfPCell Services_Requested = new PdfPCell(new Phrase("Services Requested", TblFontBold));
            Services_Requested.Colspan = 2;
            Services_Requested.HorizontalAlignment = Element.ALIGN_LEFT;
            Services_Requested.FixedHeight = 15f;
            Services_Requested.BackgroundColor = BaseColor.LIGHT_GRAY;
            Services_Requested.Border = iTextSharp.text.Rectangle.BOX;
            Services.AddCell(Services_Requested);

            if (MSTSER_List.Count > 0)
            {
                foreach (CaseMSTSER Entity in MSTSER_List)
                {
                    PdfPCell SerVice_Code = new PdfPCell(new Phrase(Entity.Service.Trim(), Times));
                    SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_Code.FixedHeight = 15f;
                    SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_Code);
                    string Ser_Desc = null;
                    if (SerHie == "Y")
                    {
                        foreach (DataRow drCaseHie in dtCaseHie.Rows)
                        {
                            if (Entity.Service.Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && Entity.Service.Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && Entity.Service.Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
                            {
                                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (CAMASTList.Count > 0)
                        {
                            foreach (CAMASTEntity serEntity in CAMASTList)
                            {
                                if (serEntity.Code.Trim() == Entity.Service.Trim())
                                { Ser_Desc = serEntity.Desc.Trim(); break; }
                            }
                        }
                    }
                    PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
                    SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_DESC.FixedHeight = 15f;
                    SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_DESC);
                }
            }

            #endregion

            if (Privileges.ModuleCode == "05")
                document.Add(Energy);
            document.Add(Services);
            document.NewPage();

            #region Start the Custom Question table for an applicant

            PdfPTable Questions = new PdfPTable(3);
            Questions.TotalWidth = 750f;
            Questions.WidthPercentage = 100;
            Questions.LockedWidth = true;
            float[] Questions_widths = new float[] { 100f, 40f, 60f };
            Questions.SetWidths(Questions_widths);
            Questions.HorizontalAlignment = Element.ALIGN_CENTER;
            Questions.SpacingBefore = 30f;
            Questions.HeaderRows = 6;

            PdfPCell QueCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            QueCell.Colspan = 3;
            QueCell.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell.FixedHeight = 15f;
            QueCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell);

            PdfPCell QueCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            QueCell1.Colspan = 3;
            QueCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell1.FixedHeight = 15f;
            QueCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell1);

            PdfPCell QueCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            //QueCell0.Colspan = 2;
            QueCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell0.FixedHeight = 15f;
            QueCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell0);

            PdfPCell QueCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            QueCell2.Colspan = 2;
            QueCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            QueCell2.FixedHeight = 15f;
            QueCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell2);

            PdfPCell QueCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            //QueCell3.Colspan = 3;
            QueCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell3.FixedHeight = 15f;
            QueCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }
            else
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }

            PdfPCell Add_Ques_Header = new PdfPCell(new Phrase("Additional Intake Questions and Answers", TblFontBold));
            Add_Ques_Header.Colspan = 3;
            Add_Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Add_Ques_Header.FixedHeight = 15f;
            //Add_Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Add_Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Add_Ques_Header);

            PdfPCell Ques_Header = new PdfPCell(new Phrase("Question Description", TblFontBold));
            ////Ques_Header.Colspan = 3;
            Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Header.FixedHeight = 15f;
            Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Header);

            PdfPCell Ques_Member = new PdfPCell(new Phrase("Member", TblFontBold));
            Ques_Member.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Member.FixedHeight = 15f;
            Ques_Member.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Member.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Member);

            PdfPCell Ques_Response = new PdfPCell(new Phrase("Response", TblFontBold));
            Ques_Response.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Response.FixedHeight = 15f;
            Ques_Response.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Response.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Response);
            List<CustRespEntity> CustResp_List;
            if (ADDCUST_List.Count > 0)
            {
                foreach (AddCustEntity Entity in ADDCUST_List)
                {
                    string CustQues_Code = Entity.ACTCODE.Trim();
                    string CustQues_Desc = null;
                    string CustQues_Type = null;
                    string CustQuesResponse_Desc = null;
                    string Member_Desc = null;
                    if (custQues_List.Count > 0)
                    {
                        foreach (CustfldsEntity CustQues in custQues_List)
                        {
                            if (CustQues_Code.Trim() == CustQues.CustCode.Trim())
                            {
                                CustQues_Desc = CustQues.CustDesc.Trim();
                                CustQues_Type = CustQues.RespType.Trim();
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(CustQues_Type))
                        {
                            PdfPCell Ques_DESC = new PdfPCell(new Phrase(CustQues_Desc, TableFont));
                            Ques_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_DESC.FixedHeight = 15f;
                            Ques_DESC.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_DESC);

                            if (CustQues_Type.Trim() == "N")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim().Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else if (CustQues_Type.Trim() == "T")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Member";
                                }
                            }
                            else if ((CustQues_Type.Trim() == "A" || CustQues_Type.Trim() == "X"))
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else
                            {
                                CustRespEntity Search_Entity = new CustRespEntity(true);
                                Search_Entity.ResoCode = CustQues_Code.Trim();
                                Search_Entity.ScrCode = "CASE2001";
                                //Search_Entity.RecType = Search_Entity.RespSeq = null;
                                //Search_Entity.RespDesc = Search_Entity.DescCode = Search_Entity.AddDate = Search_Entity.AddOpr = null;
                                //Search_Entity.ChgDate = Search_Entity.ChgOpr = Search_Entity.Changed = null;
                                CustResp_List = _model.FieldControls.Browse_CUSTRESP(Search_Entity, "Browse");
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim().Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Member";
                                }
                            }

                            PdfPCell Ques_Mem_Name = new PdfPCell(new Phrase(Member_Desc, TableFont));
                            Ques_Mem_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_Mem_Name.FixedHeight = 15f;
                            Ques_Mem_Name.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_Mem_Name);

                            PdfPCell Resp_Desc = new PdfPCell(new Phrase(CustQuesResponse_Desc, TableFont));
                            Resp_Desc.HorizontalAlignment = Element.ALIGN_LEFT;
                            Resp_Desc.FixedHeight = 15f;
                            Resp_Desc.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Resp_Desc);

                        }
                    }
                }
            }
            #endregion End of custom Questions Table


            document.Add(Questions);

            document.NewPage();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            #region Employment

            PdfPTable EmploymentDet = new PdfPTable(6);
            EmploymentDet.TotalWidth = 750f;
            EmploymentDet.WidthPercentage = 100;
            EmploymentDet.LockedWidth = true;
            float[] EmploymentDet_widths = new float[] { 20f, 40f, 1f, 8f, 1f, 10f };
            EmploymentDet.SetWidths(EmploymentDet_widths);
            EmploymentDet.HorizontalAlignment = Element.ALIGN_CENTER;
            EmploymentDet.SpacingBefore = 30f;

            PdfPTable Emergency = new PdfPTable(4);
            Emergency.TotalWidth = 750f;
            Emergency.WidthPercentage = 100;
            Emergency.LockedWidth = true;
            float[] Emergency_widths = new float[] { 55f, 50f, 40f, 50f };
            Emergency.SetWidths(Emergency_widths);
            Emergency.HorizontalAlignment = Element.ALIGN_CENTER;
            Emergency.SpacingBefore = 10f;

            PdfPCell EmpCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            EmpCell.Colspan = 6;
            EmpCell.HorizontalAlignment = Element.ALIGN_CENTER;
            EmpCell.FixedHeight = 15f;
            EmpCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell);

            PdfPCell EmpCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            EmpCell1.Colspan = 6;
            EmpCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            EmpCell1.FixedHeight = 15f;
            EmpCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell1);

            PdfPCell EmpCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            EmpCell0.Colspan = 2;
            EmpCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            EmpCell0.FixedHeight = 13f;
            EmpCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell0);

            PdfPCell EmpCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            EmpCell2.Colspan = 4;
            EmpCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            EmpCell2.FixedHeight = 13f;
            EmpCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell2);

            PdfPCell EmpCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            EmpCell3.Colspan = 2;
            EmpCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            EmpCell3.FixedHeight = 13f;
            EmpCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                EmpCell4.Colspan = 4;
                EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell4.FixedHeight = 13f;
                EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell4);
            }
            else
            {
                PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                EmpCell4.Colspan = 4;
                EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell4.FixedHeight = 13f;
                EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell4);
            }

            //if (Privileges.ModuleCode == "02" || Privileges.ModuleCode == "03")
            //{
            PdfPCell Computer = new PdfPCell(new Phrase("EMPLOYMENT INFORMATION", TblFontBold));
            Computer.HorizontalAlignment = Element.ALIGN_LEFT;
            Computer.Colspan = 2;
            Computer.FixedHeight = 15f;
            Computer.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Computer);

            PdfPCell Applicant = new PdfPCell(new Phrase("Applicant Name/ID", Times));
            Applicant.Colspan = 2;
            Applicant.HorizontalAlignment = Element.ALIGN_LEFT;
            Applicant.FixedHeight = 15f;
            Applicant.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Applicant);

            PdfPCell ApplicationName = new PdfPCell(new Phrase(BaseForm.BaseApplicationName, Timesline));
            ApplicationName.HorizontalAlignment = Element.ALIGN_LEFT;
            ApplicationName.Colspan = 2;
            ApplicationName.FixedHeight = 15f;
            ApplicationName.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(ApplicationName);

            PdfPCell Mother = new PdfPCell(new Phrase("Mother/Gurdian Employer Name", Times));
            Mother.HorizontalAlignment = Element.ALIGN_LEFT;
            Mother.FixedHeight = 15f;
            Mother.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Mother);

            if (!string.IsNullOrEmpty(MotherName.Trim()))
            {
                PdfPCell Mother_Line = new PdfPCell(new Phrase(MotherName, Timesline));
                Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother_Line.FixedHeight = 15f;
                Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother_Line);
            }
            else
            {
                PdfPCell Mother_Line = new PdfPCell(new Phrase("________________________________________", Times));
                Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother_Line.FixedHeight = 15f;
                Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother_Line);
            }

            if (M_FullPart == "F")
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);

            }
            else
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell FullTime = new PdfPCell(new Phrase("Full Time", Times));
            FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
            FullTime.FixedHeight = 15f;
            FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FullTime);

            if (M_FullPart == "P")
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell PartTime = new PdfPCell(new Phrase("Part Time", Times));
            PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
            PartTime.FixedHeight = 15f;
            PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(PartTime);


            PdfPCell MWork_Add = new PdfPCell(new Phrase("Work Address", Times));
            MWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
            //MWork_Add.Colspan = 2;
            MWork_Add.FixedHeight = 15f;
            MWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(MWork_Add);

            if (!string.IsNullOrEmpty(M_Address.Trim()))
            {
                PdfPCell MWork_Line = new PdfPCell(new Phrase(M_Address, Timesline));
                MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                MWork_Line.FixedHeight = 15f;
                MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Line);
            }
            else
            {
                PdfPCell MWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                MWork_Line.FixedHeight = 15f;
                MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Line);
            }

            PdfPCell MWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
            MWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
            MWork_Phone.Colspan = 2;
            MWork_Phone.FixedHeight = 15f;
            MWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(MWork_Phone);

            if (!string.IsNullOrEmpty(M_Phone.Trim()))
            {
                MaskedTextBox mskphn = new MaskedTextBox();
                mskphn.Mask = "(999)000-0000";
                mskphn.Text = M_Phone.Trim();

                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            else
            {
                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            PdfPCell Father = new PdfPCell(new Phrase("Father/Gurdian Employer Name", Times));
            Father.HorizontalAlignment = Element.ALIGN_LEFT;
            Father.FixedHeight = 15f;
            Father.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Father);

            if (!string.IsNullOrEmpty(FatherName.Trim()))
            {
                PdfPCell Father_Line = new PdfPCell(new Phrase(FatherName, Timesline));
                Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Father_Line.FixedHeight = 15f;
                Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father_Line);
            }
            else
            {
                PdfPCell Father_Line = new PdfPCell(new Phrase("________________________________________", Times));
                Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Father_Line.FixedHeight = 15f;
                Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father_Line);
            }

            if (F_FullPart == "F")
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);

                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell F_FullTime = new PdfPCell(new Phrase("Full Time", Times));
            F_FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
            F_FullTime.FixedHeight = 15f;
            F_FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(F_FullTime);

            if (F_FullPart == "P")
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell F_PartTime = new PdfPCell(new Phrase("Part Time", Times));
            F_PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
            F_PartTime.FixedHeight = 15f;
            F_PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(F_PartTime);


            PdfPCell FWork_Add = new PdfPCell(new Phrase("Work Address", Times));
            FWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
            //MWork_Add.Colspan = 2;
            FWork_Add.FixedHeight = 15f;
            FWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FWork_Add);

            if (!string.IsNullOrEmpty(F_Address.Trim()))
            {
                PdfPCell FWork_Line = new PdfPCell(new Phrase(F_Address, Timesline));
                FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                FWork_Line.FixedHeight = 15f;
                FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Line);
            }
            else
            {
                PdfPCell FWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                FWork_Line.FixedHeight = 15f;
                FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Line);
            }

            PdfPCell FWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
            FWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
            FWork_Phone.Colspan = 2;
            FWork_Phone.FixedHeight = 15f;
            FWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FWork_Phone);

            if (!string.IsNullOrEmpty(F_Phone.Trim()))
            {
                MaskedTextBox mskphn = new MaskedTextBox();
                mskphn.Mask = "(999)000-0000";
                mskphn.Text = F_Phone.Trim();

                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            else
            {
                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }



            PdfPCell Line = new PdfPCell(new Phrase("", Times));
            Line.HorizontalAlignment = Element.ALIGN_CENTER;
            Line.Colspan = 6;
            //Line.FixedHeight = 15f;
            Line.BorderWidthBottom = 2f;
            Line.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
            EmploymentDet.AddCell(Line);

            #endregion

            #region Emergency/Medical Data

            PdfPCell Emer_Head = new PdfPCell(new Phrase("Emergency/Medical Data", TblFontBold));
            Emer_Head.Colspan = 4;
            Emer_Head.HorizontalAlignment = Element.ALIGN_LEFT;
            Emer_Head.FixedHeight = 15f;
            Emer_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Emergency.AddCell(Emer_Head);

            if (chldEmemDetails.Count > 0)
            {
                int Em_Count = 0;

                PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Name.FixedHeight = 15f;
                Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Name);

                PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Relation.FixedHeight = 15f;
                Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Relation);

                PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Addr.FixedHeight = 15f;
                Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Addr);

                PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Phone.FixedHeight = 15f;
                Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Phone);

                foreach (ChldMstEMEMEntitty item in chldEmemDetails)
                {
                    //PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", Times));
                    //Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Name.FixedHeight = 15f;
                    //Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Name);
                    if (!string.IsNullOrEmpty(item.EMERName.Trim()))
                    {
                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase(item.EMERName, Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);
                    }

                    if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
                    {
                        string Rel_Desc = string.Empty;
                        if (AgyTabs_List.Count > 0)
                        {
                            AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
                            Rel_Desc = Rela.Code_Desc.Trim();
                        }

                        PdfPCell Emer_Rela = new PdfPCell(new Phrase(Rel_Desc, Times));
                        Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Rela.FixedHeight = 15f;
                        Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Rela);
                    }
                    else
                    {
                        PdfPCell Emer_Rela = new PdfPCell(new Phrase("________________", Times));
                        Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Rela.FixedHeight = 15f;
                        Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Rela);
                    }

                    //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                    //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Space.Colspan = 2;
                    //Emer_Space.FixedHeight = 15f;
                    //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Space);

                    //PdfPCell Emer_Address = new PdfPCell(new Phrase("Address", Times));
                    //Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Address.FixedHeight = 15f;
                    //Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Address);

                    if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
                    {
                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress1, Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);
                    }
                    //PdfPCell Emer_Tel = new PdfPCell(new Phrase("Telephone:", Times));
                    //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                    ////Emer_Space.Colspan = 2;
                    //Emer_Tel.FixedHeight = 15f;
                    //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel);
                    //string Emer_Phone = string.Empty;
                    //if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()) && item.EmerPhone1.Trim().Length == 10)
                    //    Emer_Phone = "(" + item.EmerPhone1.Substring(0, 3).Trim() + ") " + item.EmerPhone1.Substring(3, 3).Trim() + "-" + item.EmerPhone1.Substring(6, 4).Trim();
                    //else
                    //    Emer_Phone = item.EmerPhone1.Trim();

                    if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
                    {
                        MaskedComboBox mskemerphn = new MaskedComboBox();
                        mskemerphn.Mask = "(000)000-0000";
                        mskemerphn.Text = item.EmerPhone1;
                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Tel_Line.FixedHeight = 15f;
                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Tel_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Tel_Line.FixedHeight = 15f;
                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Tel_Line);
                    }

                    if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()) || !string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                    {
                        PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Space.Colspan = 2;
                        Emer_Space.FixedHeight = 15f;
                        Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Space);

                        if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()))
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress2, Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(" ", Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                        {
                            MaskedComboBox mskemerphn = new MaskedComboBox();
                            mskemerphn.Mask = "(000)000-0000";
                            mskemerphn.Text = item.EmerPhone2;
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                    }

                    Em_Count++;
                    if (Em_Count == 2)
                        break;
                }
            }
            else
            {

                PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Name.FixedHeight = 15f;
                Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Name);

                PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Relation.FixedHeight = 15f;
                Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Relation);

                PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Addr.FixedHeight = 15f;
                Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Addr);

                PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Phone.FixedHeight = 15f;
                Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Phone);

                for (int i = 0; i < 2; i++)
                {
                    PdfPCell Emer_Name1 = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name1.FixedHeight = 15f;
                    Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name1);

                    PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name_Line.FixedHeight = 15f;
                    Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name_Line);

                    PdfPCell Emer_Address = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address.FixedHeight = 15f;
                    Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Address);

                    PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address_Line.FixedHeight = 15f;
                    Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Address_Line);

                    //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                    //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Space.Colspan = 2;
                    //Emer_Space.FixedHeight = 15f;
                    //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Space);

                    //PdfPCell Emer_Tel = new PdfPCell(new Phrase("", Times));
                    //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                    ////Emer_Space.Colspan = 2;
                    //Emer_Tel.FixedHeight = 15f;
                    //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel);

                    //PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                    //Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Tel_Line.FixedHeight = 15f;
                    //Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel_Line);
                }
            }

            PdfPCell Emer_Space1 = new PdfPCell(new Phrase("", Times));
            Emer_Space1.HorizontalAlignment = Element.ALIGN_LEFT;
            Emer_Space1.Colspan = 4;
            Emer_Space1.FixedHeight = 15f;
            Emer_Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Emergency.AddCell(Emer_Space1);

            if (chldMstDetails != null)
            {
                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.FixedHeight = 15f;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan);

                if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.FixedHeight = 15f;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_Plan_Line);
                }
                else
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.FixedHeight = 15f;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_Plan_Line);
                }

                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Med_No.FixedHeight = 15f;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No);

                if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }
                else
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }

                PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space.Colspan = 2;
                Chld_Ins_Catg.FixedHeight = 15f;
                Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg);

                if (!string.IsNullOrEmpty(chldMstDetails.InsCat.Trim()))
                {
                    string INS_CATG_DESC = string.Empty;
                    if (lookInsuranceCategory.Count > 0)
                    {
                        foreach (CommonEntity Ins in lookInsuranceCategory)
                        {
                            if (chldMstDetails.InsCat.Trim() == Ins.Code.Trim())
                            {
                                INS_CATG_DESC = Ins.Desc.Trim(); break;
                            }
                        }
                    }

                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(INS_CATG_DESC, Timesline));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Colspan = 3;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }
                else
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.Colspan = 3;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }


                PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor.FixedHeight = 15f;
                Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor);

                if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                {
                    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim() + ", " + chldMstDetails.DoctorAddress, Timesline));
                    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doctor_Line.FixedHeight = 15f;
                    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doctor_Line);
                }
                else
                {
                    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doctor_Line.FixedHeight = 15f;
                    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doctor_Line);
                }

                PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Doc_Phone.FixedHeight = 15f;
                Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone);

                if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();
                    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doc_Phone_Line.FixedHeight = 15f;
                    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doc_Phone_Line);
                }
                else
                {
                    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doc_Phone_Line.FixedHeight = 15f;
                    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doc_Phone_Line);
                }


                PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space2.Colspan = 4;
                Emer_Space2.FixedHeight = 10f;
                Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space2);

                PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan.FixedHeight = 15f;
                Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan);

                if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                {
                    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), Timesline));
                    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_Plan_Line.FixedHeight = 15f;
                    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_Plan_Line);
                }
                else
                {
                    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_Plan_Line.FixedHeight = 15f;
                    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_Plan_Line);
                }

                PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dent_No.FixedHeight = 15f;
                Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No);

                if (!string.IsNullOrEmpty(chldMstDetails.DentalInsurer.Trim()))
                {
                    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase(chldMstDetails.DentalInsurer.Trim(), Timesline));
                    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_No_Line.FixedHeight = 15f;
                    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_No_Line);
                }
                else
                {
                    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_No_Line.FixedHeight = 15f;
                    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_No_Line);
                }


                PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist.FixedHeight = 15f;
                Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist);
                if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                {
                    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim() + ", " + chldMstDetails.DentistAddress, Timesline));
                    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Line.FixedHeight = 15f;
                    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Line);
                }
                else
                {
                    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Line.FixedHeight = 15f;
                    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Line);
                }

                PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dentist_Phone.FixedHeight = 15f;
                Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone);

                if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DentistPhone.Trim();
                    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Phone_Line);
                }
                else
                {
                    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Phone_Line);
                }

                PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space3.Colspan = 4;
                Emer_Space3.FixedHeight = 10f;
                Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space3);

                if (caseconddet != null)
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                    {
                        string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    else
                    {
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                    {
                        PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Timesline));
                        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITYLine.FixedHeight = 15f;
                        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITYLine);
                    }
                    else
                    {
                        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITYLine.FixedHeight = 15f;
                        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITYLine);
                    }

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                    {
                        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Timesline));
                        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITY_Date_Line.FixedHeight = 15f;
                        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITY_Date_Line);
                    }
                    else
                    {
                        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITY_Date_Line.FixedHeight = 15f;
                        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITY_Date_Line);
                    }


                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                    {
                        string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }
                    else
                    {
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                    {
                        string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                    {
                        string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                    HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    HH_Space.FixedHeight = 15f;
                    HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HH_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                    DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DEVL_Space.FixedHeight = 15f;
                    DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DEVL_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    {
                        string AltFund_Desc = string.Empty;
                        foreach (DataRow drFUND in dtFUND.Rows)
                        {
                            if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            {
                                AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                            }
                        }

                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    {
                        string Trans_Desc = string.Empty;
                        List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport(BaseForm.BaseAgencyControlDetails.AgyShortName);
                        foreach (CommonEntity agyEntity in lookClsTransport)
                        {
                            if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                            {
                                Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                            }
                        }
                        if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                        else
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_RIGHT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
                else
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIESLine.FixedHeight = 15f;
                    ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIESLine);

                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONSLine.FixedHeight = 15f;
                    MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONSLine);

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICALLine.FixedHeight = 15f;
                    MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICALLine);

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DIETLine.Colspan = 2;
                    DIETLine.FixedHeight = 15f;
                    DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIETLine);

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    DIET_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //HOUSEHOLDLine.Colspan = 2;
                    HOUSEHOLDLine.FixedHeight = 15f;
                    HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLDLine);

                    PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                    HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    HOUSEHOLD_Space.Colspan = 2;
                    HOUSEHOLD_Space.FixedHeight = 15f;
                    HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLD_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DevpLine.Colspan = 2;
                    DevpLine.FixedHeight = 15f;
                    DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DevpLine);

                    PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                    Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp_Space.Colspan = 2;
                    Devp_Space.FixedHeight = 15f;
                    Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    {
                        string AltFund_Desc = string.Empty;
                        foreach (DataRow drFUND in dtFUND.Rows)
                        {
                            if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            {
                                AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                            }
                        }

                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    {
                        string Trans_Desc = string.Empty;
                        List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport(BaseForm.BaseAgencyControlDetails.AgyShortName);
                        foreach (CommonEntity agyEntity in lookClsTransport)
                        {
                            if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                            {
                                Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                            }
                        }

                        if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                        else
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    //Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
            }
            else
            {
                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.FixedHeight = 15f;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan);

                PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan_Line.FixedHeight = 15f;
                Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan_Line);

                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Med_No.FixedHeight = 15f;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No);


                PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_No_Line.FixedHeight = 15f;
                Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No_Line);

                PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space.Colspan = 2;
                Chld_Ins_Catg.FixedHeight = 15f;
                Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg);


                PdfPCell Chld_Ins_Catg_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Ins_Catg_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Ins_Catg_Line.FixedHeight = 15f;
                Chld_Ins_Catg_Line.Colspan = 3;
                Chld_Ins_Catg_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg_Line);

                PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor.FixedHeight = 15f;
                Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor);

                PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor_Line.FixedHeight = 15f;
                Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor_Line);

                PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Doc_Phone.FixedHeight = 15f;
                Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone);


                PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doc_Phone_Line.FixedHeight = 15f;
                Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone_Line);

                PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space2.Colspan = 4;
                Emer_Space2.FixedHeight = 10f;
                Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space2);

                PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan.FixedHeight = 15f;
                Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan);

                PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan_Line.FixedHeight = 15f;
                Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan_Line);

                PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dent_No.FixedHeight = 15f;
                Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No);

                PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_No_Line.FixedHeight = 15f;
                Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No_Line);

                PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist.FixedHeight = 15f;
                Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist);

                PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist_Line.FixedHeight = 15f;
                Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Line);

                PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dentist_Phone.FixedHeight = 15f;
                Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone);

                PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist_Phone_Line.FixedHeight = 15f;
                Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone_Line);

                PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space3.Colspan = 4;
                Emer_Space3.FixedHeight = 10f;
                Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space3);

                if (caseconddet != null)
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                    {
                        string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    else
                    {
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                    {
                        string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }
                    else
                    {
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                    {
                        string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                    {
                        string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                    HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    HH_Space.FixedHeight = 15f;
                    HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HH_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                    DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DEVL_Space.FixedHeight = 15f;
                    DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DEVL_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    //if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    //{
                    //    string AltFund_Desc = string.Empty;
                    //    foreach (DataRow drFUND in dtFUND.Rows)
                    //    {
                    //        if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                    //        {
                    //            AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                    //        }
                    //    }

                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnddesc.FixedHeight = 15f;
                    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnddesc);
                    //}

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    //if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    //{
                    //    string Trans_Desc = string.Empty;
                    //    List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                    //    foreach (CommonEntity agyEntity in lookClsTransport)
                    //    {
                    //        if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                    //        {
                    //            Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                    //        }
                    //    }

                    //    if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                    //    {
                    //        PdfPCell Trans1 = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                    //        Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //        Trans1.FixedHeight = 15f;
                    //        Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //        Emergency.AddCell(Trans1);
                    //    }
                    //    else
                    //    {
                    //        PdfPCell Trans1 = new PdfPCell(new Phrase("_____________________", Times));
                    //        Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //        Trans1.FixedHeight = 15f;
                    //        Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //        Emergency.AddCell(Trans1);
                    //    }
                    //}
                    //else
                    //{
                    PdfPCell Trans1 = new PdfPCell(new Phrase("_____________________", Times));
                    Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    Trans1.FixedHeight = 15f;
                    Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans1);
                    //}

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    //if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    //{
                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Colspan = 3;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell PickOff = new PdfPCell(new Phrase("_____________________________________________", Times));
                    PickOff.HorizontalAlignment = Element.ALIGN_LEFT;
                    PickOff.FixedHeight = 15f;
                    PickOff.Colspan = 3;
                    PickOff.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(PickOff);
                    //}

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    //if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    //{
                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Colspan = 3;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell DropOff = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DropOff.HorizontalAlignment = Element.ALIGN_LEFT;
                    DropOff.FixedHeight = 15f;
                    DropOff.Colspan = 3;
                    DropOff.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DropOff);
                    //}



                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    //Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
                else
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIESLine.FixedHeight = 15f;
                    ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIESLine);

                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONSLine.FixedHeight = 15f;
                    MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONSLine);

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICALLine.FixedHeight = 15f;
                    MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICALLine);

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DIETLine.Colspan = 2;
                    DIETLine.FixedHeight = 15f;
                    DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIETLine);

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    DIET_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //HOUSEHOLDLine.Colspan = 2;
                    HOUSEHOLDLine.FixedHeight = 15f;
                    HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLDLine);

                    PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                    HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    HOUSEHOLD_Space.Colspan = 2;
                    HOUSEHOLD_Space.FixedHeight = 15f;
                    HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLD_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DevpLine.Colspan = 2;
                    DevpLine.FixedHeight = 15f;
                    DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DevpLine);

                    PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                    Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp_Space.Colspan = 2;
                    Devp_Space.FixedHeight = 15f;
                    Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnddesc.FixedHeight = 15f;
                    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnddesc);

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);


                    PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                    Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Trans_Space.FixedHeight = 15f;
                    Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans_Space);

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);


                    PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                    PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                    PickSpace.FixedHeight = 15f;
                    PickSpace.Colspan = 3;
                    PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(PickSpace);

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);


                    PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                    dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                    dropSpace.FixedHeight = 15f;
                    dropSpace.Colspan = 3;
                    dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(dropSpace);

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
            }

            document.Add(EmploymentDet);
            document.Add(Emergency);

            //}
            #endregion

            PdfPTable Declartion = new PdfPTable(2);
            Declartion.TotalWidth = 750f;
            Declartion.WidthPercentage = 100;
            Declartion.LockedWidth = true;
            float[] Declartion_widths = new float[] { 80f, 40f };
            Declartion.SetWidths(Declartion_widths);
            Declartion.HorizontalAlignment = Element.ALIGN_CENTER;
            Declartion.SpacingBefore = 20f;

            if (Privileges.ModuleCode == "05")
            {
                PdfPCell Declartion_DESC = new PdfPCell(new Phrase("The information provided is true and correct to the best of my knowledge and belief. I am aware that I am subject to prosecution for providing false or fraudulent information. I understand I may request a hearing to appeal a denial of eligibility, amount of assistancereceived, or a delay of service delivery.", Times));
                Declartion_DESC.Colspan = 2;
                Declartion_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                //SerVice_DESC.FixedHeight = 15f;
                Declartion_DESC.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(Declartion_DESC);

                PdfPCell App_Sign = new PdfPCell(new Phrase("Applicant Signature: ______________________________________", Times));
                App_Sign.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Sign);

                PdfPCell App_Date = new PdfPCell(new Phrase("Date: ______________________", Times));
                App_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Date);

            }


            if (Privileges.ModuleCode == "05")
                document.Add(Declartion);

            if (!string.IsNullOrEmpty(Attention.Trim()))
            {
                document.NewPage();

                PdfPTable CTAttn = new PdfPTable(2);
                CTAttn.TotalWidth = 750f;
                CTAttn.WidthPercentage = 100;
                CTAttn.LockedWidth = true;
                float[] CTAttn_widths = new float[] { 80f, 40f };
                CTAttn.SetWidths(CTAttn_widths);
                CTAttn.HorizontalAlignment = Element.ALIGN_CENTER;
                CTAttn.SpacingBefore = 20f;

                PdfPCell S1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                S1.Colspan = 2;
                S1.HorizontalAlignment = Element.ALIGN_CENTER;
                S1.FixedHeight = 15f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S1);

                PdfPCell S2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                S2.Colspan = 2;
                S2.HorizontalAlignment = Element.ALIGN_CENTER;
                S2.FixedHeight = 15f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S2);

                PdfPCell S3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.FixedHeight = 15f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S3);

                PdfPCell S4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                S4.HorizontalAlignment = Element.ALIGN_RIGHT;
                S4.FixedHeight = 15f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S4);

                PdfPCell S5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.FixedHeight = 15f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }
                else
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }

                PdfPCell P1 = new PdfPCell(new Phrase("", Times));
                P1.Colspan = 2;
                P1.FixedHeight = 20f;
                P1.HorizontalAlignment = Element.ALIGN_LEFT;
                P1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(P1);


                PdfPCell A1 = new PdfPCell(new Phrase(Attention.Trim(), Times));
                A1.Colspan = 2;
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(A1);

                document.Add(CTAttn);

            }

            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion

        #region HeadStart App1
        private void On_HSS_SaveFormClosed1()
        {
            Random_Filename = null;

            PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            //PdfName = strFolderPath + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }
            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document();
            document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //BaseFont bf_times_Check = BaseFont.CreateFont("c:/windows/fonts/WINGDNG2.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            //iTextSharp.text.Font Times_Check = new iTextSharp.text.Font(bf_times_Check, 10);

            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
            cb = writer.DirectContent;

            string Attention = string.Empty, Roma_Switch = string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();
                Roma_Switch = ds.Tables[0].Rows[0]["ACR_ROMA_SWITCH"].ToString().Trim();
            }

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            //Casesite Table
            List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
            CaseSiteEntity Search_Site = new CaseSiteEntity(true);
            Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
            Search_Site.SiteROOM = "0000";
            SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");


            //Getting CaseWorker
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];

            //CaseIncome Table
            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];
            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

            DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCasediff = dsCaseDiff.Tables[0];

            //Services Table
            List<CaseMSTSER> MSTSER_List = new List<CaseMSTSER>();
            CaseMSTSER Search_MSTSER = new CaseMSTSER(true);
            Search_MSTSER.Agency = BaseForm.BaseAgency; Search_MSTSER.Dept = BaseForm.BaseDept; Search_MSTSER.Program = BaseForm.BaseProg;
            Search_MSTSER.Year = BaseForm.BaseYear; Search_MSTSER.AppNo = BaseForm.BaseApplicationNo;
            MSTSER_List = _model.CaseMstData.Browse_MSTSER(Search_MSTSER, "Browse");
            //DataSet dsMSTSER = DatabaseLayer.CaseMst.Browse_MSTSER(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            //DataTable dtMSTSER = dsMSTSER.Tables[0];

            //AddCust Table
            List<AddCustEntity> ADDCUST_List = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            ADDCUST_List = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");
            //DataSet dsAddCust = DatabaseLayer.CaseSum.Browse_AddCust(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            //DataTable dtAddCust = dsAddCust.Tables[0];

            //CUSTFLDS Table for custom Questions
            List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
            CustfldsEntity Search_CustQues = new CustfldsEntity(true);
            custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

            //CaseHie Table
            DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
            DataTable dtCaseHie = dsCaseHie.Tables[0];

            //CHLDMST Table
            ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //CHLDEMER TABLE
            List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);


            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            //DataTable dtrelation = Relations.Tables[0];
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }

            List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

            cb.BeginText();
            X_Pos = 400; Y_Pos = 580;
            cb.SetFontAndSize(bf_helv, 13);
            //cb.SetColorFill(BaseColor.BLUE.Darker());
            string Header_Desc = string.Empty; string Form_Selection = string.Empty;

            //if (Privileges.ModuleCode == "03")
            //{
            string ShortName = string.Empty;
            string AgencyName = string.Empty; string SerHie = "N";
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ShortName = AGYShortName;//ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }

            if (dtCaseHie.Rows.Count > 0)
            {
                foreach (DataRow drCasehie in dtCaseHie.Rows)
                {
                    if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
                    {
                        AgencyName = drCasehie["HIE_NAME"].ToString().Trim(); break;
                    }
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " - EARLY CARE & EDUCATION APPLICATION", X_Pos, Y_Pos - 25, 0);
                Header_Desc = ShortName + " - EARLY CARE & EDUCATION APPLICATION";

                Form_Selection = AgencyName;//"Head Start Application";

                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);
            }
            cb.SetFontAndSize(bf_helv, 9);

            X_Pos = 30; Y_Pos -= 50;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 700, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToString("g"), Timesline), 780, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 720, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("____________", Times), 780, Y_Pos, 0);


            Y_Pos -= 13;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a citizen or naturalized Alien?", X_Pos, Y_Pos, 0);
            else
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommdation or special help to complete this application?", X_Pos, Y_Pos, 0);

            //cb.EndText();
            /************************************CheckBoxes****************************/
            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            RadioCheckField checkbox;
            PdfFormField SField;
            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
            {
                rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "Yes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 200, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(220, Y_Pos + 8, 228, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "No", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 230, Y_Pos, 0);

                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If no, are you a qualified Alien??", 320, Y_Pos, 0);

                rect = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 460, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(480, Y_Pos + 8, 488, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 490, Y_Pos, 0);
            }
            else
            {
                rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);
            }
            //cb.BeginText();
            X_Pos = 30; Y_Pos -= 13;

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            string Zip = string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() ;
            if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
            string Comma=string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()) && (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()) || !string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim())))
                Comma=", ";

            string Address = HN + Street + Suffix +Comma+ Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);

            string Language = null;
            DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
            DataTable dtLang = dsLang.Tables[0];
            foreach (DataRow drLang in dtLang.Rows)
            {
                if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
                {
                    Language = drLang["LookUpDesc"].ToString().Trim(); break;
                }
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 400, Y_Pos, 0);//380 changed on 05/22/2017
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 470, Y_Pos, 0);//450 changed on 05/22/2017
            //cb.EndText();
            if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
            {
                DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
                DataRow drSITE = dsSITE.Tables[0].Rows[0];
                string Site_Name = null;
                //cb.BeginText();
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                Site_Name = drSITE["SiteName"].ToString().Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
                //cb.EndText();
            }
            else
            {
                //cb.BeginText();
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                //cb.EndText();
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 2);
                cb.LineTo(705, Y_Pos - 2);
                cb.Stroke();
            }
            Y_Pos -= 13; //cb.BeginText();

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            string House_NO = null, Street1 = null, city = null, state = null, zip = null, DApt = null; string DSuffix = string.Empty;
            if (dtCasediff.Rows.Count > 0)
            {
                foreach (DataRow drCaseDiff in dtCasediff.Rows)
                {
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
                        House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_APT"].ToString().Trim()))
                        DApt = drCaseDiff["DIFF_APT"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
                        DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
                        Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
                        city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
                        state = drCaseDiff["DIFF_STATE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
                        zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
                    if (zip == "00000") zip = ""; else zip = ", " + zip;
                }
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1+DApt + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            }
            else
            {
                if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                    Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                    Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                    Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                    Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                    HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

                Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            }

            if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email :", Times), 400, Y_Pos, 0);//380 changed on 05/22/2017
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 430, Y_Pos, 0);//410 changed on 05/22/2017
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 400, Y_Pos, 0);//380 changed on 05/22/2017
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(430, Y_Pos);//410 changed on 05/22/2017
                cb.LineTo(520, Y_Pos);
                cb.Stroke();
            }
            //cb.EndText();


            //cb.BeginText();
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone : ", 640, Y_Pos, 0);
            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();  //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);

            Y_Pos -= 13;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Message Number", 400, Y_Pos, 0);//380 changed on 05/22/2017
            if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 470, Y_Pos, 0);
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(470, Y_Pos);
                cb.LineTo(505, Y_Pos);
                cb.Stroke();
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Phone : ", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
                //cb.EndText();
            }
            else
            {
                //cb.EndText();
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }


            Y_Pos -= 13; //cb.BeginText();
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Funding Source", X_Pos, Y_Pos, 0);
            DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "H");
            DataTable dtFUND = dsFUND.Tables[0];
            PdfFormField Field;
            X_Pos = 140;
            string CheckTitle = string.Empty;
            foreach (DataRow drFUND in dtFUND.Rows)
            {
                if (drFUND["Active"].ToString() == "Y" ||
                    (drFUND["Active"].ToString() == "N" && chldMstDetails != null))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drFUND["LookUpDesc"].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (chldMstDetails != null)
                    {
                        if (chldMstDetails.FundSource.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            checkbox.Checked = true;
                    }
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFUND["LookUpDesc"].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 13; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Class Prefer", X_Pos, Y_Pos, 0);

            iTextSharp.text.Rectangle rect1 = new iTextSharp.text.Rectangle(140, Y_Pos + 8, 148, Y_Pos);
            RadioCheckField checkbox1 = new RadioCheckField(writer, rect1, "ZAM", "On");
            checkbox1.BorderColor = new GrayColor(0.3f);
            checkbox1.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "A")
                    checkbox1.Checked = true;
            }
            PdfFormField Field1 = checkbox1.CheckField;
            writer.AddAnnotation(Field1);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("AM", Times), 150, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "AM", 150, Y_Pos, 0);
            cb.EndText();

            iTextSharp.text.Rectangle rect2 = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
            RadioCheckField checkbox2 = new RadioCheckField(writer, rect2, "ZPM", "On");
            checkbox2.BorderColor = new GrayColor(0.3f);
            checkbox2.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "P")
                    checkbox2.Checked = true;
            }
            PdfFormField Field2 = checkbox2.CheckField;
            writer.AddAnnotation(Field2);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("PM", Times), 200, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "PM", 210, Y_Pos, 0);

            iTextSharp.text.Rectangle rect3 = new iTextSharp.text.Rectangle(240, Y_Pos + 8, 248, Y_Pos);
            RadioCheckField checkbox3 = new RadioCheckField(writer, rect3, "ZFULL", "On");
            checkbox3.BorderColor = new GrayColor(0.3f);
            checkbox3.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "F")
                    checkbox3.Checked = true;
            }
            PdfFormField Field3 = checkbox3.CheckField;
            writer.AddAnnotation(Field3);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("FULL", Times), 250, Y_Pos, 0);

            iTextSharp.text.Rectangle rect4 = new iTextSharp.text.Rectangle(290, Y_Pos + 8, 298, Y_Pos);
            RadioCheckField checkbox4 = new RadioCheckField(writer, rect4, "ZEXT", "On");
            checkbox4.BorderColor = new GrayColor(0.3f);
            checkbox4.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ClassPrefer.ToString().Trim() == "E")
                    checkbox4.Checked = true;
            }
            PdfFormField Field4 = checkbox4.CheckField;
            writer.AddAnnotation(Field4);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EXT", Times), 300, Y_Pos, 0);

            iTextSharp.text.Rectangle rect5 = new iTextSharp.text.Rectangle(340, Y_Pos + 8, 348, Y_Pos);
            RadioCheckField checkbox5 = new RadioCheckField(writer, rect5, "ZRep", "On");
            checkbox5.BorderColor = new GrayColor(0.3f);
            checkbox5.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.ChldReat.ToString().Trim() == "Y" || chldMstDetails.ChldReat.ToString().Trim() == "1")
                    checkbox5.Checked = true;
            }
            PdfFormField Field5 = checkbox5.CheckField;
            writer.AddAnnotation(Field5);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Repeater", Times), 350, Y_Pos, 0);

            iTextSharp.text.Rectangle rect6 = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
            RadioCheckField checkbox6 = new RadioCheckField(writer, rect6, "ZBirth", "On");
            checkbox6.BorderColor = new GrayColor(0.3f);
            checkbox6.Rotation = 90;
            if (chldMstDetails != null)
            {
                if (chldMstDetails.BirthCert.ToString().Trim() == "Y" || chldMstDetails.BirthCert.ToString().Trim() == "1")
                    checkbox6.Checked = true;
            }
            PdfFormField Field6 = checkbox6.CheckField;
            writer.AddAnnotation(Field6);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Cert", Times), 400, Y_Pos, 0);

            iTextSharp.text.Rectangle rect7 = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
            RadioCheckField checkbox7 = new RadioCheckField(writer, rect7, "ZNext", "On");
            checkbox7.BorderColor = new GrayColor(0.3f);
            checkbox7.Rotation = 90;
            //checkbox.Text = "Next Yrs Prep";
            if (chldMstDetails != null)
            {
                if (chldMstDetails.NextYearPrep.ToString().Trim() == "Y" || chldMstDetails.NextYearPrep.ToString().Trim() == "1")
                    checkbox7.Checked = true;
            }
            PdfFormField Field7 = checkbox7.CheckField;
            writer.AddAnnotation(Field7);
            //ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("NextYrsPrep", Times), 462, Y_Pos, 0);

            cb.BeginText();
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "PM", 200, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "FULL", 250, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "EXT", 300, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Repeater", 350, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Birth Cert", 400, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Next Yrs Prep", 460, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Birth Place", 540, Y_Pos, 0);
            //cb.EndText();

            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("PM", Times), 200, Y_Pos, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("FULL", Times), 250, Y_Pos, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EXT", Times), 300, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Repeater", Times), 350, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Cert", Times), 400, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("NextYrsPrep", Times), 462, Y_Pos, 0);
            //cb.BeginText();
            //X_Pos = 140;
            //string[] Checkboxes = { "AM", "PM", "FULL", "EXT", "Repeater", "Birth Cert", "Next Yrs Prep" };
            //for (int Z = 0; Z < Checkboxes.Length; ++Z)
            //{
            //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
            //    checkbox = new RadioCheckField(writer, rect, "Z" + Checkboxes[Z], "On");
            //    checkbox.BorderColor = new GrayColor(0.3f);
            //    checkbox.Rotation = 90;
            //    if (chldMstDetails != null)
            //    {
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "A" && Checkboxes[Z].StartsWith("A"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "P" && Checkboxes[Z].StartsWith("P"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "F" && Checkboxes[Z].StartsWith("F"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ClassPrefer.ToString().Trim() == "E" && Checkboxes[Z].StartsWith("E"))
            //            checkbox.Checked = true;
            //        if (chldMstDetails.ChldReat.ToString().Trim() == "Y" && Checkboxes[Z].StartsWith("R"))
            //            checkbox.Checked = true;
            //        if ((chldMstDetails.BirthCert.ToString().Trim() == "Y" || chldMstDetails.BirthCert.ToString().Trim() == "1") && Checkboxes[Z].StartsWith("B"))
            //            checkbox.Checked = true;
            //        if ((chldMstDetails.NextYearPrep.ToString().Trim() == "Y" || chldMstDetails.NextYearPrep.ToString().Trim() == "1") && Checkboxes[Z].StartsWith("N"))
            //            checkbox.Checked = true;
            //    }
            //    Field = checkbox.CheckField;
            //    writer.AddAnnotation(Field);
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Checkboxes[Z].ToString(), Times), X_Pos + 10, Y_Pos, 0);
            //    X_Pos += 70;
            //    if (X_Pos > 600)
            //    {
            //        X_Pos = 30;
            //        Y_Pos -= 13;
            //    }
            //}
            //X_Pos = 30;
            //rect = new iTextSharp.text.Rectangle(140, Y_Pos + 8, 148, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "AM", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.ClassPrefer.ToString().Trim() == "A")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("AM", Times), 150, Y_Pos, 0);

            //rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "PM", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.ClassPrefer.ToString().Trim() == "P")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("PM", Times), 200, Y_Pos, 0);

            //rect = new iTextSharp.text.Rectangle(240, Y_Pos + 8, 248, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "FULL", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.ClassPrefer.ToString().Trim() == "F")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("FULL", Times), 250, Y_Pos, 0);

            //rect = new iTextSharp.text.Rectangle(290, Y_Pos + 8, 298, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "EXT", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.ClassPrefer.ToString().Trim() == "E")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EXT", Times), 300, Y_Pos, 0);

            //rect = new iTextSharp.text.Rectangle(340, Y_Pos + 8, 348, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "RP1", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.ChldReat.ToString().Trim() == "Y")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Repeater", Times), 350, Y_Pos, 0);


            //rect = new iTextSharp.text.Rectangle(400, Y_Pos + 8, 408, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "BI1", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.BirthCert.ToString().Trim() == "Y")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Cert", Times), 410, Y_Pos, 0);

            //rect = new iTextSharp.text.Rectangle(470, Y_Pos + 8, 480, Y_Pos);
            //checkbox = new RadioCheckField(writer, rect, "NYP1", "On");
            //checkbox.BorderColor = new GrayColor(0.3f);
            //checkbox.Rotation = 90;
            //if (chldMstDetails != null)
            //{
            //    if (chldMstDetails.NextYearPrep.ToString().Trim() == "Y")
            //        checkbox.Checked = true;
            //}
            //Field = checkbox.CheckField;
            //writer.AddAnnotation(Field);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Next Yrs Prep", Times), 485, Y_Pos, 0);

            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Birth Place", Times), 540, Y_Pos, 0);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Birth Place", 530, Y_Pos, 0);
            if (chldMstDetails != null)
            {
                if (!string.IsNullOrEmpty(chldMstDetails.Pob.Trim()))
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(chldMstDetails.Pob.Trim(), Timesline), 590, Y_Pos, 0);
                else
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("______________", Times), 590, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("______________", Times), 590, Y_Pos, 0);
            Y_Pos -= 8; cb.EndText();
            SetLine();
            cb.BeginText();
            Y_Pos -= 20;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Housing Situation", X_Pos, Y_Pos, 0);
            DataSet dsHouseMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            string strMainData = dsHouseMain.Tables[0].Rows[0]["Agy_9"].ToString();
            string CodeColSubscript = string.Empty, DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();


            //DataSet dsHousing = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.HOUSINGTYPES);
            DataSet dsHousing = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.HOUSINGTYPES);
            DataTable dtHousing = dsHousing.Tables[0];
            //PdfFormField Field;
            X_Pos = 140;
            //string CheckTitle = string.Empty;
            foreach (DataRow drHousing in dtHousing.Rows)
            {
                if (drHousing["AGY_ACTIVE"].ToString() == "Y" ||
                    (drHousing["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_HOUSING"].ToString().Trim()) && drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, "H" + drHousing[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHousing[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 25; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Family Type", X_Pos, Y_Pos, 0);
            X_Pos = 140;

            DataSet dsFamilyMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            strMainData = dsFamilyMain.Tables[0].Rows[0]["Agy_9"].ToString();
            CodeColSubscript = string.Empty; DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();

            //DataSet dsFamilyType = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.FAMILYTYPE);
            DataSet dsFamilyType = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.FAMILYTYPE);
            DataTable dtFamilyType = dsFamilyType.Tables[0];
            foreach (DataRow drFamilyType in dtFamilyType.Rows)
            {
                if (drFamilyType["AGY_ACTIVE"].ToString() == "Y" ||
                    (drFamilyType["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_FAMILY_TYPE"].ToString().Trim()) && drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    //checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType["LookUpDesc"].ToString().Trim(), "On");
                    checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFamilyType[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        Y_Pos -= 13;
                        X_Pos = 140;
                    }

                }
            }

            Y_Pos -= 25; X_Pos = 30;
            int Count = dtCaseSNP.Rows.Count;
            int Adults = 0, Child = 0, under5 = 0;
            foreach (DataRow drsnp in dtCaseSNP.Rows)
            {
                if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
                {
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
                        Adults++;
                    else
                        Child++;
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
                        under5++;
                }
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 123, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Adults: ", 210, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Adults.ToString(), Timesline), 260, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children: ", 310, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Child.ToString(), Timesline), 370, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children under 5: ", 420, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(under5.ToString(), Timesline), 508, Y_Pos, 0);
            cb.EndText();

            //Temp table not displayed on the screen
            PdfPTable head = new PdfPTable(1);
            head.HorizontalAlignment = Element.ALIGN_CENTER;
            head.TotalWidth = 50f;
            PdfPCell headcell = new PdfPCell(new Phrase(""));
            headcell.HorizontalAlignment = Element.ALIGN_CENTER;
            headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            head.AddCell(headcell);

            #region To Print SNP Details in the Table

            PdfPTable Snp_Table = new PdfPTable(13);
            Snp_Table.TotalWidth = 750f;
            Snp_Table.WidthPercentage = 100;
            Snp_Table.LockedWidth = true;
            float[] widths = new float[] { 65f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 25f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
            Snp_Table.SetWidths(widths);
            Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
            Snp_Table.SpacingBefore = 310f;

            PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
            Header.Colspan = 13;
            Header.FixedHeight = 15f;
            Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Header.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(Header);

            PdfPCell row2 = new PdfPCell(new Phrase(""));
            row2.Colspan = 9;
            row2.FixedHeight = 15f;
            row2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2);

            PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
            row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Health.FixedHeight = 15f;
            row2_Health.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Health);

            PdfPCell row2_Space = new PdfPCell(new Phrase(""));
            row2_Space.Colspan = 3;
            row2_Space.FixedHeight = 15f;
            row2_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Space);

            //PdfPCell row3 = new PdfPCell(new Phrase(""));
            //row3.Colspan = 3;
            //row3.FixedHeight = 15f;
            //row3.Border = iTextSharp.text.Rectangle.BOX;
            //Snp_Table.AddCell(row3);

            PdfPCell row3 = new PdfPCell(new Phrase(""));
            row3.Colspan = 2;
            row3.FixedHeight = 15f;
            row3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3);

            PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
            row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_SSN.FixedHeight = 15f;
            row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_SSN);

            PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
            row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Birth.FixedHeight = 15f;
            row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Birth);

            PdfPCell row3_Space = new PdfPCell(new Phrase(""));
            //row3_Space.Colspan = 2;
            row3_Space.FixedHeight = 15f;
            row3_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space);

            PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
            row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Sex.FixedHeight = 15f;
            row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Sex);

            PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
            row3_Space2.Colspan = 3;
            row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space2.FixedHeight = 15f;
            row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space2);

            PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
            row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Insurance.FixedHeight = 15f;
            row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Insurance);

            PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
            row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Veteran.FixedHeight = 15f;
            row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Veteran);

            PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("Receive FS", TableFontBoldItalic));
            row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Receive_FS.FixedHeight = 15f;
            row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Receive_FS);

            PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space3.FixedHeight = 15f;
            row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space3);

            string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yyyy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
            for (int i = 0; i < col.Length; ++i)
            {
                PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                cell.FixedHeight = 15f;
                if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                else cell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(cell);
            }

            int Tbl_Count = 0; string FamSeq = string.Empty;
            List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
            foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
                {
                    FamSeq = entity.FamilySeq.Trim();
                    string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
                    {
                        if (entity.Ssno.Trim().Length < 9)
                            entity.Ssno = SetLeadingZeros(entity.Ssno.Trim());
                        //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
                        SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(entity.AltBdate))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (entity.Age.Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (entity.MilitaryStatus.Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(entity.MilitaryStatus.Trim().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);
                }
            }

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {
                if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "F";
                            else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "F";
                                else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "P";
                                break;
                            }
                        }
                    }


                    string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
                    {
                        if (drCaseSNP["SNP_SSNO"].ToString().Trim().Length < 9)
                            drCaseSNP["SNP_SSNO"] = SetLeadingZeros(drCaseSNP["SNP_SSNO"].ToString().Trim());

                        SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
                    FoodStamps.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps.FixedHeight = 15f;
                    FoodStamps.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);

                    Tbl_Count++;
                    if (Tbl_Count >= 10)
                        break;
                }
            }
            int Len_Var = 130 - Tbl_Count * 13;
            for (int j = 0; j <= Len_Var; ++j)  //120
            {
                PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
                SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
                SpaceCell.FixedHeight = 15f;
                SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(SpaceCell);
            }

            document.Add(head);
            document.Add(Snp_Table);
            document.NewPage();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            #endregion End Of SNP details Table


            #region Income Table

            iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
            //start the Income details of a Family to the table
            PdfPTable IncomeTable = new PdfPTable(5);
            IncomeTable.TotalWidth = 750f;
            IncomeTable.WidthPercentage = 100;
            IncomeTable.LockedWidth = true;
            float[] Incomewidths = new float[] { 80f, 50f, 40f, 90f, 80f };
            IncomeTable.SetWidths(Incomewidths);
            IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeTable.SpacingBefore = 60f;

            PdfPCell IncomeCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            IncomeCell.Colspan = 5;
            IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell.FixedHeight = 15f;
            IncomeCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell);

            PdfPCell IncomeCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            IncomeCell1.Colspan = 5;
            IncomeCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell1.FixedHeight = 15f;
            IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell1);

            PdfPCell IncomeCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            IncomeCell0.Colspan = 2;
            IncomeCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell0.FixedHeight = 15f;
            IncomeCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell0);

            PdfPCell IncomeCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            IncomeCell2.Colspan = 3;
            IncomeCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            IncomeCell2.FixedHeight = 15f;
            IncomeCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell2);

            PdfPCell IncomeCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            IncomeCell3.Colspan = 3;
            IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell3.FixedHeight = 15f;
            IncomeCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            else
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }

            PdfPCell IncomeHeader = new PdfPCell(new Phrase("Financial Information - As reported by Applicant", TblFontBold));
            IncomeHeader.Colspan = 5;
            IncomeHeader.FixedHeight = 15f;
            IncomeHeader.BackgroundColor = BaseColor.LIGHT_GRAY;
            IncomeHeader.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeHeader);
            string[] Incomecol = { "Household Member", "Amount", "Interval", "Income Sources", "How Verified?" };
            for (int p = 0; p < Incomecol.Length; ++p)
            {
                PdfPCell Incomecell = new PdfPCell(new Phrase(Incomecol[p], TableFontBoldItalic));
                Incomecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Incomecell.FixedHeight = 15f;
                Incomecell.Border = iTextSharp.text.Rectangle.BOX;
                IncomeTable.AddCell(Incomecell);
            }

            if (dsIncome.Tables.Count > 0)
                dtIncome = dsIncome.Tables[0];

            decimal Row_Prog_Income = 0; string interval = null, MemName = null, Income_Verifier = null;
            string IncomeDesc = null, privSeq = null;
            if (dtCaseIncome.Rows.Count > 0)
            {
                DataView dv = dtCaseIncome.DefaultView;
                dv.RowFilter = "INCOME_EXCLUDE='N'";
                dv.Sort = "INCOME_FAMILY_SEQ ASC";
                dtCaseIncome = dv.ToTable();
                foreach (DataRow drCaseIncome in dtCaseIncome.Rows)
                {
                    Income_Verifier = interval = IncomeDesc = string.Empty;
                    if (drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim() != privSeq)
                    {
                        if (!string.IsNullOrEmpty(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim()))
                            MemName = Get_Member_Name(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim(), string.Empty);
                        PdfPCell House_HoldMem = new PdfPCell(new Phrase(MemName, TableFont));
                        House_HoldMem.Colspan = 5;
                        House_HoldMem.HorizontalAlignment = Element.ALIGN_LEFT;
                        House_HoldMem.FixedHeight = 15f;
                        House_HoldMem.Border = iTextSharp.text.Rectangle.BOX;
                        IncomeTable.AddCell(House_HoldMem);
                        privSeq = drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim();
                    }
                    PdfPCell Income_Space = new PdfPCell(new Phrase("", TableFont));
                    Income_Space.Colspan = 1;
                    Income_Space.HorizontalAlignment = Element.ALIGN_CENTER;
                    Income_Space.FixedHeight = 15f;
                    Income_Space.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Income_Space);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim()))
                        Row_Prog_Income = decimal.Parse(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim());
                    PdfPCell Amount = new PdfPCell(new Phrase(Row_Prog_Income.ToString(), TableFont));
                    Amount.HorizontalAlignment = Element.ALIGN_CENTER;
                    Amount.FixedHeight = 15f;
                    Amount.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Amount);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_INTERVAL"].ToString().Trim()))
                        interval = LookupDataAccess.ShowIncomeInterval(drCaseIncome["INCOME_INTERVAL"].ToString().Trim());
                    PdfPCell Freq = new PdfPCell(new Phrase(interval, TableFont));
                    Freq.HorizontalAlignment = Element.ALIGN_LEFT;
                    Freq.FixedHeight = 15f;
                    Freq.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Freq);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_TYPE"].ToString().Trim()))
                        IncomeDesc = Get_IncomeType_Desc(drCaseIncome["INCOME_TYPE"].ToString().Trim());
                    PdfPCell IncomeSource = new PdfPCell(new Phrase(IncomeDesc, TableFont));
                    IncomeSource.HorizontalAlignment = Element.ALIGN_CENTER;
                    IncomeSource.FixedHeight = 15f;
                    IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeSource);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim()))
                        Income_Verifier = drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim();
                    PdfPCell IncomeVer = new PdfPCell(new Phrase(Income_Verifier, TableFont));
                    IncomeVer.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeVer.FixedHeight = 15f;
                    IncomeVer.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeVer);

                }
            }

            PdfPTable TotIncomeTable = new PdfPTable(8);
            TotIncomeTable.TotalWidth = 750f;
            TotIncomeTable.WidthPercentage = 100;
            TotIncomeTable.LockedWidth = true;
            float[] TotIncomeTablewidths = new float[] { 50f, 30f, 50f, 40f, 60f, 30f, 50f, 30f };
            TotIncomeTable.SetWidths(TotIncomeTablewidths);
            TotIncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //IncomeTable.SpacingBefore = 60f;

            PdfPCell Total_Space = new PdfPCell(new Phrase("", TableFont));
            Total_Space.Colspan = 8;
            Total_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            Total_Space.FixedHeight = 15f;
            Total_Space.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Space);

            PdfPCell Total = new PdfPCell(new Phrase("Total Income", TableFont));
            Total.HorizontalAlignment = Element.ALIGN_LEFT;
            Total.FixedHeight = 15f;
            Total.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total);

            PdfPCell Total_Income = new PdfPCell(new Phrase(drCaseMST["MST_FAM_INCOME"].ToString().Trim(), TableFont));
            Total_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Total_Income.FixedHeight = 15f;
            Total_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Income);

            PdfPCell Program = new PdfPCell(new Phrase("Program Income", TableFont));
            Program.HorizontalAlignment = Element.ALIGN_LEFT;
            Program.FixedHeight = 15f;
            Program.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program);

            PdfPCell Program_Income = new PdfPCell(new Phrase(drCaseMST["MST_PROG_INCOME"].ToString().Trim(), TableFont));
            Program_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Program_Income.FixedHeight = 15f;
            Program_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program_Income);

            PdfPCell Federal = new PdfPCell(new Phrase("% of Federal Poverty Level", TableFont));
            Federal.HorizontalAlignment = Element.ALIGN_LEFT;
            Federal.FixedHeight = 15f;
            Federal.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal);

            PdfPCell Federal_Poverty = new PdfPCell(new Phrase(drCaseMST["MST_POVERTY"].ToString().Trim() + "%", TableFont));
            Federal_Poverty.HorizontalAlignment = Element.ALIGN_CENTER;
            Federal_Poverty.FixedHeight = 15f;
            Federal_Poverty.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal_Poverty);

            PdfPCell HUD = new PdfPCell(new Phrase("HUD%", TableFont));
            HUD.HorizontalAlignment = Element.ALIGN_LEFT;
            HUD.FixedHeight = 15f;
            HUD.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD);

            PdfPCell HUD_Value = new PdfPCell(new Phrase(drCaseMST["MST_HUD"].ToString().Trim() + "%", TableFont));
            HUD_Value.HorizontalAlignment = Element.ALIGN_CENTER;
            HUD_Value.FixedHeight = 15f;
            HUD_Value.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD_Value);

            document.Add(IncomeTable);
            document.Add(TotIncomeTable);


            #endregion



            #region Income Verification

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            if ((Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance") || DEPState != "TX")
            {
                PdfPTable Income_Last = new PdfPTable(15);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
                Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
                Income_Verified.FixedHeight = 15f;
                Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Income_Verified);

                if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
                {
                    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
                    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2Cheked);
                    //PdfPCell W2Cheked = new PdfPCell(new Phrase("R", Times_Check));
                    //W2Cheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    //W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2Cheked);
                }
                else
                {
                    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
                    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2UnCheked);

                    //PdfPCell W2UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    //W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(W2UnCheked);
                }

                PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
                W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
                W2Text.FixedHeight = 15f;
                W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(W2Text);

                if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
                {
                    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
                    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_Check);
                    //PdfPCell CHECK_STUB_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //CHECK_STUB_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_Check.FixedHeight = 15f;
                    //CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_Check);
                }
                else
                {
                    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
                    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_UnCheked);
                    //PdfPCell CHECK_STUB_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //CHECK_STUB_UnCheked.FixedHeight = 15f;
                    //CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(CHECK_STUB_UnCheked);
                }

                PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
                CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
                CHECK_STUB.FixedHeight = 15f;
                CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(CHECK_STUB);

                if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
                {
                    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
                    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_Check);
                    //PdfPCell LETTER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //LETTER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_Check.FixedHeight = 15f;
                    //LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_Check);
                }
                else
                {
                    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
                    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_UnCheked);
                    //PdfPCell LETTER_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //LETTER_UnCheked.FixedHeight = 15f;
                    //LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(LETTER_UnCheked);
                }

                PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
                LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
                LETTER.FixedHeight = 15f;
                LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(LETTER);

                if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
                {
                    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
                    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_Check);
                    //PdfPCell TAX_RETURN_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //TAX_RETURN_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_Check.FixedHeight = 15f;
                    //TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_Check);
                }
                else
                {
                    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
                    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_UnCheked);
                    //PdfPCell TAX_RETURN_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                    //TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //TAX_RETURN_UnCheked.FixedHeight = 15f;
                    //TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(TAX_RETURN_UnCheked);
                }

                PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
                TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
                TAX_RETURN.FixedHeight = 15f;
                TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(TAX_RETURN);

                if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
                {
                    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
                    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_Check);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("R", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }
                else
                {
                    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
                    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_UnCheked);
                    //PdfPCell OTHER_Check = new PdfPCell(new Phrase("Q", Times_Check));
                    //OTHER_Check.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //OTHER_Check.FixedHeight = 15f;
                    //OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(OTHER_Check);
                }

                PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
                OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
                OTHER.FixedHeight = 15f;
                OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(OTHER);

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }


                if (ShortName != "UETHDA")
                {
                    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    V_Space.Colspan = 15;
                    V_Space.FixedHeight = 15f;
                    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(V_Space);

                    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver.Colspan = 11;
                    P_Ver.FixedHeight = 15f;
                    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver);

                    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver1.Colspan = 2;
                    P_Ver1.FixedHeight = 15f;
                    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver1);

                    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Ver_Date_Space.FixedHeight = 15f;
                    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(Ver_Date_Space);

                    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //P_Ver2.Colspan = 4;
                    P_Ver2.FixedHeight = 15f;
                    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver2);

                    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Ver_Space.FixedHeight = 15f;
                    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Ver_Space);
                }
                document.Add(Income_Last);
            }
            else
            {
                PdfPTable Income_Last = new PdfPTable(5);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 25f, 20f, 13f, 30f, 100f };//80f, 50f, 40f, 90f, 80f 
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }

                PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                V_Space.FixedHeight = 15f;
                V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(V_Space);

                //if (ShortName != "UETHDA")
                //{
                //    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                //    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    V_Space.Colspan = 15;
                //    V_Space.FixedHeight = 15f;
                //    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(V_Space);

                //    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                //    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver.Colspan = 11;
                //    P_Ver.FixedHeight = 15f;
                //    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver);

                //    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                //    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver1.Colspan = 2;
                //    P_Ver1.FixedHeight = 15f;
                //    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver1);

                //    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                //    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //Ver_Date_Space.FixedHeight = 15f;
                //    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    //Income_Last.AddCell(Ver_Date_Space);

                //    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                //    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //P_Ver2.Colspan = 4;
                //    P_Ver2.FixedHeight = 15f;
                //    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver2);

                //    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                //    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Ver_Space.FixedHeight = 15f;
                //    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(Ver_Space);
                //}

                document.Add(Income_Last);
            }

            #endregion

            #region Comment Code Incomelast
            //PdfPTable Income_Last = new PdfPTable(15);
            //Income_Last.TotalWidth = 750f;
            //Income_Last.WidthPercentage = 100;
            //Income_Last.LockedWidth = true;
            //float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
            //Income_Last.SetWidths(Income_Lastwidths);
            //Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
            //Income_Last.SpacingBefore = 20f;


            //iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            //iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            //_image_UnChecked.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);


            //PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
            //Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
            //Income_Verified.FixedHeight = 15f;
            //Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Income_Verified);

            //if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
            //{
            //    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
            //    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2Cheked);
            //}
            //else
            //{
            //    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
            //    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(W2UnCheked);
            //}

            //PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
            //W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
            //W2Text.FixedHeight = 15f;
            //W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(W2Text);

            //if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
            //{
            //    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
            //    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_Check);
            //}
            //else
            //{
            //    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
            //    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(CHECK_STUB_UnCheked);
            //}

            //PdfPCell CHECK_STUB = new PdfPCell(new Phrase("Check Stub", Times));
            //CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
            //CHECK_STUB.FixedHeight = 15f;
            //CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(CHECK_STUB);

            //if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
            //    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_Check);
            //}
            //else
            //{
            //    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
            //    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(LETTER_UnCheked);
            //}

            //PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
            //LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
            //LETTER.FixedHeight = 15f;
            //LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(LETTER);

            //if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
            //{
            //    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
            //    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_Check);
            //}
            //else
            //{
            //    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
            //    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(TAX_RETURN_UnCheked);
            //}

            //PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
            //TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
            //TAX_RETURN.FixedHeight = 15f;
            //TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(TAX_RETURN);

            //if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
            //{
            //    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
            //    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
            //    //W2Cheked.FixedHeight = 15f;
            //    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_Check);
            //}
            //else
            //{
            //    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
            //    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
            //    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    //W2UnCheked.FixedHeight = 15f;
            //    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(OTHER_UnCheked);
            //}

            //PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
            //OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
            //OTHER.FixedHeight = 15f;
            //OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(OTHER);

            //PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
            //Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verification_Date.FixedHeight = 15f;
            //Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verification_Date);

            //if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
            //{
            //    PdfPCell Verify_Date = new PdfPCell(new Phrase(drCaseMST["MST_ELIG_DATE"].ToString().Trim(), Timesline));
            //    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date.FixedHeight = 15f;
            //    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date);
            //}
            //else
            //{
            //    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
            //    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verify_Date_Space.FixedHeight = 15f;
            //    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verify_Date_Space);
            //}

            //PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
            //Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
            //Verifier_Head.FixedHeight = 15f;
            //Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Verifier_Head);

            //string CaseWorker = null;
            //if (dtVerifier.Rows.Count > 0)
            //{
            //    foreach (DataRow drVerifier in dtVerifier.Rows)
            //    {
            //        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
            //        {
            //            CaseWorker = drVerifier["NAME"].ToString().Trim();
            //            break;
            //        }
            //    }
            //}

            //if (!string.IsNullOrEmpty(CaseWorker))
            //{
            //    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
            //    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier.FixedHeight = 15f;
            //    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier);
            //}
            //else
            //{
            //    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Verifier_Space.FixedHeight = 15f;
            //    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Income_Last.AddCell(Verifier_Space);
            //}


            //PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
            //V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //V_Space.Colspan = 15;
            //V_Space.FixedHeight = 15f;
            //V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(V_Space);

            //PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
            //P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
            //P_Ver.Colspan = 11;
            //P_Ver.FixedHeight = 15f;
            //P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver);

            //PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
            //P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
            //P_Ver1.Colspan = 2;
            //P_Ver1.FixedHeight = 15f;
            //P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver1);

            ////PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
            ////Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            ////Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            ////Ver_Date_Space.FixedHeight = 15f;
            ////Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            ////Income_Last.AddCell(Ver_Date_Space);

            //PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
            //P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
            ////P_Ver2.Colspan = 4;
            //P_Ver2.FixedHeight = 15f;
            //P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(P_Ver2);

            //PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
            //Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
            //Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //Ver_Space.FixedHeight = 15f;
            //Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Income_Last.AddCell(Ver_Space);

            //document.Add(Income_Last);

            #endregion


            #region Start of Energy Calculations
            PdfPTable Energy = new PdfPTable(3);
            Energy.TotalWidth = 750f;
            Energy.WidthPercentage = 100;
            Energy.LockedWidth = true;
            float[] Energy_widths = new float[] { 60, 60f, 60f };
            Energy.SetWidths(Energy_widths);
            Energy.HorizontalAlignment = Element.ALIGN_CENTER;
            Energy.SpacingBefore = 20f;

            if (Privileges.ModuleCode == "05" || DEPState == "TX")
            {
                PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
                Compute.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute.FixedHeight = 15f;
                Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute);

                PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
                Compute_Space.Colspan = 2;
                Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute_Space.FixedHeight = 15f;
                Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute_Space);

                PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: 0.00", Times));
                Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
                Utility_Costs.FixedHeight = 15f;
                Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Utility_Costs);

                PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
                Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
                Annual_Income.FixedHeight = 15f;
                Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Annual_Income);

                PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: 0.00", Times));
                Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
                Energy_Burden.FixedHeight = 15f;
                Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Energy_Burden);
            }

            #endregion

            #region  Start of the Services table for a applicant

            PdfPTable Services = new PdfPTable(2);
            Services.TotalWidth = 750f;
            Services.WidthPercentage = 100;
            Services.LockedWidth = true;
            float[] Services_widths = new float[] { 40f, 120f };
            Services.SetWidths(Services_widths);
            Services.HorizontalAlignment = Element.ALIGN_CENTER;
            Services.SpacingBefore = 20f;

            PdfPCell Services_Requested = new PdfPCell(new Phrase("Services Requested", TblFontBold));
            Services_Requested.Colspan = 2;
            Services_Requested.HorizontalAlignment = Element.ALIGN_LEFT;
            Services_Requested.FixedHeight = 15f;
            Services_Requested.BackgroundColor = BaseColor.LIGHT_GRAY;
            Services_Requested.Border = iTextSharp.text.Rectangle.BOX;
            Services.AddCell(Services_Requested);

            if (MSTSER_List.Count > 0)
            {
                foreach (CaseMSTSER Entity in MSTSER_List)
                {
                    PdfPCell SerVice_Code = new PdfPCell(new Phrase(Entity.Service.Trim(), Times));
                    SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_Code.FixedHeight = 15f;
                    SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_Code);
                    string Ser_Desc = null;
                    if (SerHie == "Y")
                    {
                        foreach (DataRow drCaseHie in dtCaseHie.Rows)
                        {
                            if (Entity.Service.Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && Entity.Service.Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && Entity.Service.Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
                            {
                                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (CAMASTList.Count > 0)
                        {
                            foreach (CAMASTEntity serEntity in CAMASTList)
                            {
                                if (serEntity.Code.Trim() == Entity.Service.Trim())
                                { Ser_Desc = serEntity.Desc.Trim(); break; }
                            }
                        }
                    }
                    PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
                    SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_DESC.FixedHeight = 15f;
                    SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_DESC);
                }
            }

            #endregion

            if (Privileges.ModuleCode == "05")
                document.Add(Energy);
            document.Add(Services);
            document.NewPage();

            #region Start the Custom Question table for an applicant

            PdfPTable Questions = new PdfPTable(3);
            Questions.TotalWidth = 750f;
            Questions.WidthPercentage = 100;
            Questions.LockedWidth = true;
            float[] Questions_widths = new float[] { 100f, 40f, 60f };
            Questions.SetWidths(Questions_widths);
            Questions.HorizontalAlignment = Element.ALIGN_CENTER;
            Questions.SpacingBefore = 30f;
            Questions.HeaderRows = 6;

            PdfPCell QueCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            QueCell.Colspan = 3;
            QueCell.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell.FixedHeight = 15f;
            QueCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell);

            PdfPCell QueCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            QueCell1.Colspan = 3;
            QueCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            QueCell1.FixedHeight = 15f;
            QueCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell1);

            PdfPCell QueCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            //QueCell0.Colspan = 2;
            QueCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell0.FixedHeight = 15f;
            QueCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell0);

            PdfPCell QueCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            QueCell2.Colspan = 2;
            QueCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            QueCell2.FixedHeight = 15f;
            QueCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell2);

            PdfPCell QueCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            //QueCell3.Colspan = 3;
            QueCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            QueCell3.FixedHeight = 15f;
            QueCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Questions.AddCell(QueCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }
            else
            {
                PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                QueCell4.Colspan = 2;
                QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                QueCell4.FixedHeight = 15f;
                QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Questions.AddCell(QueCell4);
            }

            PdfPCell Add_Ques_Header = new PdfPCell(new Phrase("Additional Intake Questions and Answers", TblFontBold));
            Add_Ques_Header.Colspan = 3;
            Add_Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Add_Ques_Header.FixedHeight = 15f;
            //Add_Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Add_Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Add_Ques_Header);

            PdfPCell Ques_Header = new PdfPCell(new Phrase("Question Description", TblFontBold));
            ////Ques_Header.Colspan = 3;
            Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Header.FixedHeight = 15f;
            Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Header);

            PdfPCell Ques_Member = new PdfPCell(new Phrase("Member", TblFontBold));
            Ques_Member.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Member.FixedHeight = 15f;
            Ques_Member.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Member.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Member);

            PdfPCell Ques_Response = new PdfPCell(new Phrase("Response", TblFontBold));
            Ques_Response.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Response.FixedHeight = 15f;
            Ques_Response.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Response.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Response);
            List<CustRespEntity> CustResp_List;
            if (ADDCUST_List.Count > 0)
            {
                foreach (AddCustEntity Entity in ADDCUST_List)
                {
                    string CustQues_Code = Entity.ACTCODE.Trim();
                    string CustQues_Desc = null;
                    string CustQues_Type = null;
                    string CustQuesResponse_Desc = null;
                    string Member_Desc = null;
                    if (custQues_List.Count > 0)
                    {
                        foreach (CustfldsEntity CustQues in custQues_List)
                        {
                            if (CustQues_Code.Trim() == CustQues.CustCode.Trim())
                            {
                                CustQues_Desc = CustQues.CustDesc.Trim();
                                CustQues_Type = CustQues.RespType.Trim();
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(CustQues_Type))
                        {
                            PdfPCell Ques_DESC = new PdfPCell(new Phrase(CustQues_Desc, TableFont));
                            Ques_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_DESC.FixedHeight = 15f;
                            Ques_DESC.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_DESC);

                            if (CustQues_Type.Trim() == "N")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim().Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else if (CustQues_Type.Trim() == "T")
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                        CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                    Member_Desc = "Member";
                                }
                            }
                            else if ((CustQues_Type.Trim() == "A" || CustQues_Type.Trim() == "X"))
                            {
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                        CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                    Member_Desc = "Member";
                                }
                            }
                            else
                            {
                                CustRespEntity Search_Entity = new CustRespEntity(true);
                                Search_Entity.ResoCode = CustQues_Code.Trim();
                                Search_Entity.ScrCode = "CASE2001";
                                //Search_Entity.RecType = Search_Entity.RespSeq = null;
                                //Search_Entity.RespDesc = Search_Entity.DescCode = Search_Entity.AddDate = Search_Entity.AddOpr = null;
                                //Search_Entity.ChgDate = Search_Entity.ChgOpr = Search_Entity.Changed = null;
                                CustResp_List = _model.FieldControls.Browse_CUSTRESP(Search_Entity, "Browse");
                                if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim().Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Applicant";
                                }
                                else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "HouseHold";
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                    {
                                        foreach (CustRespEntity CustEntity in CustResp_List)
                                        {
                                            if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                            {
                                                CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                break;
                                            }
                                        }
                                    }
                                    Member_Desc = "Member";
                                }
                            }

                            PdfPCell Ques_Mem_Name = new PdfPCell(new Phrase(Member_Desc, TableFont));
                            Ques_Mem_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                            Ques_Mem_Name.FixedHeight = 15f;
                            Ques_Mem_Name.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Ques_Mem_Name);

                            PdfPCell Resp_Desc = new PdfPCell(new Phrase(CustQuesResponse_Desc, TableFont));
                            Resp_Desc.HorizontalAlignment = Element.ALIGN_LEFT;
                            Resp_Desc.FixedHeight = 15f;
                            Resp_Desc.Border = iTextSharp.text.Rectangle.BOX;
                            Questions.AddCell(Resp_Desc);

                        }
                    }
                }
            }
            #endregion End of custom Questions Table


            document.Add(Questions);

            document.NewPage();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            #region Employment

            PdfPTable EmploymentDet = new PdfPTable(6);
            EmploymentDet.TotalWidth = 750f;
            EmploymentDet.WidthPercentage = 100;
            EmploymentDet.LockedWidth = true;
            float[] EmploymentDet_widths = new float[] { 20f, 40f, 1f, 8f, 1f, 10f };
            EmploymentDet.SetWidths(EmploymentDet_widths);
            EmploymentDet.HorizontalAlignment = Element.ALIGN_CENTER;
            EmploymentDet.SpacingBefore = 30f;

            PdfPTable Emergency = new PdfPTable(4);
            Emergency.TotalWidth = 750f;
            Emergency.WidthPercentage = 100;
            Emergency.LockedWidth = true;
            float[] Emergency_widths = new float[] { 55f, 50f, 40f, 50f };
            Emergency.SetWidths(Emergency_widths);
            Emergency.HorizontalAlignment = Element.ALIGN_CENTER;
            Emergency.SpacingBefore = 10f;

            PdfPCell EmpCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            EmpCell.Colspan = 6;
            EmpCell.HorizontalAlignment = Element.ALIGN_CENTER;
            EmpCell.FixedHeight = 15f;
            EmpCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell);

            PdfPCell EmpCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            EmpCell1.Colspan = 6;
            EmpCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            EmpCell1.FixedHeight = 15f;
            EmpCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell1);

            PdfPCell EmpCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            EmpCell0.Colspan = 2;
            EmpCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            EmpCell0.FixedHeight = 13f;
            EmpCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell0);

            PdfPCell EmpCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            EmpCell2.Colspan = 4;
            EmpCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            EmpCell2.FixedHeight = 13f;
            EmpCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell2);

            PdfPCell EmpCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            EmpCell3.Colspan = 2;
            EmpCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            EmpCell3.FixedHeight = 13f;
            EmpCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(EmpCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                EmpCell4.Colspan = 4;
                EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell4.FixedHeight = 13f;
                EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell4);
            }
            else
            {
                PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                EmpCell4.Colspan = 4;
                EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell4.FixedHeight = 13f;
                EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell4);
            }

            //if (Privileges.ModuleCode == "02" || Privileges.ModuleCode == "03")
            //{
            PdfPCell Computer = new PdfPCell(new Phrase("EMPLOYMENT INFORMATION", TblFontBold));
            Computer.HorizontalAlignment = Element.ALIGN_LEFT;
            Computer.Colspan = 2;
            Computer.FixedHeight = 15f;
            Computer.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Computer);

            PdfPCell Applicant = new PdfPCell(new Phrase("Applicant Name/ID", Times));
            Applicant.Colspan = 2;
            Applicant.HorizontalAlignment = Element.ALIGN_LEFT;
            Applicant.FixedHeight = 15f;
            Applicant.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Applicant);

            PdfPCell ApplicationName = new PdfPCell(new Phrase(BaseForm.BaseApplicationName, Timesline));
            ApplicationName.HorizontalAlignment = Element.ALIGN_LEFT;
            ApplicationName.Colspan = 2;
            ApplicationName.FixedHeight = 15f;
            ApplicationName.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(ApplicationName);

            PdfPCell Mother = new PdfPCell(new Phrase("Mother/Gurdian Employer Name", Times));
            Mother.HorizontalAlignment = Element.ALIGN_LEFT;
            Mother.FixedHeight = 15f;
            Mother.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Mother);

            if (!string.IsNullOrEmpty(MotherName.Trim()))
            {
                PdfPCell Mother_Line = new PdfPCell(new Phrase(MotherName, Timesline));
                Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother_Line.FixedHeight = 15f;
                Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother_Line);
            }
            else
            {
                PdfPCell Mother_Line = new PdfPCell(new Phrase("________________________________________", Times));
                Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother_Line.FixedHeight = 15f;
                Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother_Line);
            }

            if (M_FullPart == "F")
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);

            }
            else
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell FullTime = new PdfPCell(new Phrase("Full Time", Times));
            FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
            FullTime.FixedHeight = 15f;
            FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FullTime);

            if (M_FullPart == "P")
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell PartTime = new PdfPCell(new Phrase("Part Time", Times));
            PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
            PartTime.FixedHeight = 15f;
            PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(PartTime);


            PdfPCell MWork_Add = new PdfPCell(new Phrase("Work Address", Times));
            MWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
            //MWork_Add.Colspan = 2;
            MWork_Add.FixedHeight = 15f;
            MWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(MWork_Add);

            if (!string.IsNullOrEmpty(M_Address.Trim()))
            {
                PdfPCell MWork_Line = new PdfPCell(new Phrase(M_Address, Timesline));
                MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                MWork_Line.FixedHeight = 15f;
                MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Line);
            }
            else
            {
                PdfPCell MWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                MWork_Line.FixedHeight = 15f;
                MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Line);
            }

            PdfPCell MWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
            MWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
            MWork_Phone.Colspan = 2;
            MWork_Phone.FixedHeight = 15f;
            MWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(MWork_Phone);

            if (!string.IsNullOrEmpty(M_Phone.Trim()))
            {
                MaskedTextBox mskphn = new MaskedTextBox();
                mskphn.Mask = "(999)000-0000";
                mskphn.Text = M_Phone.Trim();

                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            else
            {
                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            PdfPCell Father = new PdfPCell(new Phrase("Father/Gurdian Employer Name", Times));
            Father.HorizontalAlignment = Element.ALIGN_LEFT;
            Father.FixedHeight = 15f;
            Father.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(Father);

            if (!string.IsNullOrEmpty(FatherName.Trim()))
            {
                PdfPCell Father_Line = new PdfPCell(new Phrase(FatherName, Timesline));
                Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Father_Line.FixedHeight = 15f;
                Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father_Line);
            }
            else
            {
                PdfPCell Father_Line = new PdfPCell(new Phrase("________________________________________", Times));
                Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Father_Line.FixedHeight = 15f;
                Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father_Line);
            }

            if (F_FullPart == "F")
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime_UnCheked);

                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell F_FullTime = new PdfPCell(new Phrase("Full Time", Times));
            F_FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
            F_FullTime.FixedHeight = 15f;
            F_FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(F_FullTime);

            if (F_FullPart == "P")
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("R", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }
            else
            {
                PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                //W2UnCheked.FixedHeight = 15f;
                PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime_UnCheked);
                //PdfPCell FullTime_UnCheked = new PdfPCell(new Phrase("Q", Times_Check));
                //FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                //FullTime_UnCheked.FixedHeight = 15f;
                //FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //EmploymentDet.AddCell(FullTime_UnCheked);
            }

            PdfPCell F_PartTime = new PdfPCell(new Phrase("Part Time", Times));
            F_PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
            F_PartTime.FixedHeight = 15f;
            F_PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(F_PartTime);


            PdfPCell FWork_Add = new PdfPCell(new Phrase("Work Address", Times));
            FWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
            //MWork_Add.Colspan = 2;
            FWork_Add.FixedHeight = 15f;
            FWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FWork_Add);

            if (!string.IsNullOrEmpty(F_Address.Trim()))
            {
                PdfPCell FWork_Line = new PdfPCell(new Phrase(F_Address, Timesline));
                FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                FWork_Line.FixedHeight = 15f;
                FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Line);
            }
            else
            {
                PdfPCell FWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Line.Colspan = 2;
                FWork_Line.FixedHeight = 15f;
                FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Line);
            }

            PdfPCell FWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
            FWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
            FWork_Phone.Colspan = 2;
            FWork_Phone.FixedHeight = 15f;
            FWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
            EmploymentDet.AddCell(FWork_Phone);

            if (!string.IsNullOrEmpty(F_Phone.Trim()))
            {
                MaskedTextBox mskphn = new MaskedTextBox();
                mskphn.Mask = "(999)000-0000";
                mskphn.Text = F_Phone.Trim();

                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }
            else
            {
                PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone_Line.Colspan = 2;
                MWork_Phone_Line.FixedHeight = 15f;
                MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone_Line);
            }



            PdfPCell Line = new PdfPCell(new Phrase("", Times));
            Line.HorizontalAlignment = Element.ALIGN_CENTER;
            Line.Colspan = 6;
            //Line.FixedHeight = 15f;
            Line.BorderWidthBottom = 2f;
            Line.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
            EmploymentDet.AddCell(Line);

            #endregion

            #region Emergency/Medical Data

            PdfPCell Emer_Head = new PdfPCell(new Phrase("Emergency/Medical Data", TblFontBold));
            Emer_Head.Colspan = 4;
            Emer_Head.HorizontalAlignment = Element.ALIGN_LEFT;
            Emer_Head.FixedHeight = 15f;
            Emer_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Emergency.AddCell(Emer_Head);

            if (chldEmemDetails.Count > 0)
            {
                int Em_Count = 0;

                PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Name.FixedHeight = 15f;
                Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Name);

                PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Relation.FixedHeight = 15f;
                Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Relation);

                PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Addr.FixedHeight = 15f;
                Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Addr);

                PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Phone.FixedHeight = 15f;
                Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Phone);

                foreach (ChldMstEMEMEntitty item in chldEmemDetails)
                {
                    //PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", Times));
                    //Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Name.FixedHeight = 15f;
                    //Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Name);
                    if (!string.IsNullOrEmpty(item.EMERName.Trim()))
                    {
                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase(item.EMERName, Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);
                    }

                    if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
                    {
                        string Rel_Desc = string.Empty;
                        if (AgyTabs_List.Count > 0)
                        {
                            AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
                            Rel_Desc = Rela.Code_Desc.Trim();
                        }

                        PdfPCell Emer_Rela = new PdfPCell(new Phrase(Rel_Desc, Times));
                        Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Rela.FixedHeight = 15f;
                        Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Rela);
                    }
                    else
                    {
                        PdfPCell Emer_Rela = new PdfPCell(new Phrase("________________", Times));
                        Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Rela.FixedHeight = 15f;
                        Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Rela);
                    }

                    //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                    //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Space.Colspan = 2;
                    //Emer_Space.FixedHeight = 15f;
                    //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Space);

                    //PdfPCell Emer_Address = new PdfPCell(new Phrase("Address", Times));
                    //Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Address.FixedHeight = 15f;
                    //Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Address);

                    if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
                    {
                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress1, Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);
                    }
                    //PdfPCell Emer_Tel = new PdfPCell(new Phrase("Telephone:", Times));
                    //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                    ////Emer_Space.Colspan = 2;
                    //Emer_Tel.FixedHeight = 15f;
                    //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel);
                    //string Emer_Phone = string.Empty;
                    //if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()) && item.EmerPhone1.Trim().Length == 10)
                    //    Emer_Phone = "(" + item.EmerPhone1.Substring(0, 3).Trim() + ") " + item.EmerPhone1.Substring(3, 3).Trim() + "-" + item.EmerPhone1.Substring(6, 4).Trim();
                    //else
                    //    Emer_Phone = item.EmerPhone1.Trim();

                    if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
                    {
                        MaskedComboBox mskemerphn = new MaskedComboBox();
                        mskemerphn.Mask = "(000)000-0000";
                        mskemerphn.Text = item.EmerPhone1;
                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Tel_Line.FixedHeight = 15f;
                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Tel_Line);
                    }
                    else
                    {
                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("________________", Times));
                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Tel_Line.FixedHeight = 15f;
                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Tel_Line);
                    }

                    if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()) || !string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                    {
                        PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Space.Colspan = 2;
                        Emer_Space.FixedHeight = 15f;
                        Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Space);

                        if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()))
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress2, Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(" ", Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                        {
                            MaskedComboBox mskemerphn = new MaskedComboBox();
                            mskemerphn.Mask = "(000)000-0000";
                            mskemerphn.Text = item.EmerPhone2;
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                    }

                    Em_Count++;
                    if (Em_Count == 2)
                        break;
                }
            }
            else
            {

                PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Name.FixedHeight = 15f;
                Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Name);

                PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Relation.FixedHeight = 15f;
                Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Relation);

                PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Addr.FixedHeight = 15f;
                Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Addr);

                PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Phone.FixedHeight = 15f;
                Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Phone);

                for (int i = 0; i < 2; i++)
                {
                    PdfPCell Emer_Name1 = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name1.FixedHeight = 15f;
                    Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name1);

                    PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name_Line.FixedHeight = 15f;
                    Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name_Line);

                    PdfPCell Emer_Address = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address.FixedHeight = 15f;
                    Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Address);

                    PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("______________________________", Times));
                    Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address_Line.FixedHeight = 15f;
                    Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Address_Line);

                    //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                    //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Space.Colspan = 2;
                    //Emer_Space.FixedHeight = 15f;
                    //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Space);

                    //PdfPCell Emer_Tel = new PdfPCell(new Phrase("", Times));
                    //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                    ////Emer_Space.Colspan = 2;
                    //Emer_Tel.FixedHeight = 15f;
                    //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel);

                    //PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                    //Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Emer_Tel_Line.FixedHeight = 15f;
                    //Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Emergency.AddCell(Emer_Tel_Line);
                }
            }

            PdfPCell Emer_Space1 = new PdfPCell(new Phrase("", Times));
            Emer_Space1.HorizontalAlignment = Element.ALIGN_LEFT;
            Emer_Space1.Colspan = 4;
            Emer_Space1.FixedHeight = 15f;
            Emer_Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Emergency.AddCell(Emer_Space1);

            if (chldMstDetails != null)
            {
                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.FixedHeight = 15f;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan);

                if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.FixedHeight = 15f;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_Plan_Line);
                }
                else
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.FixedHeight = 15f;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_Plan_Line);
                }

                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Med_No.FixedHeight = 15f;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No);

                if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }
                else
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }

                PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space.Colspan = 2;
                Chld_Ins_Catg.FixedHeight = 15f;
                Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg);

                if (!string.IsNullOrEmpty(chldMstDetails.InsCat.Trim()))
                {
                    string INS_CATG_DESC = string.Empty;
                    if (lookInsuranceCategory.Count > 0)
                    {
                        foreach (CommonEntity Ins in lookInsuranceCategory)
                        {
                            if (chldMstDetails.InsCat.Trim() == Ins.Code.Trim())
                            {
                                INS_CATG_DESC = Ins.Desc.Trim(); break;
                            }
                        }
                    }

                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(INS_CATG_DESC, Timesline));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.FixedHeight = 15f;
                    Chld_Med_No_Line.Colspan = 3;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }
                else
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_No_Line.Colspan = 3;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Med_No_Line);
                }


                PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor.FixedHeight = 15f;
                Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor);

                if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                {
                    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim() + ", " + chldMstDetails.DoctorAddress, Timesline));
                    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doctor_Line.FixedHeight = 15f;
                    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doctor_Line);
                }
                else
                {
                    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doctor_Line.FixedHeight = 15f;
                    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doctor_Line);
                }

                PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Doc_Phone.FixedHeight = 15f;
                Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone);

                if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();
                    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doc_Phone_Line.FixedHeight = 15f;
                    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doc_Phone_Line);
                }
                else
                {
                    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Doc_Phone_Line.FixedHeight = 15f;
                    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Doc_Phone_Line);
                }


                PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space2.Colspan = 4;
                Emer_Space2.FixedHeight = 10f;
                Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space2);

                PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan.FixedHeight = 15f;
                Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan);

                if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                {
                    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), Timesline));
                    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_Plan_Line.FixedHeight = 15f;
                    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_Plan_Line);
                }
                else
                {
                    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_Plan_Line.FixedHeight = 15f;
                    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_Plan_Line);
                }

                PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dent_No.FixedHeight = 15f;
                Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No);

                if (!string.IsNullOrEmpty(chldMstDetails.DentalInsurer.Trim()))
                {
                    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase(chldMstDetails.DentalInsurer.Trim(), Timesline));
                    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_No_Line.FixedHeight = 15f;
                    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_No_Line);
                }
                else
                {
                    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dent_No_Line.FixedHeight = 15f;
                    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dent_No_Line);
                }


                PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist.FixedHeight = 15f;
                Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist);
                if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                {
                    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim() + ", " + chldMstDetails.DentistAddress, Timesline));
                    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Line.FixedHeight = 15f;
                    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Line);
                }
                else
                {
                    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Line.FixedHeight = 15f;
                    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Line);
                }

                PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dentist_Phone.FixedHeight = 15f;
                Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone);

                if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DentistPhone.Trim();
                    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Phone_Line);
                }
                else
                {
                    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Chld_Dentist_Phone_Line);
                }

                PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space3.Colspan = 4;
                Emer_Space3.FixedHeight = 10f;
                Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space3);

                if (caseconddet != null)
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                    {
                        string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    else
                    {
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                    {
                        PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Timesline));
                        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITYLine.FixedHeight = 15f;
                        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITYLine);
                    }
                    else
                    {
                        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITYLine.FixedHeight = 15f;
                        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITYLine);
                    }

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                    {
                        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Timesline));
                        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITY_Date_Line.FixedHeight = 15f;
                        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITY_Date_Line);
                    }
                    else
                    {
                        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        DISABILITY_Date_Line.FixedHeight = 15f;
                        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(DISABILITY_Date_Line);
                    }


                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                    {
                        string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }
                    else
                    {
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                    {
                        string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                    {
                        string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                    HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    HH_Space.FixedHeight = 15f;
                    HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HH_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                    DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DEVL_Space.FixedHeight = 15f;
                    DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DEVL_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    {
                        string AltFund_Desc = string.Empty;
                        foreach (DataRow drFUND in dtFUND.Rows)
                        {
                            if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            {
                                AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                            }
                        }

                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    {
                        string Trans_Desc = string.Empty;
                        List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport(BaseForm.BaseAgencyControlDetails.AgyShortName);
                        foreach (CommonEntity agyEntity in lookClsTransport)
                        {
                            if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                            {
                                Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                            }
                        }
                        if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                        else
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_RIGHT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
                else
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIESLine.FixedHeight = 15f;
                    ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIESLine);

                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONSLine.FixedHeight = 15f;
                    MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONSLine);

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICALLine.FixedHeight = 15f;
                    MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICALLine);

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DIETLine.Colspan = 2;
                    DIETLine.FixedHeight = 15f;
                    DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIETLine);

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    DIET_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //HOUSEHOLDLine.Colspan = 2;
                    HOUSEHOLDLine.FixedHeight = 15f;
                    HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLDLine);

                    PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                    HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    HOUSEHOLD_Space.Colspan = 2;
                    HOUSEHOLD_Space.FixedHeight = 15f;
                    HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLD_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DevpLine.Colspan = 2;
                    DevpLine.FixedHeight = 15f;
                    DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DevpLine);

                    PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                    Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp_Space.Colspan = 2;
                    Devp_Space.FixedHeight = 15f;
                    Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    {
                        string AltFund_Desc = string.Empty;
                        foreach (DataRow drFUND in dtFUND.Rows)
                        {
                            if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                            {
                                AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                            }
                        }

                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    {
                        string Trans_Desc = string.Empty;
                        List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport(BaseForm.BaseAgencyControlDetails.AgyShortName);
                        foreach (CommonEntity agyEntity in lookClsTransport)
                        {
                            if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                            {
                                Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                            }
                        }

                        if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                        else
                        {
                            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                            AltFnddesc.FixedHeight = 15f;
                            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(AltFnddesc);
                        }
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }
                    else
                    {
                        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                        AltFnddesc.FixedHeight = 15f;
                        AltFnddesc.Colspan = 3;
                        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(AltFnddesc);
                    }

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    //Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
            }
            else
            {
                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.FixedHeight = 15f;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan);

                PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan_Line.FixedHeight = 15f;
                Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_Plan_Line);

                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Med_No.FixedHeight = 15f;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No);


                PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_No_Line.FixedHeight = 15f;
                Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Med_No_Line);

                PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space.Colspan = 2;
                Chld_Ins_Catg.FixedHeight = 15f;
                Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg);


                PdfPCell Chld_Ins_Catg_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Ins_Catg_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Ins_Catg_Line.FixedHeight = 15f;
                Chld_Ins_Catg_Line.Colspan = 3;
                Chld_Ins_Catg_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Ins_Catg_Line);

                PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor.FixedHeight = 15f;
                Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor);

                PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doctor_Line.FixedHeight = 15f;
                Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doctor_Line);

                PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Doc_Phone.FixedHeight = 15f;
                Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone);


                PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Doc_Phone_Line.FixedHeight = 15f;
                Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Doc_Phone_Line);

                PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space2.Colspan = 4;
                Emer_Space2.FixedHeight = 10f;
                Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space2);

                PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan.FixedHeight = 15f;
                Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan);

                PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_Plan_Line.FixedHeight = 15f;
                Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_Plan_Line);

                PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dent_No.FixedHeight = 15f;
                Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No);

                PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dent_No_Line.FixedHeight = 15f;
                Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dent_No_Line);

                PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist.FixedHeight = 15f;
                Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist);

                PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist_Line.FixedHeight = 15f;
                Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Line);

                PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //Emer_Space.Colspan = 2;
                Chld_Dentist_Phone.FixedHeight = 15f;
                Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone);

                PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Dentist_Phone_Line.FixedHeight = 15f;
                Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Chld_Dentist_Phone_Line);

                PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Space3.Colspan = 4;
                Emer_Space3.FixedHeight = 10f;
                Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Space3);

                if (caseconddet != null)
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                    {
                        string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    else
                    {
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        ALLERGIESLine.Colspan = 2;
                        ALLERGIESLine.FixedHeight = 15f;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(ALLERGIESLine);
                    }
                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                    {
                        string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }
                    else
                    {
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICATIONSLine.Colspan = 2;
                        MEDICATIONSLine.FixedHeight = 15f;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICATIONSLine);
                    }

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                    {
                        string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                    {
                        string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                    HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    HH_Space.FixedHeight = 15f;
                    HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HH_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                    {
                        string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }
                    else
                    {
                        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        MEDICALLine.Colspan = 2;
                        MEDICALLine.FixedHeight = 15f;
                        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(MEDICALLine);
                    }

                    PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                    DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICAL_Space.Colspan = 2;
                    DEVL_Space.FixedHeight = 15f;
                    DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DEVL_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    //if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                    //{
                    //    string AltFund_Desc = string.Empty;
                    //    foreach (DataRow drFUND in dtFUND.Rows)
                    //    {
                    //        if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                    //        {
                    //            AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                    //        }
                    //    }

                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnddesc.FixedHeight = 15f;
                    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnddesc);
                    //}

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);

                    //if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                    //{
                    //    string Trans_Desc = string.Empty;
                    //    List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                    //    foreach (CommonEntity agyEntity in lookClsTransport)
                    //    {
                    //        if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                    //        {
                    //            Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                    //        }
                    //    }

                    //    if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                    //    {
                    //        PdfPCell Trans1 = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                    //        Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //        Trans1.FixedHeight = 15f;
                    //        Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //        Emergency.AddCell(Trans1);
                    //    }
                    //    else
                    //    {
                    //        PdfPCell Trans1 = new PdfPCell(new Phrase("_____________________", Times));
                    //        Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //        Trans1.FixedHeight = 15f;
                    //        Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //        Emergency.AddCell(Trans1);
                    //    }
                    //}
                    //else
                    //{
                    PdfPCell Trans1 = new PdfPCell(new Phrase("_____________________", Times));
                    Trans1.HorizontalAlignment = Element.ALIGN_LEFT;
                    Trans1.FixedHeight = 15f;
                    Trans1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans1);
                    //}

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);

                    //if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                    //{
                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Colspan = 3;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell PickOff = new PdfPCell(new Phrase("_____________________________________________", Times));
                    PickOff.HorizontalAlignment = Element.ALIGN_LEFT;
                    PickOff.FixedHeight = 15f;
                    PickOff.Colspan = 3;
                    PickOff.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(PickOff);
                    //}

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);

                    //if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                    //{
                    //    PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                    //    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    //    AltFnddesc.FixedHeight = 15f;
                    //    AltFnddesc.Colspan = 3;
                    //    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Emergency.AddCell(AltFnddesc);
                    //}
                    //else
                    //{
                    PdfPCell DropOff = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DropOff.HorizontalAlignment = Element.ALIGN_LEFT;
                    DropOff.FixedHeight = 15f;
                    DropOff.Colspan = 3;
                    DropOff.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DropOff);
                    //}



                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    //Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
                else
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.FixedHeight = 15f;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES);

                    PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIESLine.FixedHeight = 15f;
                    ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIESLine);

                    PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                    ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES_Space.Colspan = 2;
                    ALLERGIES_Space.FixedHeight = 15f;
                    ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(ALLERGIES_Space);

                    PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                    DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY.FixedHeight = 15f;
                    DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY);

                    PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITYLine.FixedHeight = 15f;
                    DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITYLine);

                    PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                    DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    DISABILITY_Date.FixedHeight = 15f;
                    DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date);

                    PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    DISABILITY_Date_Line.FixedHeight = 15f;
                    DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DISABILITY_Date_Line);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS.FixedHeight = 15f;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS);

                    PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONSLine.FixedHeight = 15f;
                    MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONSLine);

                    PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                    MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONS_Space.Colspan = 2;
                    MEDICATIONS_Space.FixedHeight = 15f;
                    MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICATIONS_Space);

                    PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                    MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL.FixedHeight = 15f;
                    MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL);

                    PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICALLine.FixedHeight = 15f;
                    MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICALLine);

                    PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                    MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICAL_Space.Colspan = 2;
                    MEDICAL_Space.FixedHeight = 15f;
                    MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(MEDICAL_Space);

                    PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                    Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                    Diet.FixedHeight = 15f;
                    Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Diet);

                    PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DIETLine.Colspan = 2;
                    DIETLine.FixedHeight = 15f;
                    DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIETLine);

                    PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                    DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    DIET_Space.Colspan = 2;
                    DIET_Space.FixedHeight = 15f;
                    DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DIET_Space);

                    PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                    House.HorizontalAlignment = Element.ALIGN_LEFT;
                    House.FixedHeight = 15f;
                    House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(House);

                    PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //HOUSEHOLDLine.Colspan = 2;
                    HOUSEHOLDLine.FixedHeight = 15f;
                    HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLDLine);

                    PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                    HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    HOUSEHOLD_Space.Colspan = 2;
                    HOUSEHOLD_Space.FixedHeight = 15f;
                    HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(HOUSEHOLD_Space);

                    PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                    Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp.FixedHeight = 15f;
                    Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp);

                    PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                    DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //DevpLine.Colspan = 2;
                    DevpLine.FixedHeight = 15f;
                    DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(DevpLine);

                    PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                    Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Devp_Space.Colspan = 2;
                    Devp_Space.FixedHeight = 15f;
                    Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Devp_Space);

                    PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                    AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnd.FixedHeight = 15f;
                    AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnd);

                    PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                    AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                    AltFnddesc.FixedHeight = 15f;
                    AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(AltFnddesc);

                    PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                    Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Trans.FixedHeight = 15f;
                    Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans);


                    PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                    Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Trans_Space.FixedHeight = 15f;
                    Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Trans_Space);

                    PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                    Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                    Pick.FixedHeight = 15f;
                    Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Pick);


                    PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                    PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                    PickSpace.FixedHeight = 15f;
                    PickSpace.Colspan = 3;
                    PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(PickSpace);

                    PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                    Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                    Drop.FixedHeight = 15f;
                    Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Drop);


                    PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                    dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                    dropSpace.FixedHeight = 15f;
                    dropSpace.Colspan = 3;
                    dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(dropSpace);

                    PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                    Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Last_Space.Colspan = 4;
                    Last_Space.FixedHeight = 15f;
                    Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Last_Space);

                    PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                    Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature.FixedHeight = 15f;
                    Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature);

                    PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                    SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //SignatureLine.FixedHeight = 15f;
                    SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(SignatureLine);

                    PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                    Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //DISABILITY_Space.Colspan = 2;
                    //Signature_Date.FixedHeight = 15f;
                    Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date);

                    PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                    Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Signature_Date_Line.FixedHeight = 15f;
                    Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Signature_Date_Line);

                    PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                    Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                    Line_Last.Colspan = 6;
                    //Line_Last.FixedHeight = 15f;
                    Line_Last.BorderWidthBottom = 2f;
                    Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Emergency.AddCell(Line_Last);
                }
            }

            document.Add(EmploymentDet);
            document.Add(Emergency);

            //}
            #endregion

            PdfPTable Declartion = new PdfPTable(2);
            Declartion.TotalWidth = 750f;
            Declartion.WidthPercentage = 100;
            Declartion.LockedWidth = true;
            float[] Declartion_widths = new float[] { 80f, 40f };
            Declartion.SetWidths(Declartion_widths);
            Declartion.HorizontalAlignment = Element.ALIGN_CENTER;
            Declartion.SpacingBefore = 20f;

            if (Privileges.ModuleCode == "05")
            {
                PdfPCell Declartion_DESC = new PdfPCell(new Phrase("The information provided is true and correct to the best of my knowledge and belief. I am aware that I am subject to prosecution for providing false or fraudulent information. I understand I may request a hearing to appeal a denial of eligibility, amount of assistancereceived, or a delay of service delivery.", Times));
                Declartion_DESC.Colspan = 2;
                Declartion_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                //SerVice_DESC.FixedHeight = 15f;
                Declartion_DESC.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(Declartion_DESC);

                PdfPCell App_Sign = new PdfPCell(new Phrase("Applicant Signature: ______________________________________", Times));
                App_Sign.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Sign);

                PdfPCell App_Date = new PdfPCell(new Phrase("Date: ______________________", Times));
                App_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Date);

            }


            if (Privileges.ModuleCode == "05")
                document.Add(Declartion);

            if (!string.IsNullOrEmpty(Attention.Trim()))
            {
                document.NewPage();

                PdfPTable CTAttn = new PdfPTable(2);
                CTAttn.TotalWidth = 750f;
                CTAttn.WidthPercentage = 100;
                CTAttn.LockedWidth = true;
                float[] CTAttn_widths = new float[] { 80f, 40f };
                CTAttn.SetWidths(CTAttn_widths);
                CTAttn.HorizontalAlignment = Element.ALIGN_CENTER;
                CTAttn.SpacingBefore = 20f;

                PdfPCell S1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                S1.Colspan = 2;
                S1.HorizontalAlignment = Element.ALIGN_CENTER;
                S1.FixedHeight = 15f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S1);

                PdfPCell S2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                S2.Colspan = 2;
                S2.HorizontalAlignment = Element.ALIGN_CENTER;
                S2.FixedHeight = 15f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S2);

                PdfPCell S3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.FixedHeight = 15f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S3);

                PdfPCell S4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                S4.HorizontalAlignment = Element.ALIGN_RIGHT;
                S4.FixedHeight = 15f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S4);

                PdfPCell S5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.FixedHeight = 15f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }
                else
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }

                PdfPCell P1 = new PdfPCell(new Phrase("", Times));
                P1.Colspan = 2;
                P1.FixedHeight = 20f;
                P1.HorizontalAlignment = Element.ALIGN_LEFT;
                P1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(P1);


                PdfPCell A1 = new PdfPCell(new Phrase(Attention.Trim(), Times));
                A1.Colspan = 2;
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(A1);

                document.Add(CTAttn);

            }

            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion



        //#region CABA APP

        //private void On_SaveFormClosed_CABA()
        //{
        //    Random_Filename = null;

        //    PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
        //    PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
        //    try
        //    {
        //        if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
        //        { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
        //    }
        //    catch (Exception ex)
        //    {
        //        CommonFunctions.MessageBoxDisplay("Error");
        //    }


        //    try
        //    {
        //        string Tmpstr = PdfName + ".pdf";
        //        if (File.Exists(Tmpstr))
        //            File.Delete(Tmpstr);
        //    }
        //    catch (Exception ex)
        //    {
        //        int length = 8;
        //        string newFileName = System.Guid.NewGuid().ToString();
        //        newFileName = newFileName.Replace("-", string.Empty);

        //        Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
        //    }

        //    if (!string.IsNullOrEmpty(Random_Filename))
        //        PdfName = Random_Filename;
        //    else
        //        PdfName += ".pdf";

        //    FileStream fs = new FileStream(PdfName, FileMode.Create);

        //    Document document = new Document();
        //    document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
        //    PdfWriter writer = PdfWriter.GetInstance(document, fs);
        //    document.Open();
        //    BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
        //    BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
        //    iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
        //    BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

        //    iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
        //    iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
        //    iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
        //    iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
        //    iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
        //    iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
        //    cb = writer.DirectContent;

        //    //Agency Control Table
        //    string Attention = string.Empty;
        //    DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
        //    if (ds != null && ds.Tables[0].Rows.Count > 0)
        //        Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();

        //    //Mst Details Table
        //    DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
        //    DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

        //    //Snp details Table
        //    DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
        //    if (dsCaseSNP.Tables.Count > 0)
        //        dtCaseSNP = dsCaseSNP.Tables[0];

        //    //Casesite Table
        //    List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
        //    CaseSiteEntity Search_Site = new CaseSiteEntity(true);
        //    Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
        //    Search_Site.SiteROOM = "0000";
        //    SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");

        //    //Services Table
        //    List<CaseMSTSER> MSTSER_List = new List<CaseMSTSER>();
        //    CaseMSTSER Search_MSTSER = new CaseMSTSER(true);
        //    Search_MSTSER.Agency = BaseForm.BaseAgency; Search_MSTSER.Dept = BaseForm.BaseDept; Search_MSTSER.Program = BaseForm.BaseProg;
        //    Search_MSTSER.Year = BaseForm.BaseYear; Search_MSTSER.AppNo = BaseForm.BaseApplicationNo;
        //    MSTSER_List = _model.CaseMstData.Browse_MSTSER(Search_MSTSER, "Browse");

        //    //AddCust Table
        //    List<AddCustEntity> ADDCUST_List = new List<AddCustEntity>();
        //    AddCustEntity Search_AddCust = new AddCustEntity(true);
        //    Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
        //    Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
        //    ADDCUST_List = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

        //    //CUSTFLDS Table for custom Questions
        //    List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
        //    CustfldsEntity Search_CustQues = new CustfldsEntity(true);
        //    custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

        //    List<CustRespEntity> custResp_List = new List<CustRespEntity>();
        //    CustRespEntity Search_CustResp = new CustRespEntity(true);
        //    Search_CustResp.ScrCode = "CASE2001";
        //    custResp_List = _model.FieldControls.Browse_CUSTRESP(Search_CustResp, "Browse");

        //    //CaseHie Table
        //    DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
        //    DataTable dtCaseHie = dsCaseHie.Tables[0];

        //    //Getting CaseWorker
        //    DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
        //    DataTable dtVerifier = dsVerifier.Tables[0];

        //    //CaseIncome Table
        //    DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
        //    DataTable dtCaseIncome = dsCaseIncome.Tables[0];
        //    DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

        //    DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
        //    DataTable dtCasediff = dsCaseDiff.Tables[0];

        //    //CHLDMST Table
        //    ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

        //    //CHLDEMER TABLE
        //    List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
        //    CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

        //    AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
        //    searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
        //    List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);

        //    DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
        //    //DataTable dtrelation = Relations.Tables[0];
        //    List<CommonEntity> commonEntity = new List<CommonEntity>();
        //    if (Relations != null && Relations.Tables[0].Rows.Count > 0)
        //    {
        //        foreach (DataRow dr in Relations.Tables[0].Rows)
        //            commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
        //    }

        //    CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
        //    if (commonEntity.Count > 0)
        //    {
        //        MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
        //        FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
        //    }

        //    List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

        //    DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "A");
        //    DataTable dtFUND = dsFUND.Tables[0];

        //    cb.BeginText();
        //    X_Pos = 400; Y_Pos = 580;
        //    cb.SetFontAndSize(bf_helv, 13);
        //    //cb.SetColorFill(BaseColor.BLUE.Darker());
        //    string Header_Desc = string.Empty; string Form_Selection = string.Empty;

        //    //if (Privileges.ModuleCode == "03")
        //    //{
        //    string ShortName = string.Empty;
        //    string AgencyName = string.Empty; string SerHie = "N";
        //    if (ds != null && ds.Tables[0].Rows.Count > 0)
        //    {
        //        ShortName = ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
        //        if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
        //    }

        //    if (Privileges.ModuleCode != "05")
        //    {
        //        if (dtCaseHie.Rows.Count > 0)
        //        {
        //            foreach (DataRow drCasehie in dtCaseHie.Rows)
        //            {
        //                if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
        //                {
        //                    AgencyName = drCasehie["HIE_NAME"].ToString().Trim(); break;
        //                }
        //            }

        //            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " - INTAKE APPLICATION", X_Pos, Y_Pos - 25, 0);
        //            Header_Desc = ShortName + " - INTAKE APPLICATION";
        //            Form_Selection = AgencyName;//"Casemanagement Application";

        //            //cb.SetFontAndSize(bf_helv, 9);
        //            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 40, 0);
        //            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos-40, 0);

        //            cb.SetFontAndSize(bf_helv, 13);
        //            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);
        //        }
        //        cb.SetFontAndSize(bf_helv, 9);
        //        X_Pos = 30; Y_Pos -= 55;
        //    }
        //    else if (Privileges.ModuleCode == "05")
        //    {
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
        //        cb.SetFontAndSize(bf_helv, 9);
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
        //        string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
        //        Header_Desc = "Application For Assistance";
        //        //To dispalying the Programme Address
        //        if (SiteList.Count > 0)
        //        {
        //            //drCaseSite = dsCaseSite.Tables[0].Rows[0];

        //            if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
        //                SiteName = SiteList[0].SiteNAME.Trim();
        //            if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
        //                Site_street = "," + SiteList[0].SiteSTREET.Trim();
        //            if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
        //                Site_city = "," + SiteList[0].SiteCITY.Trim();
        //            if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
        //                Site_state = "," + SiteList[0].SiteSTATE.Trim();
        //            if (SiteList[0].SiteZIP.Trim() != "0")
        //                Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
        //        }
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

        //        //To Print the Verifier Name on Application
        //        string Intake_Worker = null;
        //        if (dtVerifier.Rows.Count > 0)
        //        {
        //            foreach (DataRow drVerifier in dtVerifier.Rows)
        //            {
        //                if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
        //                {
        //                    Intake_Worker = drVerifier["NAME"].ToString().Trim();
        //                    break;
        //                }
        //            }
        //        }
        //        if (!string.IsNullOrEmpty(Intake_Worker))
        //            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 26, 0);
        //        else
        //            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 26, 0);
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);

        //        cb.SetFontAndSize(bf_helv, 9);
        //        X_Pos = 30; Y_Pos -= 72;
        //    }

        //    #region Comment blocks
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 40, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 40, 0);

        //    //}
        //    //else if (Privileges.ModuleCode == "02")
        //    //{
        //    //    string ShortName = string.Empty;
        //    //    if (dtCaseHie.Rows.Count > 0)
        //    //    {
        //    //        foreach (DataRow drCasehie in dtCaseHie.Rows)
        //    //        {
        //    //            if (drCasehie["Code"].ToString() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
        //    //            {
        //    //                ShortName = drCasehie["HIE_SHORT_NAME"].ToString().Trim(); break;
        //    //            }
        //    //        }
        //    //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " – EARLY CARE & EDUCATION ", X_Pos, Y_Pos - 25, 0);
        //    //        Header_Desc = ShortName + " – EARLY CARE & EDUCATION ";

        //    //            Form_Selection = "CASE MANAGEMENT APPLICATION";

        //    //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);

        //    //    }

        //    //    cb.SetFontAndSize(bf_helv, 9);
        //    //    X_Pos = 30; Y_Pos -= 50;
        //    //}
        //    //else //if (Privileges.ModuleCode == "05" )
        //    //{
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
        //    //    cb.SetFontAndSize(bf_helv, 9);
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
        //    //    string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
        //    //    Header_Desc = "Application For Assistance";
        //    //    //To dispalying the Programme Address
        //    //    if (SiteList.Count > 0)
        //    //    {
        //    //        //drCaseSite = dsCaseSite.Tables[0].Rows[0];

        //    //        if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
        //    //            SiteName = SiteList[0].SiteNAME.Trim();
        //    //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
        //    //            Site_street = "," + SiteList[0].SiteSTREET.Trim();
        //    //        if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
        //    //            Site_city = "," + SiteList[0].SiteCITY.Trim();
        //    //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
        //    //            Site_state = "," + SiteList[0].SiteSTATE.Trim();
        //    //        if (SiteList[0].SiteZIP.Trim() != "0")
        //    //            Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
        //    //    }
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

        //    //    //To Print the Verifier Name on Application
        //    //    string Intake_Worker = null;
        //    //    if (dtVerifier.Rows.Count > 0)
        //    //    {
        //    //        foreach (DataRow drVerifier in dtVerifier.Rows)
        //    //        {
        //    //            if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
        //    //            {
        //    //                Intake_Worker = drVerifier["NAME"].ToString().Trim();
        //    //                break;
        //    //            }
        //    //        }
        //    //    }
        //    //    if (!string.IsNullOrEmpty(Intake_Worker))
        //    //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 26, 0);
        //    //    else
        //    //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 26, 0);
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);
        //    //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);
        //    //    cb.SetFontAndSize(bf_helv, 9);
        //    //    X_Pos = 30; Y_Pos -= 72;
        //    //}

        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //X_Pos = 30; Y_Pos -= 72;



        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date: ", 740, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Timesline), 780, Y_Pos, 0);

        //    ////Y_Pos -= 13;
        //    #endregion

        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), X_Pos + 72, Y_Pos, 0);

        //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 700, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToString("g"), Timesline), 780, Y_Pos, 0);

        //    Y_Pos -= 15;
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

        //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 720, Y_Pos, 0);
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);
        //    else
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("____________", Times), 780, Y_Pos, 0);

        //    Y_Pos -= 13;
        //    if (Privileges.ModuleCode == "05")
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a citizen or naturalized Alien?", X_Pos, Y_Pos, 0);
        //    else
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommdation or special help to complete this application?", X_Pos, Y_Pos, 0);

        //    /************************************CheckBoxes****************************/
        //    iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
        //    PdfAppearance[] onOff = new PdfAppearance[2];
        //    onOff[0] = cb.CreateAppearance(20, 20);
        //    onOff[0].Rectangle(1, 20, 1, 20);
        //    onOff[0].Rectangle(18, 18, 1, 1);
        //    onOff[0].Stroke();
        //    onOff[1] = cb.CreateAppearance(20, 20);
        //    onOff[1].SetRGBColorFill(255, 128, 128);
        //    onOff[1].Rectangle(18, 18, 1, 1);
        //    onOff[1].FillStroke();
        //    onOff[1].MoveTo(1, 1);
        //    onOff[1].LineTo(19, 19);
        //    onOff[1].MoveTo(1, 19);
        //    onOff[1].LineTo(19, 1);

        //    RadioCheckField checkbox;
        //    PdfFormField SField;
        //    if (Privileges.ModuleCode == "05")
        //    {
        //        string SnpResident = string.Empty;
        //        foreach (DataRow drsnp in dtCaseSNP.Rows)
        //        {
        //            if (drsnp["SNP_FAMILY_SEQ"].ToString() == drCaseMST["MST_FAMILY_SEQ"].ToString())
        //            {
        //                SnpResident = drsnp["SNP_RESIDENT"].ToString().Trim();
        //            }
        //        }


        //        rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
        //        //rect.Rotate();
        //        checkbox = new RadioCheckField(writer, rect, "Yes", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        if (SnpResident == "D") checkbox.Checked = true;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 200, Y_Pos, 0);
        //        rect = new iTextSharp.text.Rectangle(220, Y_Pos + 8, 228, Y_Pos);
        //        checkbox = new RadioCheckField(writer, rect, "No", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        if (SnpResident == "E" || SnpResident == "C") checkbox.Checked = true;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 230, Y_Pos, 0);

        //        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If no, are you a qualified Alien? ", 320, Y_Pos, 0);

        //        rect = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
        //        //rect.Rotate();
        //        checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        if (SnpResident == "E") checkbox.Checked = true;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 460, Y_Pos, 0);
        //        rect = new iTextSharp.text.Rectangle(480, Y_Pos + 8, 488, Y_Pos);
        //        checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        if (SnpResident == "D" || SnpResident == "C") checkbox.Checked = true;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 490, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
        //        //rect.Rotate();
        //        checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
        //        rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
        //        checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
        //        checkbox.BorderColor = new GrayColor(0.3f);
        //        checkbox.Rotation = 90;
        //        SField = checkbox.CheckField;
        //        writer.AddAnnotation(SField);
        //        ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);
        //    }
        //    X_Pos = 30; Y_Pos -= 13;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);
        //    //string Zip = string.Empty;
        //    //if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()))
        //    //    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
        //    string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
        //    string Zip = string.Empty;
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
        //        Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
        //        Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
        //        Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
        //        Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
        //        HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
        //        Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

        //    string Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);

        //    string Language = null;
        //    DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
        //    DataTable dtLang = dsLang.Tables[0];
        //    foreach (DataRow drLang in dtLang.Rows)
        //    {
        //        if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
        //        {
        //            Language = drLang["LookUpDesc"].ToString().Trim(); break;
        //        }
        //    }

        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 380, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 450, Y_Pos, 0);
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
        //    {
        //        DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
        //        DataRow drSITE = dsSITE.Tables[0].Rows[0];
        //        string Site_Name = null;
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
        //        Site_Name = drSITE["SiteName"].ToString().Trim();
        //        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
        //        cb.SetLineWidth(0.5f);
        //        //cb.SetLineCap(5);
        //        cb.MoveTo(650, Y_Pos - 2);
        //        cb.LineTo(705, Y_Pos - 2);
        //        cb.Stroke();
        //    }
        //    Y_Pos -= 13;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
        //    string House_NO = null, Street1 = null, city = null, state = null, zip = null; string DSuffix = string.Empty;
        //    if (dtCasediff.Rows.Count > 0)
        //    {
        //        foreach (DataRow drCaseDiff in dtCasediff.Rows)
        //        {
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
        //                House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
        //                DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
        //                Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
        //                city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
        //                state = drCaseDiff["DIFF_STATE"].ToString().Trim();
        //            if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
        //                zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
        //            if (zip == "00000") zip = ""; else zip = ", " + zip;
        //        }
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1 + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        //cb.SetLineWidth(0.5f);
        //        ////cb.SetLineCap(5);
        //        //cb.MoveTo(X_Pos + 72, Y_Pos);
        //        //cb.LineTo(210, Y_Pos);
        //        //cb.Stroke();
        //        //string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
        //        //string Zip = string.Empty;
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
        //            Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
        //            Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
        //            Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
        //            Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
        //            HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
        //        if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
        //            Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

        //        Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;

        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
        //    }


        //    if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
        //    {
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email : ", Times), 380, Y_Pos, 0);
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 410, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 380, Y_Pos, 0);
        //        cb.SetLineWidth(0.5f);
        //        //cb.SetLineCap(5);
        //        cb.MoveTo(410, Y_Pos);
        //        cb.LineTo(520, Y_Pos);
        //        cb.Stroke();
        //    }
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone ", 640, Y_Pos, 0);
        //    MaskedTextBox mskPhn = new MaskedTextBox();
        //    mskPhn.Mask = "(000)000-0000";
        //    mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);
        //    Y_Pos -= 13;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
        //    //string House_NO = null, Street = null, city = null, state = null, zip = null;
        //    //if (dtCasediff.Rows.Count > 0)
        //    //{
        //    //    foreach (DataRow drCaseDiff in dtCasediff.Rows)
        //    //    {
        //    //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
        //    //            House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
        //    //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
        //    //            Street = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
        //    //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
        //    //            city = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
        //    //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
        //    //            state = drCaseDiff["DIFF_STATE"].ToString().Trim() + ",";
        //    //        zip = drCaseDiff["DIFF_ZIP"].ToString().Trim();
        //    //    }
        //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
        //    //}
        //    //else
        //    //{
        //    //    //cb.SetLineWidth(0.5f);
        //    //    ////cb.SetLineCap(5);
        //    //    //cb.MoveTo(X_Pos + 72, Y_Pos);
        //    //    //cb.LineTo(210, Y_Pos);
        //    //    //cb.Stroke();
        //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
        //    //}
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Message Number", 380, Y_Pos, 0);
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
        //    {
        //        MaskedTextBox mskMessage = new MaskedTextBox();
        //        mskMessage.Mask = "(000)000-0000";
        //        mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 450, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        cb.SetLineWidth(0.5f);
        //        //cb.SetLineCap(5);
        //        cb.MoveTo(450, Y_Pos);
        //        cb.LineTo(505, Y_Pos);
        //        cb.Stroke();
        //    }

        //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Number", 640, Y_Pos, 0);
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
        //    {
        //        MaskedTextBox mskCell = new MaskedTextBox();
        //        mskCell.Mask = "(000)000-0000";
        //        mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 650, Y_Pos, 0);
        //    }
        //    else
        //    {
        //        cb.SetLineWidth(0.5f);
        //        //cb.SetLineCap(5);
        //        cb.MoveTo(650, Y_Pos - 3);
        //        cb.LineTo(705, Y_Pos - 3);
        //        cb.Stroke();
        //    }

        //    //Y_Pos -= 13;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Message Number", 640, Y_Pos, 0);
        //    //if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
        //    //{
        //    //    MaskedTextBox mskMessage = new MaskedTextBox();
        //    //    mskMessage.Mask = "(000) 000-0000";
        //    //    mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
        //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
        //    //}
        //    //else
        //    //{
        //    //    cb.SetLineWidth(0.5f);
        //    //    //cb.SetLineCap(5);
        //    //    cb.MoveTo(650, Y_Pos - 3);
        //    //    cb.LineTo(705, Y_Pos - 3);
        //    //    cb.Stroke();
        //    //}

        //    Y_Pos -= 8;
        //    SetLine();
        //    Y_Pos -= 20;
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Housing Situation", X_Pos, Y_Pos, 0);
        //    DataSet dsHouseMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
        //    string strMainData = dsHouseMain.Tables[0].Rows[0]["Agy_9"].ToString();
        //    string CodeColSubscript = string.Empty, DescColSubscript = string.Empty;
        //    if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
        //        CodeColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
        //    if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
        //        DescColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();


        //    //DataSet dsHousing = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.HOUSINGTYPES);
        //    DataSet dsHousing = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.HOUSINGTYPES);
        //    DataTable dtHousing = dsHousing.Tables[0];
        //    PdfFormField Field;
        //    X_Pos = 140;
        //    string CheckTitle = string.Empty;
        //    foreach (DataRow drHousing in dtHousing.Rows)
        //    {
        //        if (drHousing["AGY_ACTIVE"].ToString() == "Y" ||
        //            (drHousing["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_HOUSING"].ToString().Trim()) && drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim()))
        //        {
        //            rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //            checkbox = new RadioCheckField(writer, rect, drHousing[DescColSubscript].ToString().Trim(), "On");
        //            checkbox.BorderColor = new GrayColor(0.3f);
        //            checkbox.Rotation = 90;
        //            if (drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim())
        //                checkbox.Checked = true;
        //            Field = checkbox.CheckField;
        //            writer.AddAnnotation(Field);
        //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHousing[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //            X_Pos += 90;
        //            if (X_Pos > 600)
        //            {
        //                X_Pos = 140;
        //                Y_Pos -= 13;
        //            }
        //        }
        //    }

        //    Y_Pos -= 25; X_Pos = 30;
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Family Type", X_Pos, Y_Pos, 0);
        //    X_Pos = 140;

        //    DataSet dsFamilyMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
        //    strMainData = dsFamilyMain.Tables[0].Rows[0]["Agy_9"].ToString();
        //    CodeColSubscript = string.Empty; DescColSubscript = string.Empty;
        //    if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
        //        CodeColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
        //    if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
        //        DescColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();

        //    //DataSet dsFamilyType = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.FAMILYTYPE);
        //    DataSet dsFamilyType = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.FAMILYTYPE);
        //    DataTable dtFamilyType = dsFamilyType.Tables[0];
        //    foreach (DataRow drFamilyType in dtFamilyType.Rows)
        //    {
        //        if (drFamilyType["AGY_ACTIVE"].ToString() == "Y" ||
        //            (drFamilyType["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_FAMILY_TYPE"].ToString().Trim()) && drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim()))
        //        {
        //            rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //            checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType[DescColSubscript].ToString().Trim(), "On");
        //            checkbox.BorderColor = new GrayColor(0.3f);
        //            checkbox.Rotation = 90;
        //            if (drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim())
        //                checkbox.Checked = true;
        //            Field = checkbox.CheckField;
        //            writer.AddAnnotation(Field);
        //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFamilyType[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //            X_Pos += 130;
        //            if (X_Pos > 600)
        //            {
        //                Y_Pos -= 13;
        //                X_Pos = 140;
        //            }

        //        }
        //    }

        //    Y_Pos -= 25; X_Pos = 30;
        //    int Count = dtCaseSNP.Rows.Count;
        //    int Adults = 0, Child = 0, under5 = 0;
        //    foreach (DataRow drsnp in dtCaseSNP.Rows)
        //    {
        //        if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
        //        {
        //            if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
        //                Adults++;
        //            else
        //                Child++;
        //            if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
        //                under5++;
        //        }
        //    }
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 123, Y_Pos, 0);
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Adults: ", 210, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Adults.ToString(), Timesline), 260, Y_Pos, 0);
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children: ", 310, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Child.ToString(), Timesline), 370, Y_Pos, 0);
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children under 5: ", 420, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(under5.ToString(), Timesline), 508, Y_Pos, 0);
        //    cb.EndText();

        //    //Temp table not displayed on the screen
        //    PdfPTable head = new PdfPTable(1);
        //    head.HorizontalAlignment = Element.ALIGN_CENTER;
        //    head.TotalWidth = 50f;
        //    PdfPCell headcell = new PdfPCell(new Phrase(""));
        //    headcell.HorizontalAlignment = Element.ALIGN_CENTER;
        //    headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    head.AddCell(headcell);

        //    #region To Print SNP Details in the Table

        //    PdfPTable Snp_Table = new PdfPTable(13);
        //    Snp_Table.TotalWidth = 765f;
        //    Snp_Table.WidthPercentage = 100;
        //    Snp_Table.LockedWidth = true;
        //    float[] widths = new float[] { 55f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 35f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
        //    Snp_Table.SetWidths(widths);
        //    Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Snp_Table.SpacingBefore = 270f;

        //    PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
        //    Header.Colspan = 15;
        //    Header.FixedHeight = 15f;
        //    Header.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Header.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(Header);

        //    PdfPCell row2 = new PdfPCell(new Phrase(""));
        //    row2.Colspan = 9;
        //    row2.FixedHeight = 15f;
        //    row2.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row2);

        //    PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
        //    row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row2_Health.FixedHeight = 15f;
        //    row2_Health.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row2_Health);

        //    PdfPCell row2_Space = new PdfPCell(new Phrase(""));
        //    row2_Space.Colspan = 3;
        //    row2_Space.FixedHeight = 15f;
        //    row2_Space.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row2_Space);

        //    PdfPCell row3 = new PdfPCell(new Phrase(""));
        //    row3.Colspan = 2;
        //    row3.FixedHeight = 15f;
        //    row3.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3);

        //    PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
        //    row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_SSN.FixedHeight = 15f;
        //    row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
        //    Snp_Table.AddCell(row3_SSN);

        //    PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
        //    row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Birth.FixedHeight = 15f;
        //    row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Birth);

        //    PdfPCell row3_Space = new PdfPCell(new Phrase(""));
        //    //row3_Space.Colspan = 2;
        //    row3_Space.FixedHeight = 15f;
        //    row3_Space.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Space);

        //    PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
        //    row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Sex.FixedHeight = 15f;
        //    row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Sex);

        //    PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
        //    row3_Space2.Colspan = 3;
        //    row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Space2.FixedHeight = 15f;
        //    row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Space2);

        //    PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
        //    row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Insurance.FixedHeight = 15f;
        //    row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Insurance);

        //    PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
        //    row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Veteran.FixedHeight = 15f;
        //    row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Veteran);

        //    PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("Receive FS", TableFontBoldItalic));
        //    row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Receive_FS.FixedHeight = 15f;
        //    row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Receive_FS);

        //    PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
        //    row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
        //    row3_Space3.FixedHeight = 15f;
        //    row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
        //    Snp_Table.AddCell(row3_Space3);

        //    string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yyyy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
        //    for (int i = 0; i < col.Length; ++i)
        //    {
        //        PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
        //        cell.HorizontalAlignment = Element.ALIGN_CENTER;
        //        cell.FixedHeight = 15f;
        //        if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
        //        else cell.Border = iTextSharp.text.Rectangle.BOX;
        //        Snp_Table.AddCell(cell);
        //    }

        //    int Tbl_Count = 0; string FamSeq = string.Empty;
        //    List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
        //    foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
        //    {
        //        if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
        //        {
        //            FamSeq = entity.FamilySeq.Trim();
        //            string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
        //            PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
        //            Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Name.FixedHeight = 15f;
        //            Name.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Name);

        //            string Relation = null;
        //            DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
        //            DataTable dtRelation = dsRelation.Tables[0];
        //            foreach (DataRow drRelation in dtRelation.Rows)
        //            {
        //                if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
        //                {
        //                    Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
        //            RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
        //            RelationShip.FixedHeight = 15f;
        //            RelationShip.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(RelationShip);
        //            string SSNNum = null;
        //            if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
        //                //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
        //                SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
        //            PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
        //            SSN.HorizontalAlignment = Element.ALIGN_CENTER;
        //            SSN.FixedHeight = 15f;
        //            SSN.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(SSN);

        //            string DOB = string.Empty;
        //            if (!string.IsNullOrEmpty(entity.AltBdate))
        //            {
        //                DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
        //            }
        //            PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
        //            BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
        //            BirthDate.FixedHeight = 15f;
        //            BirthDate.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(BirthDate);

        //            if (entity.Age.Trim() != "0")
        //            {
        //                PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
        //                Age.HorizontalAlignment = Element.ALIGN_CENTER;
        //                Age.FixedHeight = 15f;
        //                Age.Border = iTextSharp.text.Rectangle.BOX;
        //                Snp_Table.AddCell(Age);
        //            }
        //            else
        //            {
        //                PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
        //                Age.HorizontalAlignment = Element.ALIGN_CENTER;
        //                Age.FixedHeight = 15f;
        //                Age.Border = iTextSharp.text.Rectangle.BOX;
        //                Snp_Table.AddCell(Age);
        //            }

        //            PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
        //            Sex.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Sex.FixedHeight = 15f;
        //            Sex.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Sex);

        //            string Etinic = null;
        //            DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
        //            DataTable dtEtinic = dsEtinic.Tables[0];
        //            foreach (DataRow drEtinic in dtEtinic.Rows)
        //            {
        //                if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
        //                {
        //                    Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
        //            Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Ethnic.FixedHeight = 15f;
        //            Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Ethnic);

        //            string Race = null;
        //            DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
        //            DataTable dtRace = dsRace.Tables[0];
        //            foreach (DataRow drRace in dtRace.Rows)
        //            {
        //                if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
        //                {
        //                    Race = drRace["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
        //            Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Race.FixedHeight = 15f;
        //            Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Race);

        //            string Education = null;
        //            DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
        //            DataTable dtEducation = dsEducation.Tables[0];
        //            foreach (DataRow drEducation in dtEducation.Rows)
        //            {
        //                if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
        //                {
        //                    Education = drEducation["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
        //            Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Education.FixedHeight = 15f;
        //            Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Education);

        //            PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
        //            Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Insurance.FixedHeight = 15f;
        //            Insurance.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Insurance);

        //            PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
        //            Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Vetran.FixedHeight = 15f;
        //            Vetran.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Vetran);

        //            PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
        //            FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
        //            FoodStamps1.FixedHeight = 15f;
        //            FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(FoodStamps1);

        //            string AGYDisable = null;
        //            DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
        //            DataTable dtDisable = dsDisable.Tables[0];
        //            foreach (DataRow drDisable in dtDisable.Rows)
        //            {
        //                if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
        //                    AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
        //            }
        //            PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
        //            Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Disabled.FixedHeight = 15f;
        //            Disabled.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Disabled);
        //        }
        //    }

        //    string MotherName = string.Empty; string FatherName = string.Empty;
        //    string M_Address = string.Empty; string F_Address = string.Empty;
        //    string M_Phone = string.Empty; string F_Phone = string.Empty;
        //    string M_FullPart = string.Empty; string F_FullPart = string.Empty;
        //    foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
        //    {
        //        if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
        //        {
        //            if (MotherEntity != null)
        //            {
        //                if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
        //                {
        //                    MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
        //                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
        //                        M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
        //                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
        //                        M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
        //                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
        //                        M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
        //                    if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
        //                        M_FullPart = "F";
        //                    else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
        //                        M_FullPart = "P";
        //                }
        //            }

        //            if (FatherEntity.Count > 0)
        //            {
        //                foreach (CommonEntity cm in FatherEntity)
        //                {
        //                    if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
        //                    {
        //                        FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
        //                        if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
        //                            F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
        //                        if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
        //                            F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
        //                        if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
        //                            F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
        //                        if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
        //                            F_FullPart = "F";
        //                        else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
        //                            F_FullPart = "P";
        //                        break;
        //                    }
        //                }
        //            }

        //            string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
        //            PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
        //            Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Name.FixedHeight = 15f;
        //            Name.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Name);

        //            string Relation = null;
        //            DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
        //            DataTable dtRelation = dsRelation.Tables[0];
        //            foreach (DataRow drRelation in dtRelation.Rows)
        //            {
        //                if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
        //                {
        //                    Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
        //            RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
        //            RelationShip.FixedHeight = 15f;
        //            RelationShip.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(RelationShip);
        //            string SSNNum = null;
        //            if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
        //                SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
        //            PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
        //            SSN.HorizontalAlignment = Element.ALIGN_CENTER;
        //            SSN.FixedHeight = 15f;
        //            SSN.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(SSN);

        //            string DOB = string.Empty;
        //            if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
        //            {
        //                DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
        //            }
        //            PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
        //            BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
        //            BirthDate.FixedHeight = 15f;
        //            BirthDate.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(BirthDate);

        //            if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
        //            {
        //                PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
        //                Age.HorizontalAlignment = Element.ALIGN_CENTER;
        //                Age.FixedHeight = 15f;
        //                Age.Border = iTextSharp.text.Rectangle.BOX;
        //                Snp_Table.AddCell(Age);
        //            }
        //            else
        //            {
        //                PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
        //                Age.HorizontalAlignment = Element.ALIGN_CENTER;
        //                Age.FixedHeight = 15f;
        //                Age.Border = iTextSharp.text.Rectangle.BOX;
        //                Snp_Table.AddCell(Age);
        //            }

        //            PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
        //            Sex.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Sex.FixedHeight = 15f;
        //            Sex.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Sex);

        //            string Etinic = null;
        //            DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
        //            DataTable dtEtinic = dsEtinic.Tables[0];
        //            foreach (DataRow drEtinic in dtEtinic.Rows)
        //            {
        //                if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
        //                {
        //                    Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
        //            Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Ethnic.FixedHeight = 15f;
        //            Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Ethnic);

        //            string Race = null;
        //            DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
        //            DataTable dtRace = dsRace.Tables[0];
        //            foreach (DataRow drRace in dtRace.Rows)
        //            {
        //                if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
        //                {
        //                    Race = drRace["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
        //            Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Race.FixedHeight = 15f;
        //            Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Race);

        //            string Education = null;
        //            DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
        //            DataTable dtEducation = dsEducation.Tables[0];
        //            foreach (DataRow drEducation in dtEducation.Rows)
        //            {
        //                if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
        //                {
        //                    Education = drEducation["LookUpDesc"].ToString().Trim(); break;
        //                }
        //            }
        //            PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
        //            Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Snp_Education.FixedHeight = 15f;
        //            Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Snp_Education);

        //            PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
        //            Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Insurance.FixedHeight = 15f;
        //            Insurance.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Insurance);

        //            PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
        //            Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Vetran.FixedHeight = 15f;
        //            Vetran.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Vetran);

        //            PdfPCell FoodStamps1 = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
        //            FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
        //            FoodStamps1.FixedHeight = 15f;
        //            FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(FoodStamps1);

        //            string AGYDisable = null;
        //            DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
        //            DataTable dtDisable = dsDisable.Tables[0];
        //            foreach (DataRow drDisable in dtDisable.Rows)
        //            {
        //                if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
        //                    AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
        //            }
        //            PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
        //            Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Disabled.FixedHeight = 15f;
        //            Disabled.Border = iTextSharp.text.Rectangle.BOX;
        //            Snp_Table.AddCell(Disabled);

        //            Tbl_Count++;
        //            if (Tbl_Count > 10)
        //                break;
        //        }
        //    }
        //    int Len_Var = 130 - Tbl_Count * 13;
        //    for (int j = 0; j <= Len_Var; ++j)  //120
        //    {
        //        PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
        //        SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
        //        SpaceCell.FixedHeight = 15f;
        //        SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
        //        Snp_Table.AddCell(SpaceCell);
        //    }

        //    #endregion

        //    document.Add(head);
        //    document.Add(Snp_Table);
        //    document.NewPage();

        //    //End Of SNP details Table

        //    //cb.BeginText();
        //    //X_Pos = 400; Y_Pos = 580;
        //    //cb.SetFontAndSize(bf_helv, 13);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

        //    //cb.SetFontAndSize(bf_helv, 13);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

        //    //X_Pos = 30; Y_Pos -= 30;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

        //    //cb.EndText();

        //    iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
        //    //start the Income details of a Family to the table

        //    //PdfPTable SpaceTable = new PdfPTable(1);
        //    //SpaceTable.TotalWidth = 750f;
        //    //SpaceTable.WidthPercentage = 100;
        //    //SpaceTable.LockedWidth = true;
        //    //float[] SpaceTablewidths = new float[] { 80f };
        //    //SpaceTable.SetWidths(SpaceTablewidths);
        //    //SpaceTable.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //SpaceTable.SpacingAfter = 70f;

        //    #region Incometable

        //    PdfPTable IncomeTable = new PdfPTable(5);
        //    IncomeTable.TotalWidth = 750f;
        //    IncomeTable.WidthPercentage = 100;
        //    IncomeTable.LockedWidth = true;
        //    float[] Incomewidths = new float[] { 80f, 50f, 40f, 90f, 80f };
        //    IncomeTable.SetWidths(Incomewidths);
        //    IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
        //    IncomeTable.SpacingBefore = 100f;

        //    PdfPCell IncomeCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
        //    IncomeCell.Colspan = 5;
        //    IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
        //    IncomeCell.FixedHeight = 15f;
        //    IncomeCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    IncomeTable.AddCell(IncomeCell);

        //    PdfPCell IncomeCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
        //    IncomeCell1.Colspan = 5;
        //    IncomeCell1.HorizontalAlignment = Element.ALIGN_CENTER;
        //    IncomeCell1.FixedHeight = 15f;
        //    IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    IncomeTable.AddCell(IncomeCell1);

        //    PdfPCell IncomeCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
        //    IncomeCell0.Colspan = 2;
        //    IncomeCell0.HorizontalAlignment = Element.ALIGN_LEFT;
        //    IncomeCell0.FixedHeight = 15f;
        //    IncomeCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    IncomeTable.AddCell(IncomeCell0);

        //    PdfPCell IncomeCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
        //    IncomeCell2.Colspan = 3;
        //    IncomeCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
        //    IncomeCell2.FixedHeight = 15f;
        //    IncomeCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    IncomeTable.AddCell(IncomeCell2);

        //    PdfPCell IncomeCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
        //    IncomeCell3.Colspan = 3;
        //    IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
        //    IncomeCell3.FixedHeight = 15f;
        //    IncomeCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    IncomeTable.AddCell(IncomeCell3);

        //    if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //    {
        //        PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
        //        IncomeCell4.Colspan = 2;
        //        IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        IncomeCell4.FixedHeight = 15f;
        //        IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        IncomeTable.AddCell(IncomeCell4);
        //    }
        //    else
        //    {
        //        PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
        //        IncomeCell4.Colspan = 2;
        //        IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        IncomeCell4.FixedHeight = 15f;
        //        IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        IncomeTable.AddCell(IncomeCell4);
        //    }
        //    PdfPCell IncomeHeader = new PdfPCell(new Phrase("Financial Information - As reported by Applicant", TblFontBold));
        //    IncomeHeader.Colspan = 5;
        //    IncomeHeader.FixedHeight = 15f;
        //    IncomeHeader.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    IncomeHeader.Border = iTextSharp.text.Rectangle.BOX;
        //    IncomeTable.AddCell(IncomeHeader);
        //    string[] Incomecol = { "Household Member", "Amount", "Interval", "Income Sources", "How Verified?" };
        //    for (int p = 0; p < Incomecol.Length; ++p)
        //    {
        //        PdfPCell Incomecell = new PdfPCell(new Phrase(Incomecol[p], TableFontBoldItalic));
        //        Incomecell.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Incomecell.FixedHeight = 15f;
        //        Incomecell.Border = iTextSharp.text.Rectangle.BOX;
        //        IncomeTable.AddCell(Incomecell);
        //    }

        //    if (dsIncome.Tables.Count > 0)
        //        dtIncome = dsIncome.Tables[0];

        //    decimal Row_Prog_Income = 0; string interval = null, MemName = null, Income_Verifier = null;
        //    string IncomeDesc = null, privSeq = null;
        //    if (dtCaseIncome.Rows.Count > 0)
        //    {
        //        DataView dv = dtCaseIncome.DefaultView;
        //        dv.RowFilter = "INCOME_EXCLUDE = 'N'";
        //        dv.Sort = "INCOME_FAMILY_SEQ ASC";
        //        dtCaseIncome = dv.ToTable();
        //        foreach (DataRow drCaseIncome in dtCaseIncome.Rows)
        //        {
        //            Income_Verifier = interval = IncomeDesc = string.Empty;
        //            if (drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim() != privSeq)
        //            {
        //                if (!string.IsNullOrEmpty(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim()))
        //                    MemName = Get_Member_Name(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim(), string.Empty);
        //                PdfPCell House_HoldMem = new PdfPCell(new Phrase(MemName, TableFont));
        //                House_HoldMem.Colspan = 5;
        //                House_HoldMem.HorizontalAlignment = Element.ALIGN_LEFT;
        //                House_HoldMem.FixedHeight = 15f;
        //                House_HoldMem.Border = iTextSharp.text.Rectangle.BOX;
        //                IncomeTable.AddCell(House_HoldMem);
        //                privSeq = drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim();
        //            }
        //            PdfPCell Income_Space = new PdfPCell(new Phrase("", TableFont));
        //            Income_Space.Colspan = 1;
        //            Income_Space.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Income_Space.FixedHeight = 15f;
        //            Income_Space.Border = iTextSharp.text.Rectangle.BOX;
        //            IncomeTable.AddCell(Income_Space);

        //            if (!string.IsNullOrEmpty(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim()))
        //                Row_Prog_Income = decimal.Parse(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim());
        //            PdfPCell Amount = new PdfPCell(new Phrase(Row_Prog_Income.ToString(), TableFont));
        //            Amount.HorizontalAlignment = Element.ALIGN_CENTER;
        //            Amount.FixedHeight = 15f;
        //            Amount.Border = iTextSharp.text.Rectangle.BOX;
        //            IncomeTable.AddCell(Amount);

        //            if (!string.IsNullOrEmpty(drCaseIncome["INCOME_INTERVAL"].ToString().Trim()))
        //                interval = LookupDataAccess.ShowIncomeInterval(drCaseIncome["INCOME_INTERVAL"].ToString().Trim());
        //            PdfPCell Freq = new PdfPCell(new Phrase(interval, TableFont));
        //            Freq.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Freq.FixedHeight = 15f;
        //            Freq.Border = iTextSharp.text.Rectangle.BOX;
        //            IncomeTable.AddCell(Freq);

        //            if (!string.IsNullOrEmpty(drCaseIncome["INCOME_TYPE"].ToString().Trim()))
        //                IncomeDesc = Get_IncomeType_Desc(drCaseIncome["INCOME_TYPE"].ToString().Trim());

        //            PdfPCell IncomeSource = new PdfPCell(new Phrase(IncomeDesc, TableFont));
        //            IncomeSource.HorizontalAlignment = Element.ALIGN_CENTER;
        //            IncomeSource.FixedHeight = 15f;
        //            IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
        //            IncomeTable.AddCell(IncomeSource);

        //            if (!string.IsNullOrEmpty(drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim()))
        //                Income_Verifier = drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim();

        //            PdfPCell IncomeVer = new PdfPCell(new Phrase(Income_Verifier, TableFont));
        //            IncomeVer.HorizontalAlignment = Element.ALIGN_LEFT;
        //            IncomeVer.FixedHeight = 15f;
        //            IncomeVer.Border = iTextSharp.text.Rectangle.BOX;
        //            IncomeTable.AddCell(IncomeVer);

        //        }
        //    }

        //    PdfPTable TotIncomeTable = new PdfPTable(8);
        //    TotIncomeTable.TotalWidth = 750f;
        //    TotIncomeTable.WidthPercentage = 100;
        //    TotIncomeTable.LockedWidth = true;
        //    float[] TotIncomeTablewidths = new float[] { 50f, 30f, 50f, 40f, 60f, 30f, 50f, 30f };
        //    TotIncomeTable.SetWidths(TotIncomeTablewidths);
        //    TotIncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //IncomeTable.SpacingBefore = 60f;

        //    PdfPCell Total_Space = new PdfPCell(new Phrase("", TableFont));
        //    Total_Space.Colspan = 8;
        //    Total_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Total_Space.FixedHeight = 15f;
        //    Total_Space.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Total_Space);

        //    PdfPCell Total = new PdfPCell(new Phrase("Total Income", TableFont));
        //    Total.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Total.FixedHeight = 15f;
        //    Total.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Total);

        //    PdfPCell Total_Income = new PdfPCell(new Phrase(drCaseMST["MST_FAM_INCOME"].ToString().Trim(), TableFont));
        //    Total_Income.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Total_Income.FixedHeight = 15f;
        //    Total_Income.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Total_Income);

        //    PdfPCell Program = new PdfPCell(new Phrase("Program Income", TableFont));
        //    Program.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Program.FixedHeight = 15f;
        //    Program.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Program);

        //    PdfPCell Program_Income = new PdfPCell(new Phrase(drCaseMST["MST_PROG_INCOME"].ToString().Trim(), TableFont));
        //    Program_Income.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Program_Income.FixedHeight = 15f;
        //    Program_Income.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Program_Income);

        //    PdfPCell Federal = new PdfPCell(new Phrase("% of Federal Poverty Level", TableFont));
        //    Federal.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Federal.FixedHeight = 15f;
        //    Federal.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Federal);

        //    PdfPCell Federal_Poverty = new PdfPCell(new Phrase(drCaseMST["MST_POVERTY"].ToString().Trim() + "%", TableFont));
        //    Federal_Poverty.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Federal_Poverty.FixedHeight = 15f;
        //    Federal_Poverty.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(Federal_Poverty);

        //    PdfPCell HUD = new PdfPCell(new Phrase("HUD%", TableFont));
        //    HUD.HorizontalAlignment = Element.ALIGN_LEFT;
        //    HUD.FixedHeight = 15f;
        //    HUD.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(HUD);

        //    PdfPCell HUD_Value = new PdfPCell(new Phrase(drCaseMST["MST_HUD"].ToString().Trim() + "%", TableFont));
        //    HUD_Value.HorizontalAlignment = Element.ALIGN_CENTER;
        //    HUD_Value.FixedHeight = 15f;
        //    HUD_Value.Border = iTextSharp.text.Rectangle.BOX;
        //    TotIncomeTable.AddCell(HUD_Value);

        //    #endregion

        //    document.Add(IncomeTable);
        //    document.Add(TotIncomeTable);


        //    #region Income Verification

        //    iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
        //    iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

        //    _image_UnChecked.ScalePercent(60f);
        //    _image_Checked.ScalePercent(60f);

        //    if (Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance")
        //    {
        //        PdfPTable Income_Last = new PdfPTable(15);
        //        Income_Last.TotalWidth = 750f;
        //        Income_Last.WidthPercentage = 100;
        //        Income_Last.LockedWidth = true;
        //        float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
        //        Income_Last.SetWidths(Income_Lastwidths);
        //        Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Income_Last.SpacingBefore = 20f;

        //        PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
        //        Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Income_Verified.FixedHeight = 15f;
        //        Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(Income_Verified);

        //        if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
        //        {
        //            PdfPCell W2Cheked = new PdfPCell(_image_Checked);
        //            W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
        //            //W2Cheked.FixedHeight = 15f;
        //            W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(W2Cheked);
        //        }
        //        else
        //        {
        //            PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
        //            W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(W2UnCheked);
        //        }

        //        PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
        //        W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
        //        W2Text.FixedHeight = 15f;
        //        W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(W2Text);

        //        if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
        //        {
        //            PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
        //            CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
        //            //W2Cheked.FixedHeight = 15f;
        //            CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(CHECK_STUB_Check);
        //        }
        //        else
        //        {
        //            PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
        //            CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(CHECK_STUB_UnCheked);
        //        }

        //        PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
        //        CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
        //        CHECK_STUB.FixedHeight = 15f;
        //        CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(CHECK_STUB);

        //        if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
        //        {
        //            PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
        //            LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
        //            //W2Cheked.FixedHeight = 15f;
        //            LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(LETTER_Check);
        //        }
        //        else
        //        {
        //            PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
        //            LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(LETTER_UnCheked);
        //        }

        //        PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
        //        LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
        //        LETTER.FixedHeight = 15f;
        //        LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(LETTER);

        //        if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
        //        {
        //            PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
        //            TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
        //            //W2Cheked.FixedHeight = 15f;
        //            TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(TAX_RETURN_Check);
        //        }
        //        else
        //        {
        //            PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
        //            TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(TAX_RETURN_UnCheked);
        //        }

        //        PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
        //        TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
        //        TAX_RETURN.FixedHeight = 15f;
        //        TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(TAX_RETURN);

        //        if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
        //        {
        //            PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
        //            OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
        //            //W2Cheked.FixedHeight = 15f;
        //            OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(OTHER_Check);
        //        }
        //        else
        //        {
        //            PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
        //            OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(OTHER_UnCheked);
        //        }

        //        PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
        //        OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
        //        OTHER.FixedHeight = 15f;
        //        OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(OTHER);

        //        PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
        //        Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Verification_Date.FixedHeight = 15f;
        //        Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(Verification_Date);

        //        if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
        //        {
        //            PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
        //            Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verify_Date.FixedHeight = 15f;
        //            Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verify_Date);
        //        }
        //        else
        //        {
        //            PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
        //            Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verify_Date_Space.FixedHeight = 15f;
        //            Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verify_Date_Space);
        //        }

        //        PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
        //        Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Verifier_Head.FixedHeight = 15f;
        //        Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(Verifier_Head);

        //        string CaseWorker = null;
        //        if (dtVerifier.Rows.Count > 0)
        //        {
        //            foreach (DataRow drVerifier in dtVerifier.Rows)
        //            {
        //                if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
        //                {
        //                    CaseWorker = drVerifier["NAME"].ToString().Trim();
        //                    break;
        //                }
        //            }
        //        }

        //        if (!string.IsNullOrEmpty(CaseWorker))
        //        {
        //            PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
        //            Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verifier.FixedHeight = 15f;
        //            Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verifier);
        //        }
        //        else
        //        {
        //            PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
        //            Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verifier_Space.FixedHeight = 15f;
        //            Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verifier_Space);
        //        }


        //        if (ShortName != "UETHDA")
        //        {
        //            PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
        //            V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            V_Space.Colspan = 15;
        //            V_Space.FixedHeight = 15f;
        //            V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(V_Space);

        //            PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
        //            P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
        //            P_Ver.Colspan = 11;
        //            P_Ver.FixedHeight = 15f;
        //            P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(P_Ver);

        //            PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
        //            P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
        //            P_Ver1.Colspan = 2;
        //            P_Ver1.FixedHeight = 15f;
        //            P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(P_Ver1);

        //            //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
        //            //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //Ver_Date_Space.FixedHeight = 15f;
        //            //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            //Income_Last.AddCell(Ver_Date_Space);

        //            PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
        //            P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //P_Ver2.Colspan = 4;
        //            P_Ver2.FixedHeight = 15f;
        //            P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(P_Ver2);

        //            PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
        //            Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Ver_Space.FixedHeight = 15f;
        //            Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Ver_Space);
        //        }
        //        document.Add(Income_Last);
        //    }
        //    else
        //    {
        //        PdfPTable Income_Last = new PdfPTable(5);
        //        Income_Last.TotalWidth = 750f;
        //        Income_Last.WidthPercentage = 100;
        //        Income_Last.LockedWidth = true;
        //        float[] Income_Lastwidths = new float[] { 25f, 20f, 13f, 30f, 100f };//80f, 50f, 40f, 90f, 80f 
        //        Income_Last.SetWidths(Income_Lastwidths);
        //        Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Income_Last.SpacingBefore = 20f;

        //        PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
        //        Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Verification_Date.FixedHeight = 15f;
        //        Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(Verification_Date);

        //        if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
        //        {
        //            PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
        //            Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verify_Date.FixedHeight = 15f;
        //            Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verify_Date);
        //        }
        //        else
        //        {
        //            PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
        //            Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verify_Date_Space.FixedHeight = 15f;
        //            Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verify_Date_Space);
        //        }

        //        PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
        //        Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Verifier_Head.FixedHeight = 15f;
        //        Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(Verifier_Head);

        //        string CaseWorker = null;
        //        if (dtVerifier.Rows.Count > 0)
        //        {
        //            foreach (DataRow drVerifier in dtVerifier.Rows)
        //            {
        //                if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
        //                {
        //                    CaseWorker = drVerifier["NAME"].ToString().Trim();
        //                    break;
        //                }
        //            }
        //        }

        //        if (!string.IsNullOrEmpty(CaseWorker))
        //        {
        //            PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
        //            Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verifier.FixedHeight = 15f;
        //            Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verifier);
        //        }
        //        else
        //        {
        //            PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
        //            Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //            Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Verifier_Space.FixedHeight = 15f;
        //            Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Income_Last.AddCell(Verifier_Space);
        //        }

        //        PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
        //        V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        V_Space.FixedHeight = 15f;
        //        V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Income_Last.AddCell(V_Space);

        //        //if (ShortName != "UETHDA")
        //        //{
        //        //    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
        //        //    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    V_Space.Colspan = 15;
        //        //    V_Space.FixedHeight = 15f;
        //        //    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    Income_Last.AddCell(V_Space);

        //        //    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
        //        //    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    P_Ver.Colspan = 11;
        //        //    P_Ver.FixedHeight = 15f;
        //        //    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    Income_Last.AddCell(P_Ver);

        //        //    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
        //        //    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    P_Ver1.Colspan = 2;
        //        //    P_Ver1.FixedHeight = 15f;
        //        //    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    Income_Last.AddCell(P_Ver1);

        //        //    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
        //        //    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    //Ver_Date_Space.FixedHeight = 15f;
        //        //    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    //Income_Last.AddCell(Ver_Date_Space);

        //        //    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
        //        //    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    //P_Ver2.Colspan = 4;
        //        //    P_Ver2.FixedHeight = 15f;
        //        //    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    Income_Last.AddCell(P_Ver2);

        //        //    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
        //        //    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
        //        //    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Ver_Space.FixedHeight = 15f;
        //        //    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    Income_Last.AddCell(Ver_Space);
        //        //}

        //        document.Add(Income_Last);
        //    }

        //    #endregion


        //    //End of Income Details

        //    #region Start of Energy Calculations

        //    PdfPTable Energy = new PdfPTable(3);
        //    Energy.TotalWidth = 750f;
        //    Energy.WidthPercentage = 100;
        //    Energy.LockedWidth = true;
        //    float[] Energy_widths = new float[] { 60, 60f, 60f };
        //    Energy.SetWidths(Energy_widths);
        //    Energy.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Energy.SpacingBefore = 20f;

        //    if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
        //    {
        //        PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
        //        Compute.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Compute.FixedHeight = 15f;
        //        Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Energy.AddCell(Compute);

        //        PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
        //        Compute_Space.Colspan = 2;
        //        Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Compute_Space.FixedHeight = 15f;
        //        Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Energy.AddCell(Compute_Space);

        //        decimal UtilityCost = 0; decimal EnergyBurden = 0;
        //        if (ADDCUST_List.Count > 0)
        //        {
        //            AddCustEntity Custdet = ADDCUST_List.Find(u => u.ACTCODE.Equals("C00012") && u.ACTAPPNO.Equals(BaseForm.BaseApplicationNo));
        //            if (Custdet != null)
        //            {
        //                if (!string.IsNullOrEmpty(Custdet.ACTNUMRESP.Trim()))
        //                    UtilityCost = decimal.Parse(Custdet.ACTNUMRESP.Trim());
        //            }
        //        }

        //        PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: " + UtilityCost.ToString("0.00"), Times));
        //        Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Utility_Costs.FixedHeight = 15f;
        //        Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Energy.AddCell(Utility_Costs);

        //        PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
        //        Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Annual_Income.FixedHeight = 15f;
        //        Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Energy.AddCell(Annual_Income);

        //        if (decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim()) > 0 && UtilityCost > 0)
        //            EnergyBurden = (UtilityCost / decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim())) * 100;

        //        PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: " + EnergyBurden.ToString("0.00") + "%", Times));
        //        Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Energy_Burden.FixedHeight = 15f;
        //        Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Energy.AddCell(Energy_Burden);
        //    }




        //    //if (Privileges.ModuleCode == "05")
        //    //{
        //    //    PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
        //    //    Compute.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //    Compute.FixedHeight = 15f;
        //    //    Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Energy.AddCell(Compute);

        //    //    PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
        //    //    Compute_Space.Colspan = 2;
        //    //    Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //    Compute_Space.FixedHeight = 15f;
        //    //    Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Energy.AddCell(Compute_Space);

        //    //    PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: 0.00", Times));
        //    //    Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //    Utility_Costs.FixedHeight = 15f;
        //    //    Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Energy.AddCell(Utility_Costs);

        //    //    PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
        //    //    Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //    Annual_Income.FixedHeight = 15f;
        //    //    Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Energy.AddCell(Annual_Income);

        //    //    PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: 0.00", Times));
        //    //    Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //    Energy_Burden.FixedHeight = 15f;
        //    //    Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Energy.AddCell(Energy_Burden);
        //    //}
        //    #endregion

        //    #region Start of the Services table for a applicant

        //    PdfPTable Services = new PdfPTable(2);
        //    Services.TotalWidth = 750f;
        //    Services.WidthPercentage = 100;
        //    Services.LockedWidth = true;
        //    float[] Services_widths = new float[] { 40f, 120f };
        //    Services.SetWidths(Services_widths);
        //    Services.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Services.SpacingBefore = 20f;
        //    Services.HeaderRows = 1;

        //    PdfPCell Services_Requested = new PdfPCell(new Phrase("Services Requested", TblFontBold));
        //    Services_Requested.Colspan = 2;
        //    Services_Requested.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Services_Requested.FixedHeight = 15f;
        //    Services_Requested.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Services_Requested.Border = iTextSharp.text.Rectangle.BOX;
        //    Services.AddCell(Services_Requested);

        //    if (MSTSER_List.Count > 0)
        //    {
        //        foreach (CaseMSTSER Entity in MSTSER_List)
        //        {
        //            PdfPCell SerVice_Code = new PdfPCell(new Phrase(Entity.Service.Trim(), Times));
        //            SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
        //            SerVice_Code.FixedHeight = 15f;
        //            SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
        //            Services.AddCell(SerVice_Code);
        //            string Ser_Desc = null;
        //            if (SerHie == "Y")
        //            {
        //                foreach (DataRow drCaseHie in dtCaseHie.Rows)
        //                {
        //                    if (Entity.Service.Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && Entity.Service.Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && Entity.Service.Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
        //                    {
        //                        Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
        //                        break;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (CAMASTList.Count > 0)
        //                {
        //                    foreach (CAMASTEntity serEntity in CAMASTList)
        //                    {
        //                        if (serEntity.Code.Trim() == Entity.Service.Trim())
        //                        { Ser_Desc = serEntity.Desc.Trim(); break; }
        //                    }
        //                }
        //            }
        //            PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
        //            SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
        //            SerVice_DESC.FixedHeight = 15f;
        //            SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
        //            Services.AddCell(SerVice_DESC);
        //        }
        //    }

        //    #endregion
        //    //if (dtMSTSER.Rows.Count > 0)
        //    //{
        //    //    foreach (DataRow drMSTSER in dtMSTSER.Rows)
        //    //    {
        //    //        PdfPCell SerVice_Code = new PdfPCell(new Phrase(drMSTSER["MSTSER_SERVICE"].ToString().Trim(), Times));
        //    //        SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //        SerVice_Code.FixedHeight = 15f;
        //    //        SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
        //    //        Services.AddCell(SerVice_Code);
        //    //        string Ser_Desc = null;
        //    //        foreach (DataRow drCaseHie in dtCaseHie.Rows)
        //    //        {
        //    //            if (drMSTSER["MSTSER_SERVICE"].ToString().Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
        //    //            {
        //    //                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
        //    //                break;
        //    //            }
        //    //        }
        //    //        PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
        //    //        SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //        SerVice_DESC.FixedHeight = 15f;
        //    //        SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
        //    //        Services.AddCell(SerVice_DESC);
        //    //    }
        //    //}


        //    if (Privileges.ModuleCode == "05")
        //        document.Add(Energy);
        //    document.Add(Services);



        //    #region Start the Custom Question table for an applicant

        //    PdfPTable Questions = new PdfPTable(3);
        //    Questions.TotalWidth = 750f;
        //    Questions.WidthPercentage = 100;
        //    Questions.LockedWidth = true;
        //    float[] Questions_widths = new float[] { 100f, 40f, 60f };
        //    Questions.SetWidths(Questions_widths);
        //    Questions.HorizontalAlignment = Element.ALIGN_CENTER;
        //    Questions.SpacingBefore = 30f;
        //    Questions.HeaderRows = 2;


        //    //PdfPCell QueCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
        //    //QueCell.Colspan = 3;
        //    //QueCell.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //QueCell.FixedHeight = 15f;
        //    //QueCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //Questions.AddCell(QueCell);

        //    //PdfPCell QueCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
        //    //QueCell1.Colspan = 3;
        //    //QueCell1.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //QueCell1.FixedHeight = 15f;
        //    //QueCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //Questions.AddCell(QueCell1);

        //    //PdfPCell QueCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
        //    ////QueCell0.Colspan = 2;
        //    //QueCell0.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //QueCell0.FixedHeight = 15f;
        //    //QueCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //Questions.AddCell(QueCell0);

        //    //PdfPCell QueCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
        //    //QueCell2.Colspan = 2;
        //    //QueCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
        //    //QueCell2.FixedHeight = 15f;
        //    //QueCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //Questions.AddCell(QueCell2);

        //    //PdfPCell QueCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
        //    ////QueCell3.Colspan = 3;
        //    //QueCell3.HorizontalAlignment = Element.ALIGN_LEFT;
        //    //QueCell3.FixedHeight = 15f;
        //    //QueCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //Questions.AddCell(QueCell3);

        //    //if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //    //{
        //    //    PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
        //    //    QueCell4.Colspan = 2;
        //    //    QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //    //    QueCell4.FixedHeight = 15f;
        //    //    QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Questions.AddCell(QueCell4);
        //    //}
        //    //else
        //    //{
        //    //    PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
        //    //    QueCell4.Colspan = 2;
        //    //    QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //    //    QueCell4.FixedHeight = 15f;
        //    //    QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //    //    Questions.AddCell(QueCell4);
        //    //}

        //    PdfPCell Add_Ques_Header = new PdfPCell(new Phrase("Additional Intake Questions and Answers", TblFontBold));
        //    Add_Ques_Header.Colspan = 3;
        //    Add_Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Add_Ques_Header.FixedHeight = 15f;
        //    //Add_Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Add_Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
        //    Questions.AddCell(Add_Ques_Header);

        //    PdfPCell Ques_Header = new PdfPCell(new Phrase("Question Description", TblFontBold));
        //    ////Ques_Header.Colspan = 3;
        //    Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Ques_Header.FixedHeight = 15f;
        //    Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
        //    Questions.AddCell(Ques_Header);

        //    PdfPCell Ques_Member = new PdfPCell(new Phrase("Member", TblFontBold));
        //    Ques_Member.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Ques_Member.FixedHeight = 15f;
        //    Ques_Member.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Ques_Member.Border = iTextSharp.text.Rectangle.BOX;
        //    Questions.AddCell(Ques_Member);

        //    PdfPCell Ques_Response = new PdfPCell(new Phrase("Response", TblFontBold));
        //    Ques_Response.HorizontalAlignment = Element.ALIGN_LEFT;
        //    Ques_Response.FixedHeight = 15f;
        //    Ques_Response.BackgroundColor = BaseColor.LIGHT_GRAY;
        //    Ques_Response.Border = iTextSharp.text.Rectangle.BOX;
        //    Questions.AddCell(Ques_Response);
        //    List<CustRespEntity> CustResp_List;
        //    if (ADDCUST_List.Count > 0)
        //    {
        //        foreach (AddCustEntity Entity in ADDCUST_List)
        //        {
        //            string CustQues_Code = Entity.ACTCODE.Trim();
        //            string CustQues_Desc = null;
        //            string CustQues_Type = null;
        //            string CustQuesResponse_Desc = null;
        //            string Member_Desc = null;
        //            if (custQues_List.Count > 0)
        //            {
        //                foreach (CustfldsEntity CustQues in custQues_List)
        //                {
        //                    if (CustQues_Code.Trim() == CustQues.CustCode.Trim())
        //                    {
        //                        CustQues_Desc = CustQues.CustDesc.Trim();
        //                        CustQues_Type = CustQues.RespType.Trim();
        //                        break;
        //                    }
        //                }

        //                if (!string.IsNullOrEmpty(CustQues_Type))
        //                {
        //                    PdfPCell Ques_DESC = new PdfPCell(new Phrase(CustQues_Desc, TableFont));
        //                    Ques_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Ques_DESC.FixedHeight = 15f;
        //                    Ques_DESC.Border = iTextSharp.text.Rectangle.BOX;
        //                    Questions.AddCell(Ques_DESC);

        //                    if (CustQues_Type.Trim() == "N")
        //                    {
        //                        if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim().Trim();
        //                            Member_Desc = "Applicant";
        //                        }
        //                        else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
        //                            Member_Desc = "HouseHold";
        //                        }
        //                        else
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
        //                            Member_Desc = "Member";
        //                        }
        //                    }
        //                    else if (CustQues_Type.Trim() == "T")
        //                    {
        //                        if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
        //                                CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
        //                            Member_Desc = "Applicant";
        //                        }
        //                        else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
        //                                CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
        //                            Member_Desc = "HouseHold";
        //                        }
        //                        else
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
        //                                CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
        //                            Member_Desc = "Member";
        //                        }
        //                    }
        //                    else if ((CustQues_Type.Trim() == "A" || CustQues_Type.Trim() == "X"))
        //                    {
        //                        if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
        //                            Member_Desc = "Applicant";
        //                        }
        //                        else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
        //                            Member_Desc = "HouseHold";
        //                        }
        //                        else
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
        //                                CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
        //                            Member_Desc = "Member";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        CustRespEntity Search_Entity = new CustRespEntity(true);
        //                        Search_Entity.ResoCode = CustQues_Code.Trim();
        //                        Search_Entity.ScrCode = "CASE2001";
        //                        //Search_Entity.RecType = Search_Entity.RespSeq = null;
        //                        //Search_Entity.RespDesc = Search_Entity.DescCode = Search_Entity.AddDate = Search_Entity.AddOpr = null;
        //                        //Search_Entity.ChgDate = Search_Entity.ChgOpr = Search_Entity.Changed = null;
        //                        CustResp_List = _model.FieldControls.Browse_CUSTRESP(Search_Entity, "Browse");
        //                        if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
        //                            {
        //                                foreach (CustRespEntity CustEntity in CustResp_List)
        //                                {
        //                                    if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim().Trim())
        //                                    {
        //                                        CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            Member_Desc = "Applicant";
        //                        }
        //                        else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
        //                            {
        //                                foreach (CustRespEntity CustEntity in CustResp_List)
        //                                {
        //                                    if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
        //                                    {
        //                                        CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            Member_Desc = "HouseHold";
        //                        }
        //                        else
        //                        {
        //                            if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
        //                            {
        //                                foreach (CustRespEntity CustEntity in CustResp_List)
        //                                {
        //                                    if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
        //                                    {
        //                                        CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            Member_Desc = "Member";
        //                        }
        //                    }

        //                    PdfPCell Ques_Mem_Name = new PdfPCell(new Phrase(Member_Desc, TableFont));
        //                    Ques_Mem_Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Ques_Mem_Name.FixedHeight = 15f;
        //                    Ques_Mem_Name.Border = iTextSharp.text.Rectangle.BOX;
        //                    Questions.AddCell(Ques_Mem_Name);

        //                    PdfPCell Resp_Desc = new PdfPCell(new Phrase(CustQuesResponse_Desc, TableFont));
        //                    Resp_Desc.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Resp_Desc.FixedHeight = 15f;
        //                    Resp_Desc.Border = iTextSharp.text.Rectangle.BOX;
        //                    Questions.AddCell(Resp_Desc);

        //                }
        //            }
        //        }
        //    }

        //    #endregion End of custom Questions Table


        //    if (ADDCUST_List.Count > 0)
        //    {
        //        //document.NewPage();
        //        document.Add(Questions);
        //    }



        //    //document.NewPage();



        //    #region Code Not Used

        //    //cb.BeginText();
        //    //X_Pos = 400; Y_Pos = 580;
        //    //cb.SetFontAndSize(bf_helv, 13);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //cb.EndText();

        //    //cb.BeginText();
        //    //X_Pos = 400; Y_Pos = 580;
        //    //cb.SetFontAndSize(bf_helv, 13);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

        //    //cb.SetFontAndSize(bf_helv, 13);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
        //    //cb.SetFontAndSize(bf_helv, 9);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

        //    //X_Pos = 30; Y_Pos -= 30;
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

        //    //cb.EndText();

        //    //PdfPTable Spacetable = new PdfPTable(1);
        //    //Spacetable.HorizontalAlignment = Element.ALIGN_CENTER;
        //    //Spacetable.TotalWidth = 600f;

        //    //document.Add(Spacetable);

        //    #endregion

        //    if (Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance")
        //    {
        //        #region Employment Details

        //        PdfPTable EmploymentDet = new PdfPTable(6);
        //        EmploymentDet.TotalWidth = 750f;
        //        EmploymentDet.WidthPercentage = 100;
        //        EmploymentDet.LockedWidth = true;
        //        float[] EmploymentDet_widths = new float[] { 20f, 40f, 1f, 8f, 1f, 10f };
        //        EmploymentDet.SetWidths(EmploymentDet_widths);
        //        EmploymentDet.HorizontalAlignment = Element.ALIGN_CENTER;
        //        EmploymentDet.SpacingBefore = 50f;

        //        PdfPCell EmpCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
        //        EmpCell.Colspan = 6;
        //        EmpCell.HorizontalAlignment = Element.ALIGN_CENTER;
        //        EmpCell.FixedHeight = 15f;
        //        EmpCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(EmpCell);

        //        PdfPCell EmpCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
        //        EmpCell1.Colspan = 6;
        //        EmpCell1.HorizontalAlignment = Element.ALIGN_CENTER;
        //        EmpCell1.FixedHeight = 15f;
        //        EmpCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(EmpCell1);

        //        PdfPCell EmpCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
        //        EmpCell0.Colspan = 2;
        //        EmpCell0.HorizontalAlignment = Element.ALIGN_LEFT;
        //        EmpCell0.FixedHeight = 13f;
        //        EmpCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(EmpCell0);

        //        PdfPCell EmpCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
        //        EmpCell2.Colspan = 4;
        //        EmpCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        EmpCell2.FixedHeight = 13f;
        //        EmpCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(EmpCell2);

        //        PdfPCell EmpCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
        //        EmpCell3.Colspan = 2;
        //        EmpCell3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        EmpCell3.FixedHeight = 13f;
        //        EmpCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(EmpCell3);

        //        if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //        {
        //            PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
        //            EmpCell4.Colspan = 4;
        //            EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            EmpCell4.FixedHeight = 13f;
        //            EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(EmpCell4);
        //        }
        //        else
        //        {
        //            PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
        //            EmpCell4.Colspan = 4;
        //            EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            EmpCell4.FixedHeight = 13f;
        //            EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(EmpCell4);
        //        }
        //        //if (Privileges.ModuleCode == "02" || Privileges.ModuleCode == "03")
        //        //{
        //        PdfPCell Computer = new PdfPCell(new Phrase("EMPLOYMENT INFORMATION", TblFontBold));
        //        Computer.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Computer.Colspan = 2;
        //        Computer.FixedHeight = 15f;
        //        Computer.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(Computer);

        //        PdfPCell Applicant = new PdfPCell(new Phrase("Applicant Name/ID", Times));
        //        Applicant.Colspan = 2;
        //        Applicant.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Applicant.FixedHeight = 15f;
        //        Applicant.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(Applicant);

        //        PdfPCell ApplicationName = new PdfPCell(new Phrase(BaseForm.BaseApplicationName, Timesline));
        //        ApplicationName.HorizontalAlignment = Element.ALIGN_LEFT;
        //        ApplicationName.Colspan = 2;
        //        ApplicationName.FixedHeight = 15f;
        //        ApplicationName.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(ApplicationName);

        //        PdfPCell Mother = new PdfPCell(new Phrase("Mother/Gurdian Employer Name", Times));
        //        Mother.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Mother.FixedHeight = 15f;
        //        Mother.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(Mother);

        //        if (!string.IsNullOrEmpty(MotherName.Trim()))
        //        {
        //            PdfPCell Mother_Line = new PdfPCell(new Phrase(MotherName, Timesline));
        //            Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Mother_Line.FixedHeight = 15f;
        //            Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(Mother_Line);
        //        }
        //        else
        //        {
        //            PdfPCell Mother_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Mother_Line.FixedHeight = 15f;
        //            Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(Mother_Line);
        //        }

        //        if (M_FullPart == "F")
        //        {
        //            PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
        //            FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FullTime_UnCheked);
        //        }
        //        else
        //        {
        //            PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
        //            FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FullTime_UnCheked);
        //        }

        //        PdfPCell FullTime = new PdfPCell(new Phrase("Full Time", Times));
        //        FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
        //        FullTime.FixedHeight = 15f;
        //        FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(FullTime);

        //        if (M_FullPart == "P")
        //        {
        //            PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
        //            PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(PartTime_UnCheked);
        //        }
        //        else
        //        {
        //            PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
        //            PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(PartTime_UnCheked);
        //        }

        //        PdfPCell PartTime = new PdfPCell(new Phrase("Part Time", Times));
        //        PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
        //        PartTime.FixedHeight = 15f;
        //        PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(PartTime);


        //        PdfPCell MWork_Add = new PdfPCell(new Phrase("Work Address", Times));
        //        MWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //MWork_Add.Colspan = 2;
        //        MWork_Add.FixedHeight = 15f;
        //        MWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(MWork_Add);

        //        if (!string.IsNullOrEmpty(M_Address.Trim()))
        //        {
        //            PdfPCell MWork_Line = new PdfPCell(new Phrase(M_Address, Timesline));
        //            MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //MWork_Line.Colspan = 2;
        //            MWork_Line.FixedHeight = 15f;
        //            MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Line);
        //        }
        //        else
        //        {
        //            PdfPCell MWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //MWork_Line.Colspan = 2;
        //            MWork_Line.FixedHeight = 15f;
        //            MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Line);
        //        }

        //        PdfPCell MWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
        //        MWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
        //        MWork_Phone.Colspan = 2;
        //        MWork_Phone.FixedHeight = 15f;
        //        MWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(MWork_Phone);

        //        if (!string.IsNullOrEmpty(M_Phone.Trim()))
        //        {
        //            MaskedTextBox mskphn = new MaskedTextBox();
        //            mskphn.Mask = "(999)000-0000";
        //            mskphn.Text = M_Phone.Trim();

        //            PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
        //            MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            MWork_Phone_Line.Colspan = 2;
        //            MWork_Phone_Line.FixedHeight = 15f;
        //            MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Phone_Line);
        //        }
        //        else
        //        {
        //            PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            MWork_Phone_Line.Colspan = 2;
        //            MWork_Phone_Line.FixedHeight = 15f;
        //            MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Phone_Line);
        //        }
        //        PdfPCell Father = new PdfPCell(new Phrase("Father/Gurdian Employer Name", Times));
        //        Father.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Father.FixedHeight = 15f;
        //        Father.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(Father);

        //        if (!string.IsNullOrEmpty(FatherName.Trim()))
        //        {
        //            PdfPCell Father_Line = new PdfPCell(new Phrase(FatherName, Timesline));
        //            Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Father_Line.FixedHeight = 15f;
        //            Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(Father_Line);
        //        }
        //        else
        //        {
        //            PdfPCell Father_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Father_Line.FixedHeight = 15f;
        //            Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(Father_Line);
        //        }

        //        if (F_FullPart == "F")
        //        {
        //            PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
        //            FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FullTime_UnCheked);
        //        }
        //        else
        //        {
        //            PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
        //            FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FullTime_UnCheked);
        //        }

        //        PdfPCell F_FullTime = new PdfPCell(new Phrase("Full Time", Times));
        //        F_FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
        //        F_FullTime.FixedHeight = 15f;
        //        F_FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(F_FullTime);

        //        if (F_FullPart == "P")
        //        {
        //            PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
        //            PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(PartTime_UnCheked);
        //        }
        //        else
        //        {
        //            PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
        //            PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //W2UnCheked.FixedHeight = 15f;
        //            PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(PartTime_UnCheked);
        //        }

        //        PdfPCell F_PartTime = new PdfPCell(new Phrase("Part Time", Times));
        //        F_PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
        //        F_PartTime.FixedHeight = 15f;
        //        F_PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(F_PartTime);


        //        PdfPCell FWork_Add = new PdfPCell(new Phrase("Work Address", Times));
        //        FWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //MWork_Add.Colspan = 2;
        //        FWork_Add.FixedHeight = 15f;
        //        FWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(FWork_Add);

        //        if (!string.IsNullOrEmpty(F_Address.Trim()))
        //        {
        //            PdfPCell FWork_Line = new PdfPCell(new Phrase(F_Address, Timesline));
        //            FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //MWork_Line.Colspan = 2;
        //            FWork_Line.FixedHeight = 15f;
        //            FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FWork_Line);
        //        }
        //        else
        //        {
        //            PdfPCell FWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            //MWork_Line.Colspan = 2;
        //            FWork_Line.FixedHeight = 15f;
        //            FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(FWork_Line);
        //        }

        //        PdfPCell FWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
        //        FWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
        //        FWork_Phone.Colspan = 2;
        //        FWork_Phone.FixedHeight = 15f;
        //        FWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        EmploymentDet.AddCell(FWork_Phone);

        //        if (!string.IsNullOrEmpty(F_Phone.Trim()))
        //        {
        //            MaskedTextBox mskphn = new MaskedTextBox();
        //            mskphn.Mask = "(999)000-0000";
        //            mskphn.Text = F_Phone.Trim();

        //            PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
        //            MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            MWork_Phone_Line.Colspan = 2;
        //            MWork_Phone_Line.FixedHeight = 15f;
        //            MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Phone_Line);
        //        }
        //        else
        //        {
        //            PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
        //            MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //            MWork_Phone_Line.Colspan = 2;
        //            MWork_Phone_Line.FixedHeight = 15f;
        //            MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            EmploymentDet.AddCell(MWork_Phone_Line);
        //        }



        //        PdfPCell Line = new PdfPCell(new Phrase("", Times));
        //        Line.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Line.Colspan = 6;
        //        //Line.FixedHeight = 15f;
        //        Line.BorderWidthBottom = 2f;
        //        Line.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
        //        EmploymentDet.AddCell(Line);

        //        document.Add(EmploymentDet);

        //        #endregion

        //        #region Emergency Data Details

        //        PdfPTable Emergency = new PdfPTable(4);
        //        Emergency.TotalWidth = 750f;
        //        Emergency.WidthPercentage = 100;
        //        Emergency.LockedWidth = true;
        //        float[] Emergency_widths = new float[] { 55f, 50f, 40f, 50f };
        //        Emergency.SetWidths(Emergency_widths);
        //        Emergency.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Emergency.SpacingBefore = 10f;

        //        PdfPCell Emer_Head = new PdfPCell(new Phrase("Emergency/Medical Data", TblFontBold));
        //        Emer_Head.Colspan = 4;
        //        Emer_Head.HorizontalAlignment = Element.ALIGN_LEFT;
        //        Emer_Head.FixedHeight = 15f;
        //        Emer_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Emergency.AddCell(Emer_Head);

        //        if (chldEmemDetails.Count > 0)
        //        {
        //            int Em_Count = 0;

        //            PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
        //            Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Name.FixedHeight = 15f;
        //            Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Name);

        //            PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
        //            Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Relation.FixedHeight = 15f;
        //            Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Relation);

        //            PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
        //            Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Addr.FixedHeight = 15f;
        //            Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Addr);

        //            PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
        //            Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Phone.FixedHeight = 15f;
        //            Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Phone);

        //            foreach (ChldMstEMEMEntitty item in chldEmemDetails)
        //            {
        //                //PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", Times));
        //                //Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //                //Emer_Name.FixedHeight = 15f;
        //                //Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Name);
        //                if (!string.IsNullOrEmpty(item.EMERName.Trim()))
        //                {
        //                    PdfPCell Emer_Name_Line = new PdfPCell(new Phrase(item.EMERName, Times));
        //                    Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Name_Line.FixedHeight = 15f;
        //                    Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Name_Line);
        //                }
        //                else
        //                {
        //                    PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("________________", Times));
        //                    Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Name_Line.FixedHeight = 15f;
        //                    Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Name_Line);
        //                }

        //                if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
        //                {
        //                    string Rel_Desc = string.Empty;
        //                    if (AgyTabs_List.Count > 0)
        //                    {
        //                        AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
        //                        Rel_Desc = Rela.Code_Desc.Trim();
        //                    }

        //                    PdfPCell Emer_Rela = new PdfPCell(new Phrase(Rel_Desc, Times));
        //                    Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Rela.FixedHeight = 15f;
        //                    Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Rela);
        //                }
        //                else
        //                {
        //                    PdfPCell Emer_Rela = new PdfPCell(new Phrase("________________", Times));
        //                    Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Rela.FixedHeight = 15f;
        //                    Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Rela);
        //                }


        //                if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
        //                {
        //                    PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress1, Times));
        //                    Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Address_Line.FixedHeight = 15f;
        //                    Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Address_Line);
        //                }
        //                else
        //                {
        //                    PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("________________", Times));
        //                    Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Address_Line.FixedHeight = 15f;
        //                    Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Address_Line);
        //                }
        //                //PdfPCell Emer_Tel = new PdfPCell(new Phrase("Telephone:", Times));
        //                //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
        //                ////Emer_Space.Colspan = 2;
        //                //Emer_Tel.FixedHeight = 15f;
        //                //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Tel);
        //                //string Emer_Phone = string.Empty;
        //                //if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()) && item.EmerPhone1.Trim().Length == 10)
        //                //    Emer_Phone = "(" + item.EmerPhone1.Substring(0, 3).Trim() + ") " + item.EmerPhone1.Substring(3, 3).Trim() + "-" + item.EmerPhone1.Substring(6, 4).Trim();
        //                //else
        //                //    Emer_Phone = item.EmerPhone1.Trim();

        //                if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
        //                {
        //                    MaskedComboBox mskemerphn = new MaskedComboBox();
        //                    mskemerphn.Mask = "(000)000-0000";
        //                    mskemerphn.Text = item.EmerPhone1;
        //                    PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
        //                    Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Tel_Line.FixedHeight = 15f;
        //                    Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Tel_Line);
        //                }
        //                else
        //                {
        //                    PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("________________", Times));
        //                    Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Tel_Line.FixedHeight = 15f;
        //                    Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Tel_Line);
        //                }

        //                if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()) || !string.IsNullOrEmpty(item.EmerPhone2.Trim()))
        //                {
        //                    PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
        //                    Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    Emer_Space.Colspan = 2;
        //                    Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                    Emergency.AddCell(Emer_Space);

        //                    if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()))
        //                    {
        //                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress2, Times));
        //                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                        Emer_Address_Line.FixedHeight = 15f;
        //                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                        Emergency.AddCell(Emer_Address_Line);
        //                    }
        //                    else
        //                    {
        //                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("", Times));
        //                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                        Emer_Address_Line.FixedHeight = 15f;
        //                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                        Emergency.AddCell(Emer_Address_Line);
        //                    }

        //                    if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
        //                    {
        //                        MaskedComboBox mskemerphn = new MaskedComboBox();
        //                        mskemerphn.Mask = "(000)000-0000";
        //                        mskemerphn.Text = item.EmerPhone2;
        //                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
        //                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                        Emer_Tel_Line.FixedHeight = 15f;
        //                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                        Emergency.AddCell(Emer_Tel_Line);
        //                    }
        //                    else
        //                    {
        //                        PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
        //                        Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                        Emer_Tel_Line.FixedHeight = 15f;
        //                        Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                        Emergency.AddCell(Emer_Tel_Line);
        //                    }
        //                }

        //                Em_Count++;
        //                if (Em_Count == 2)
        //                    break;
        //            }
        //        }
        //        else
        //        {
        //            PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
        //            Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Name.FixedHeight = 15f;
        //            Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Name);

        //            PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
        //            Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Relation.FixedHeight = 15f;
        //            Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Relation);

        //            PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
        //            Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Addr.FixedHeight = 15f;
        //            Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Addr);

        //            PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
        //            Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
        //            Emer_Phone.FixedHeight = 15f;
        //            Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Emergency.AddCell(Emer_Phone);

        //            for (int i = 0; i < 2; i++)
        //            {
        //                PdfPCell Emer_Name1 = new PdfPCell(new Phrase("______________________________", Times));
        //                Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
        //                Emer_Name1.FixedHeight = 15f;
        //                Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                Emergency.AddCell(Emer_Name1);

        //                PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("______________________________", Times));
        //                Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                Emer_Name_Line.FixedHeight = 15f;
        //                Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                Emergency.AddCell(Emer_Name_Line);

        //                //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
        //                //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //                //Emer_Space.Colspan = 2;
        //                //Emer_Space.FixedHeight = 15f;
        //                //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Space);

        //                PdfPCell Emer_Address = new PdfPCell(new Phrase("______________________________", Times));
        //                Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
        //                Emer_Address.FixedHeight = 15f;
        //                Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                Emergency.AddCell(Emer_Address);

        //                PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("______________________________", Times));
        //                Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                Emer_Address_Line.FixedHeight = 15f;
        //                Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                Emergency.AddCell(Emer_Address_Line);

        //                //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
        //                //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //                //Emer_Space.Colspan = 2;
        //                //Emer_Space.FixedHeight = 15f;
        //                //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Space);

        //                //PdfPCell Emer_Tel = new PdfPCell(new Phrase("", Times));
        //                //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
        //                ////Emer_Space.Colspan = 2;
        //                //Emer_Tel.FixedHeight = 15f;
        //                //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Tel);

        //                //PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
        //                //Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //                //Emer_Tel_Line.FixedHeight = 15f;
        //                //Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //                //Emergency.AddCell(Emer_Tel_Line);
        //            }
        //        }

        //        //PdfPCell Emer_Space1 = new PdfPCell(new Phrase("", Times));
        //        //Emer_Space1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //Emer_Space1.Colspan = 4;
        //        //Emer_Space1.FixedHeight = 15f;
        //        //Emer_Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //Emergency.AddCell(Emer_Space1);


        //        document.Add(Emergency);

        //        #endregion

        //        #region Health Insurance Information

        //        PdfPTable InsuranceTable = new PdfPTable(5);
        //        InsuranceTable.TotalWidth = 750f;
        //        InsuranceTable.WidthPercentage = 100;
        //        InsuranceTable.LockedWidth = true;
        //        float[] InsuranceTable_widths = new float[] { 25f, 30f, 45f, 60f, 25f };
        //        InsuranceTable.SetWidths(InsuranceTable_widths);
        //        InsuranceTable.HorizontalAlignment = Element.ALIGN_CENTER;
        //        InsuranceTable.SpacingBefore = 10f;

        //        PdfPCell INS_Head = new PdfPCell(new Phrase("HEALTH INSURANCE INFORMATION", TblFontBold));
        //        INS_Head.Colspan = 5;
        //        INS_Head.HorizontalAlignment = Element.ALIGN_LEFT;
        //        INS_Head.FixedHeight = 15f;
        //        INS_Head.Border = iTextSharp.text.Rectangle.BOX;
        //        INS_Head.BorderWidth = 1f;
        //        InsuranceTable.AddCell(INS_Head);

        //        for (int i = 0; i < 4; i++)
        //        {
        //            PdfPCell I1 = new PdfPCell(new Phrase("Name", TableFont));
        //            I1.HorizontalAlignment = Element.ALIGN_LEFT;
        //            I1.Colspan = 5;
        //            I1.FixedHeight = 15f;
        //            I1.BorderWidth = 1f;
        //            I1.Border = iTextSharp.text.Rectangle.BOX;
        //            InsuranceTable.AddCell(I1);

        //            if (chldMstDetails != null && i == 0)
        //            {
        //                PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
        //                I2.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I2.Rowspan = 2;
        //                I2.BorderWidth = 1f;
        //                I2.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I2);

        //                PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
        //                I3.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I3.BorderWidth = 1f;
        //                I3.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I3);

        //                PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
        //                I4.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I4.BorderWidth = 1f;
        //                I4.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I4);

        //                PdfPCell I5 = new PdfPCell(new Phrase(chldMstDetails.DoctorAddress.Trim(), TableFont));
        //                I5.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I5.BorderWidth = 1f;
        //                I5.Rowspan = 2;
        //                I5.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I5);

        //                PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
        //                I6.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I6.BorderWidth = 1f;
        //                I6.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I6);

        //                if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
        //                {
        //                    PdfPCell I7 = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), TableFont));
        //                    I7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I7.BorderWidth = 1f;
        //                    I7.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I7);
        //                }
        //                else
        //                {
        //                    PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
        //                    I7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I7.BorderWidth = 1f;
        //                    I7.FixedHeight = 15f;
        //                    I7.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I7);
        //                }

        //                if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
        //                {
        //                    PdfPCell I8 = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim(), TableFont));
        //                    I8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I8.BorderWidth = 1f;
        //                    I8.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I8);
        //                }
        //                else
        //                {
        //                    PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
        //                    I8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I8.BorderWidth = 1f;
        //                    I8.FixedHeight = 15f;
        //                    I8.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I8);
        //                }

        //                if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
        //                {
        //                    PdfPCell I9 = new PdfPCell(new Phrase(chldMstDetails.DoctorPhone.Trim(), TableFont));
        //                    I9.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I9.BorderWidth = 1f;
        //                    I9.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I9);
        //                }
        //                else
        //                {
        //                    PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
        //                    I9.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    I9.BorderWidth = 1f;
        //                    I9.FixedHeight = 15f;
        //                    I9.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(I9);
        //                }

        //                PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
        //                D1.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D1.BorderWidth = 1f;
        //                D1.Rowspan = 2;
        //                D1.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D1);

        //                PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
        //                D2.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D2.BorderWidth = 1f;
        //                D2.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I3);

        //                PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
        //                D3.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D3.BorderWidth = 1f;
        //                D3.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D3);

        //                PdfPCell D4 = new PdfPCell(new Phrase(chldMstDetails.DentistAddress.Trim(), TableFont));
        //                D4.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D4.BorderWidth = 1f;
        //                D4.Rowspan = 2;
        //                D4.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D4);

        //                PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
        //                D5.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D5.BorderWidth = 1f;
        //                D5.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D5);

        //                if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
        //                {
        //                    PdfPCell D6 = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), TableFont));
        //                    D6.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D6.BorderWidth = 1f;
        //                    D6.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D6);
        //                }
        //                else
        //                {
        //                    PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
        //                    D6.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D6.BorderWidth = 1f;
        //                    D6.FixedHeight = 15f;
        //                    D6.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D6);
        //                }

        //                if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
        //                {
        //                    PdfPCell D7 = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim(), TableFont));
        //                    D7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D7.BorderWidth = 1f;
        //                    D7.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D7);
        //                }
        //                else
        //                {
        //                    PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
        //                    D7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D7.BorderWidth = 1f;
        //                    D7.FixedHeight = 15f;
        //                    D7.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D7);
        //                }

        //                if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
        //                {
        //                    PdfPCell D8 = new PdfPCell(new Phrase(chldMstDetails.DentistPhone.Trim(), TableFont));
        //                    D8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D8.BorderWidth = 1f;
        //                    D8.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D8);
        //                }
        //                else
        //                {
        //                    PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
        //                    D8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                    D8.BorderWidth = 1f;
        //                    D8.FixedHeight = 15f;
        //                    D8.Border = iTextSharp.text.Rectangle.BOX;
        //                    InsuranceTable.AddCell(D8);
        //                }
        //            }
        //            else
        //            {
        //                PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
        //                I2.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I2.Rowspan = 2;
        //                I2.BorderWidth = 1f;
        //                I2.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I2);

        //                PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
        //                I3.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I3.BorderWidth = 1f;
        //                I3.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I3);

        //                PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
        //                I4.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I4.BorderWidth = 1f;
        //                I4.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I4);

        //                PdfPCell I5 = new PdfPCell(new Phrase("", TableFont));
        //                I5.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I5.BorderWidth = 1f;
        //                I5.Rowspan = 2;
        //                I5.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I5);

        //                PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
        //                I6.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I6.BorderWidth = 1f;
        //                I6.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I6);

        //                PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
        //                I7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I7.BorderWidth = 1f;
        //                I7.FixedHeight = 15f;
        //                I7.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I7);

        //                PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
        //                I8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I8.BorderWidth = 1f;
        //                I8.FixedHeight = 15f;
        //                I8.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I8);

        //                PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
        //                I9.HorizontalAlignment = Element.ALIGN_LEFT;
        //                I9.BorderWidth = 1f;
        //                I9.FixedHeight = 15f;
        //                I9.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I9);


        //                PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
        //                D1.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D1.BorderWidth = 1f;
        //                D1.Rowspan = 2;
        //                D1.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D1);

        //                PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
        //                D2.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D2.BorderWidth = 1f;
        //                D2.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(I3);

        //                PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
        //                D3.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D3.BorderWidth = 1f;
        //                D3.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D3);

        //                PdfPCell D4 = new PdfPCell(new Phrase("", TableFont));
        //                D4.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D4.BorderWidth = 1f;
        //                D4.Rowspan = 2;
        //                D4.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D4);

        //                PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
        //                D5.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D5.BorderWidth = 1f;
        //                D5.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D5);

        //                PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
        //                D6.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D6.BorderWidth = 1f;
        //                D6.FixedHeight = 15f;
        //                D6.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D6);

        //                PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
        //                D7.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D7.BorderWidth = 1f;
        //                D7.FixedHeight = 15f;
        //                D7.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D7);

        //                PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
        //                D8.HorizontalAlignment = Element.ALIGN_LEFT;
        //                D8.BorderWidth = 1f;
        //                D8.FixedHeight = 15f;
        //                D8.Border = iTextSharp.text.Rectangle.BOX;
        //                InsuranceTable.AddCell(D8);
        //            }
        //        }

        //        document.Add(InsuranceTable);

        //        #endregion

        //        #region Mediacal data from chldmst

        //        //PdfPTable MediaclTable = new PdfPTable(4);
        //        //MediaclTable.TotalWidth = 750f;
        //        //MediaclTable.WidthPercentage = 100;
        //        //MediaclTable.LockedWidth = true;
        //        //float[] MediaclTable_widths = new float[] { 55f, 50f, 40f, 50f };
        //        //MediaclTable.SetWidths(MediaclTable_widths);
        //        //MediaclTable.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //MediaclTable.SpacingBefore = 10f;
        //        //if (chldMstDetails != null)
        //        //{

        //        //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
        //        //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Med_Plan.FixedHeight = 15f;
        //        //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_Plan);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
        //        //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_Plan_Line.FixedHeight = 15f;
        //        //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_Plan_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_Plan_Line.FixedHeight = 15f;
        //        //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_Plan_Line);
        //        //    }

        //        //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
        //        //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Med_No.FixedHeight = 15f;
        //        //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_No);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
        //        //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_No_Line.FixedHeight = 15f;
        //        //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_No_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_No_Line.FixedHeight = 15f;
        //        //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_No_Line);
        //        //    }

        //        //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
        //        //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Ins_Catg.FixedHeight = 15f;
        //        //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Ins_Catg);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.InsCat.Trim()))
        //        //    {
        //        //        string INS_CATG_DESC=string.Empty;
        //        //        if (lookInsuranceCategory.Count > 0)
        //        //        {
        //        //            foreach (CommonEntity Ins in lookInsuranceCategory)
        //        //            {
        //        //                if (chldMstDetails.InsCat.Trim() == Ins.Code.Trim())
        //        //                {
        //        //                    INS_CATG_DESC = Ins.Desc.Trim(); break;
        //        //                }
        //        //            }
        //        //        }

        //        //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(INS_CATG_DESC, Timesline));
        //        //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_No_Line.FixedHeight = 15f;
        //        //        Chld_Med_No_Line.Colspan = 3;
        //        //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_No_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Med_No_Line.Colspan = 3;
        //        //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Med_No_Line);
        //        //    }


        //        //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
        //        //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Doctor.FixedHeight = 15f;
        //        //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doctor);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim() + ", " + chldMstDetails.DoctorAddress, Timesline));
        //        //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Doctor_Line.FixedHeight = 15f;
        //        //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Doctor_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Doctor_Line.FixedHeight = 15f;
        //        //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Doctor_Line);
        //        //    }

        //        //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
        //        //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Doc_Phone.FixedHeight = 15f;
        //        //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doc_Phone);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
        //        //    {
        //        //        MaskedTextBox mskdocphn = new MaskedTextBox();
        //        //        mskdocphn.Mask = "(000)000-0000";
        //        //        mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();
        //        //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
        //        //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Doc_Phone_Line.FixedHeight = 15f;
        //        //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Doc_Phone_Line.FixedHeight = 15f;
        //        //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
        //        //    }


        //        //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
        //        //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Emer_Space2.Colspan = 4;
        //        //    Emer_Space2.FixedHeight = 10f;
        //        //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Emer_Space2);

        //        //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
        //        //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dent_Plan.FixedHeight = 15f;
        //        //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_Plan);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), Timesline));
        //        //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dent_Plan_Line.FixedHeight = 15f;
        //        //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dent_Plan_Line.FixedHeight = 15f;
        //        //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
        //        //    }

        //        //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
        //        //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Dent_No.FixedHeight = 15f;
        //        //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_No);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DentalInsurer.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase(chldMstDetails.DentalInsurer.Trim(), Timesline));
        //        //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dent_No_Line.FixedHeight = 15f;
        //        //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dent_No_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dent_No_Line.FixedHeight = 15f;
        //        //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dent_No_Line);
        //        //    }


        //        //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
        //        //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dentist.FixedHeight = 15f;
        //        //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist);
        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
        //        //    {
        //        //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim() + ", " + chldMstDetails.DentistAddress, Timesline));
        //        //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dentist_Line.FixedHeight = 15f;
        //        //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dentist_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dentist_Line.FixedHeight = 15f;
        //        //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dentist_Line);
        //        //    }

        //        //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
        //        //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Dentist_Phone.FixedHeight = 15f;
        //        //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist_Phone);

        //        //    if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
        //        //    {
        //        //        MaskedTextBox mskdocphn = new MaskedTextBox();
        //        //        mskdocphn.Mask = "(000)000-0000";
        //        //        mskdocphn.Text = chldMstDetails.DentistPhone.Trim();
        //        //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
        //        //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
        //        //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
        //        //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
        //        //    }

        //        //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
        //        //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Emer_Space3.Colspan = 4;
        //        //    Emer_Space3.FixedHeight = 10f;
        //        //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Emer_Space3);

        //        //    if (caseconddet != null)
        //        //    {
        //        //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
        //        //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES.FixedHeight = 15f;
        //        //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES);

        //        //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
        //        //        {
        //        //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
        //        //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
        //        //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            ALLERGIESLine.Colspan = 2;
        //        //            ALLERGIESLine.FixedHeight = 15f;
        //        //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(ALLERGIESLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            ALLERGIESLine.Colspan = 2;
        //        //            ALLERGIESLine.FixedHeight = 15f;
        //        //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(ALLERGIESLine);
        //        //        }
        //        //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
        //        //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //ALLERGIES_Space.Colspan = 2;
        //        //        ALLERGIES_Space.FixedHeight = 15f;
        //        //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES_Space);

        //        //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
        //        //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY.FixedHeight = 15f;
        //        //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
        //        //        {
        //        //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Timesline));
        //        //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITYLine.FixedHeight = 15f;
        //        //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITYLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITYLine.FixedHeight = 15f;
        //        //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITYLine);
        //        //        }

        //        //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        DISABILITY_Date.FixedHeight = 15f;
        //        //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
        //        //        {
        //        //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Timesline));
        //        //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITY_Date_Line.FixedHeight = 15f;
        //        //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITY_Date_Line);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITY_Date_Line.FixedHeight = 15f;
        //        //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITY_Date_Line);
        //        //        }


        //        //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
        //        //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS.FixedHeight = 15f;
        //        //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS);

        //        //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
        //        //        {
        //        //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
        //        //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
        //        //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICATIONSLine.Colspan = 2;
        //        //            MEDICATIONSLine.FixedHeight = 15f;
        //        //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICATIONSLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICATIONSLine.Colspan = 2;
        //        //            MEDICATIONSLine.FixedHeight = 15f;
        //        //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICATIONSLine);
        //        //        }

        //        //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICATIONS_Space.Colspan = 2;
        //        //        MEDICATIONS_Space.FixedHeight = 15f;
        //        //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS_Space);

        //        //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
        //        //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL.FixedHeight = 15f;
        //        //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL);

        //        //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        MEDICAL_Space.FixedHeight = 15f;
        //        //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL_Space);

        //        //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
        //        //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Diet.FixedHeight = 15f;
        //        //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Diet);

        //        //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
        //        //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        DIET_Space.FixedHeight = 15f;
        //        //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIET_Space);

        //        //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
        //        //        House.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        House.FixedHeight = 15f;
        //        //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(House);

        //        //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
        //        //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        HH_Space.FixedHeight = 15f;
        //        //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HH_Space);

        //        //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
        //        //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp.FixedHeight = 15f;
        //        //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp);

        //        //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
        //        //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        DEVL_Space.FixedHeight = 15f;
        //        //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DEVL_Space);

        //        //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
        //        //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnd.FixedHeight = 15f;
        //        //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnd);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
        //        //        {
        //        //            string AltFund_Desc = string.Empty;
        //        //            foreach (DataRow drFUND in dtFUND.Rows)
        //        //            {
        //        //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
        //        //                {
        //        //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
        //        //                }
        //        //            }

        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
        //        //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        Trans.FixedHeight = 15f;
        //        //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
        //        //        {
        //        //            string Trans_Desc = string.Empty;
        //        //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
        //        //            foreach (CommonEntity agyEntity in lookClsTransport)
        //        //            {
        //        //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
        //        //                {
        //        //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
        //        //                }
        //        //            }

        //        //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
        //        //            {
        //        //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
        //        //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //                AltFnddesc.FixedHeight = 15f;
        //        //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //                MediaclTable.AddCell(AltFnddesc);
        //        //            }
        //        //            else
        //        //            {
        //        //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
        //        //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //                AltFnddesc.FixedHeight = 15f;
        //        //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //                MediaclTable.AddCell(AltFnddesc);
        //        //            }
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
        //        //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Pick.FixedHeight = 15f;
        //        //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Pick);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
        //        //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Drop.FixedHeight = 15f;
        //        //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Drop);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
        //        //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Last_Space.Colspan = 4;
        //        //        Last_Space.FixedHeight = 15f;
        //        //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Last_Space);

        //        //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
        //        //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature.FixedHeight = 15f;
        //        //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature);

        //        //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
        //        //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //SignatureLine.FixedHeight = 15f;
        //        //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(SignatureLine);

        //        //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        //Signature_Date.FixedHeight = 15f;
        //        //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date);

        //        //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature_Date_Line.FixedHeight = 15f;
        //        //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date_Line);

        //        //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
        //        //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //        Line_Last.Colspan = 6;
        //        //        //Line_Last.FixedHeight = 15f;
        //        //        Line_Last.BorderWidthBottom = 2f;
        //        //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
        //        //        MediaclTable.AddCell(Line_Last);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
        //        //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES.FixedHeight = 15f;
        //        //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES);

        //        //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIESLine.FixedHeight = 15f;
        //        //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIESLine);

        //        //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
        //        //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES_Space.Colspan = 2;
        //        //        ALLERGIES_Space.FixedHeight = 15f;
        //        //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES_Space);

        //        //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
        //        //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY.FixedHeight = 15f;
        //        //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY);

        //        //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITYLine.FixedHeight = 15f;
        //        //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITYLine);

        //        //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        DISABILITY_Date.FixedHeight = 15f;
        //        //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date);

        //        //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY_Date_Line.FixedHeight = 15f;
        //        //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date_Line);

        //        //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
        //        //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS.FixedHeight = 15f;
        //        //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS);

        //        //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONSLine.FixedHeight = 15f;
        //        //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONSLine);

        //        //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS_Space.Colspan = 2;
        //        //        MEDICATIONS_Space.FixedHeight = 15f;
        //        //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS_Space);

        //        //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
        //        //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL.FixedHeight = 15f;
        //        //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL);

        //        //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICALLine.FixedHeight = 15f;
        //        //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICALLine);

        //        //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL_Space.Colspan = 2;
        //        //        MEDICAL_Space.FixedHeight = 15f;
        //        //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL_Space);

        //        //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
        //        //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Diet.FixedHeight = 15f;
        //        //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Diet);

        //        //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //DIETLine.Colspan = 2;
        //        //        DIETLine.FixedHeight = 15f;
        //        //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIETLine);

        //        //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
        //        //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DIET_Space.Colspan = 2;
        //        //        DIET_Space.FixedHeight = 15f;
        //        //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIET_Space);

        //        //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
        //        //        House.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        House.FixedHeight = 15f;
        //        //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(House);

        //        //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //HOUSEHOLDLine.Colspan = 2;
        //        //        HOUSEHOLDLine.FixedHeight = 15f;
        //        //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HOUSEHOLDLine);

        //        //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
        //        //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        HOUSEHOLD_Space.Colspan = 2;
        //        //        HOUSEHOLD_Space.FixedHeight = 15f;
        //        //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HOUSEHOLD_Space);

        //        //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
        //        //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp.FixedHeight = 15f;
        //        //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp);

        //        //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //DevpLine.Colspan = 2;
        //        //        DevpLine.FixedHeight = 15f;
        //        //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DevpLine);

        //        //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
        //        //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp_Space.Colspan = 2;
        //        //        Devp_Space.FixedHeight = 15f;
        //        //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp_Space);

        //        //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
        //        //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnd.FixedHeight = 15f;
        //        //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnd);

        //        //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnddesc.FixedHeight = 15f;
        //        //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnddesc);

        //        //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
        //        //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        Trans.FixedHeight = 15f;
        //        //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans);


        //        //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Trans_Space.FixedHeight = 15f;
        //        //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans_Space);

        //        //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
        //        //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Pick.FixedHeight = 15f;
        //        //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Pick);


        //        //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        PickSpace.FixedHeight = 15f;
        //        //        PickSpace.Colspan = 3;
        //        //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(PickSpace);

        //        //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
        //        //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Drop.FixedHeight = 15f;
        //        //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Drop);


        //        //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        dropSpace.FixedHeight = 15f;
        //        //        dropSpace.Colspan = 3;
        //        //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(dropSpace);

        //        //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
        //        //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Last_Space.Colspan = 4;
        //        //        Last_Space.FixedHeight = 15f;
        //        //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Last_Space);

        //        //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
        //        //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature.FixedHeight = 15f;
        //        //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature);

        //        //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
        //        //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //SignatureLine.FixedHeight = 15f;
        //        //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(SignatureLine);

        //        //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        //Signature_Date.FixedHeight = 15f;
        //        //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date);

        //        //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature_Date_Line.FixedHeight = 15f;
        //        //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date_Line);

        //        //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
        //        //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //        Line_Last.Colspan = 6;
        //        //        //Line_Last.FixedHeight = 15f;
        //        //        Line_Last.BorderWidthBottom = 2f;
        //        //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
        //        //        MediaclTable.AddCell(Line_Last);
        //        //    }
        //        //}
        //        //else
        //        //{
        //        //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
        //        //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Med_Plan.FixedHeight = 15f;
        //        //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_Plan);

        //        //    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Med_Plan_Line.FixedHeight = 15f;
        //        //    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_Plan_Line);

        //        //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
        //        //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Med_No.FixedHeight = 15f;
        //        //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_No);


        //        //    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Med_No_Line.FixedHeight = 15f;
        //        //    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Med_No_Line);

        //        //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
        //        //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Ins_Catg.FixedHeight = 15f;
        //        //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Ins_Catg);


        //        //    PdfPCell Chld_Ins_Catg_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //    Chld_Ins_Catg_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Ins_Catg_Line.FixedHeight = 15f;
        //        //    Chld_Ins_Catg_Line.Colspan = 3;
        //        //    Chld_Ins_Catg_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Ins_Catg_Line);

        //        //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
        //        //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Doctor.FixedHeight = 15f;
        //        //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doctor);

        //        //    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Doctor_Line.FixedHeight = 15f;
        //        //    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doctor_Line);

        //        //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
        //        //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Doc_Phone.FixedHeight = 15f;
        //        //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doc_Phone);


        //        //    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Doc_Phone_Line.FixedHeight = 15f;
        //        //    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Doc_Phone_Line);

        //        //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
        //        //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Emer_Space2.Colspan = 4;
        //        //    Emer_Space2.FixedHeight = 10f;
        //        //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Emer_Space2);

        //        //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
        //        //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dent_Plan.FixedHeight = 15f;
        //        //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_Plan);

        //        //    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dent_Plan_Line.FixedHeight = 15f;
        //        //    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_Plan_Line);

        //        //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
        //        //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Dent_No.FixedHeight = 15f;
        //        //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_No);

        //        //    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dent_No_Line.FixedHeight = 15f;
        //        //    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dent_No_Line);

        //        //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
        //        //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dentist.FixedHeight = 15f;
        //        //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist);

        //        //    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dentist_Line.FixedHeight = 15f;
        //        //    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist_Line);

        //        //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
        //        //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //    //Emer_Space.Colspan = 2;
        //        //    Chld_Dentist_Phone.FixedHeight = 15f;
        //        //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist_Phone);

        //        //    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Chld_Dentist_Phone_Line.FixedHeight = 15f;
        //        //    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Chld_Dentist_Phone_Line);

        //        //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
        //        //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //    Emer_Space3.Colspan = 4;
        //        //    Emer_Space3.FixedHeight = 10f;
        //        //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //    MediaclTable.AddCell(Emer_Space3);

        //        //    if (caseconddet != null)
        //        //    {
        //        //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
        //        //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES.FixedHeight = 15f;
        //        //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES);

        //        //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
        //        //        {
        //        //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
        //        //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Times));
        //        //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            ALLERGIESLine.Colspan = 2;
        //        //            ALLERGIESLine.FixedHeight = 15f;
        //        //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(ALLERGIESLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            ALLERGIESLine.Colspan = 2;
        //        //            ALLERGIESLine.FixedHeight = 15f;
        //        //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(ALLERGIESLine);
        //        //        }
        //        //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
        //        //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //ALLERGIES_Space.Colspan = 2;
        //        //        ALLERGIES_Space.FixedHeight = 15f;
        //        //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES_Space);

        //        //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
        //        //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY.FixedHeight = 15f;
        //        //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
        //        //        {
        //        //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Times));
        //        //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITYLine.FixedHeight = 15f;
        //        //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITYLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITYLine.FixedHeight = 15f;
        //        //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITYLine);
        //        //        }

        //        //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        DISABILITY_Date.FixedHeight = 15f;
        //        //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
        //        //        {
        //        //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Times));
        //        //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITY_Date_Line.FixedHeight = 15f;
        //        //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITY_Date_Line);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            DISABILITY_Date_Line.FixedHeight = 15f;
        //        //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(DISABILITY_Date_Line);
        //        //        }


        //        //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
        //        //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS.FixedHeight = 15f;
        //        //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS);

        //        //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
        //        //        {
        //        //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
        //        //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Times));
        //        //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICATIONSLine.Colspan = 2;
        //        //            MEDICATIONSLine.FixedHeight = 15f;
        //        //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICATIONSLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICATIONSLine.Colspan = 2;
        //        //            MEDICATIONSLine.FixedHeight = 15f;
        //        //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICATIONSLine);
        //        //        }

        //        //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICATIONS_Space.Colspan = 2;
        //        //        MEDICATIONS_Space.FixedHeight = 15f;
        //        //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS_Space);

        //        //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
        //        //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL.FixedHeight = 15f;
        //        //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL);

        //        //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        MEDICAL_Space.FixedHeight = 15f;
        //        //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL_Space);

        //        //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
        //        //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Diet.FixedHeight = 15f;
        //        //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Diet);

        //        //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
        //        //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        DIET_Space.FixedHeight = 15f;
        //        //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIET_Space);

        //        //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
        //        //        House.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        House.FixedHeight = 15f;
        //        //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(House);

        //        //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
        //        //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        HH_Space.FixedHeight = 15f;
        //        //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HH_Space);

        //        //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
        //        //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp.FixedHeight = 15f;
        //        //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp);

        //        //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
        //        //        {
        //        //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            MEDICALLine.Colspan = 2;
        //        //            MEDICALLine.FixedHeight = 15f;
        //        //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(MEDICALLine);
        //        //        }

        //        //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
        //        //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //MEDICAL_Space.Colspan = 2;
        //        //        DEVL_Space.FixedHeight = 15f;
        //        //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DEVL_Space);

        //        //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
        //        //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnd.FixedHeight = 15f;
        //        //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnd);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
        //        //        {
        //        //            string AltFund_Desc = string.Empty;
        //        //            foreach (DataRow drFUND in dtFUND.Rows)
        //        //            {
        //        //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
        //        //                {
        //        //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
        //        //                }
        //        //            }

        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
        //        //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        Trans.FixedHeight = 15f;
        //        //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
        //        //        {
        //        //            string Trans_Desc = string.Empty;
        //        //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
        //        //            foreach (CommonEntity agyEntity in lookClsTransport)
        //        //            {
        //        //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
        //        //                {
        //        //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
        //        //                }
        //        //            }

        //        //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
        //        //            {
        //        //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
        //        //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //                AltFnddesc.FixedHeight = 15f;
        //        //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //                MediaclTable.AddCell(AltFnddesc);
        //        //            }
        //        //            else
        //        //            {
        //        //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
        //        //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //                AltFnddesc.FixedHeight = 15f;
        //        //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //                MediaclTable.AddCell(AltFnddesc);
        //        //            }
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
        //        //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Pick.FixedHeight = 15f;
        //        //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Pick);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
        //        //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Drop.FixedHeight = 15f;
        //        //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Drop);

        //        //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }
        //        //        else
        //        //        {
        //        //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //            AltFnddesc.FixedHeight = 15f;
        //        //            AltFnddesc.Colspan = 3;
        //        //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //            MediaclTable.AddCell(AltFnddesc);
        //        //        }

        //        //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
        //        //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Last_Space.Colspan = 4;
        //        //        Last_Space.FixedHeight = 15f;
        //        //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Last_Space);

        //        //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
        //        //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature.FixedHeight = 15f;
        //        //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature);

        //        //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
        //        //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //SignatureLine.FixedHeight = 15f;
        //        //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(SignatureLine);

        //        //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        //Signature_Date.FixedHeight = 15f;
        //        //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date);

        //        //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature_Date_Line.FixedHeight = 15f;
        //        //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date_Line);

        //        //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
        //        //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //        Line_Last.Colspan = 6;
        //        //        //Line_Last.FixedHeight = 15f;
        //        //        Line_Last.BorderWidthBottom = 2f;
        //        //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
        //        //        MediaclTable.AddCell(Line_Last);
        //        //    }
        //        //    else
        //        //    {
        //        //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
        //        //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES.FixedHeight = 15f;
        //        //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES);

        //        //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIESLine.FixedHeight = 15f;
        //        //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIESLine);

        //        //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
        //        //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        ALLERGIES_Space.Colspan = 2;
        //        //        ALLERGIES_Space.FixedHeight = 15f;
        //        //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(ALLERGIES_Space);

        //        //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
        //        //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY.FixedHeight = 15f;
        //        //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY);

        //        //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITYLine.FixedHeight = 15f;
        //        //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITYLine);

        //        //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        DISABILITY_Date.FixedHeight = 15f;
        //        //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date);

        //        //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DISABILITY_Date_Line.FixedHeight = 15f;
        //        //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DISABILITY_Date_Line);

        //        //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
        //        //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS.FixedHeight = 15f;
        //        //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS);

        //        //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONSLine.FixedHeight = 15f;
        //        //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONSLine);

        //        //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICATIONS_Space.Colspan = 2;
        //        //        MEDICATIONS_Space.FixedHeight = 15f;
        //        //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICATIONS_Space);

        //        //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
        //        //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL.FixedHeight = 15f;
        //        //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL);

        //        //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICALLine.FixedHeight = 15f;
        //        //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICALLine);

        //        //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
        //        //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        MEDICAL_Space.Colspan = 2;
        //        //        MEDICAL_Space.FixedHeight = 15f;
        //        //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(MEDICAL_Space);

        //        //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
        //        //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Diet.FixedHeight = 15f;
        //        //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Diet);

        //        //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //DIETLine.Colspan = 2;
        //        //        DIETLine.FixedHeight = 15f;
        //        //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIETLine);

        //        //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
        //        //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        DIET_Space.Colspan = 2;
        //        //        DIET_Space.FixedHeight = 15f;
        //        //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DIET_Space);

        //        //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
        //        //        House.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        House.FixedHeight = 15f;
        //        //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(House);

        //        //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //HOUSEHOLDLine.Colspan = 2;
        //        //        HOUSEHOLDLine.FixedHeight = 15f;
        //        //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HOUSEHOLDLine);

        //        //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
        //        //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        HOUSEHOLD_Space.Colspan = 2;
        //        //        HOUSEHOLD_Space.FixedHeight = 15f;
        //        //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(HOUSEHOLD_Space);

        //        //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
        //        //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp.FixedHeight = 15f;
        //        //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp);

        //        //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //DevpLine.Colspan = 2;
        //        //        DevpLine.FixedHeight = 15f;
        //        //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(DevpLine);

        //        //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
        //        //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Devp_Space.Colspan = 2;
        //        //        Devp_Space.FixedHeight = 15f;
        //        //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Devp_Space);

        //        //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
        //        //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnd.FixedHeight = 15f;
        //        //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnd);

        //        //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        AltFnddesc.FixedHeight = 15f;
        //        //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(AltFnddesc);

        //        //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
        //        //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        Trans.FixedHeight = 15f;
        //        //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans);


        //        //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Trans_Space.FixedHeight = 15f;
        //        //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Trans_Space);

        //        //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
        //        //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Pick.FixedHeight = 15f;
        //        //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Pick);


        //        //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        PickSpace.FixedHeight = 15f;
        //        //        PickSpace.Colspan = 3;
        //        //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(PickSpace);

        //        //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
        //        //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Drop.FixedHeight = 15f;
        //        //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Drop);


        //        //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
        //        //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        dropSpace.FixedHeight = 15f;
        //        //        dropSpace.Colspan = 3;
        //        //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(dropSpace);

        //        //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
        //        //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        Last_Space.Colspan = 4;
        //        //        Last_Space.FixedHeight = 15f;
        //        //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Last_Space);

        //        //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
        //        //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature.FixedHeight = 15f;
        //        //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature);

        //        //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
        //        //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //SignatureLine.FixedHeight = 15f;
        //        //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(SignatureLine);

        //        //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
        //        //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        //        //DISABILITY_Space.Colspan = 2;
        //        //        //Signature_Date.FixedHeight = 15f;
        //        //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date);

        //        //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
        //        //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //        //Signature_Date_Line.FixedHeight = 15f;
        //        //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        //        MediaclTable.AddCell(Signature_Date_Line);

        //        //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
        //        //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //        Line_Last.Colspan = 6;
        //        //        //Line_Last.FixedHeight = 15f;
        //        //        Line_Last.BorderWidthBottom = 2f;
        //        //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
        //        //        MediaclTable.AddCell(Line_Last);
        //        //    }
        //        //}

        //        //}
        //        //document.Add(MediaclTable);
        //        #endregion
        //    }

        //    if (Privileges.ModuleCode == "05")
        //    {
        //        PdfPTable Declartion = new PdfPTable(2);
        //        Declartion.TotalWidth = 750f;
        //        Declartion.WidthPercentage = 100;
        //        Declartion.LockedWidth = true;
        //        float[] Declartion_widths = new float[] { 80f, 40f };
        //        Declartion.SetWidths(Declartion_widths);
        //        Declartion.HorizontalAlignment = Element.ALIGN_CENTER;
        //        Declartion.SpacingBefore = 20f;

        //        PdfPCell Declartion_DESC = new PdfPCell(new Phrase("The information provided is true and correct to the best of my knowledge and belief. I am aware that I am subject to prosecution for providing false or fraudulent information. I understand I may request a hearing to appeal a denial of eligibility, amount of assistancereceived, or a delay of service delivery.", Times));
        //        Declartion_DESC.Colspan = 2;
        //        Declartion_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
        //        //SerVice_DESC.FixedHeight = 15f;
        //        Declartion_DESC.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Declartion.AddCell(Declartion_DESC);

        //        PdfPCell App_Sign = new PdfPCell(new Phrase("Applicant Signature: ______________________________________", Times));
        //        App_Sign.HorizontalAlignment = Element.ALIGN_LEFT;
        //        App_Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Declartion.AddCell(App_Sign);

        //        PdfPCell App_Date = new PdfPCell(new Phrase("Date: ______________________", Times));
        //        App_Date.HorizontalAlignment = Element.ALIGN_LEFT;
        //        App_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Declartion.AddCell(App_Date);

        //        document.Add(Declartion);
        //    }

        //    #region Last Paragarph
        //    if (!string.IsNullOrEmpty(Attention.Trim()))
        //    {
        //        document.NewPage();

        //        PdfPTable CTAttn = new PdfPTable(2);
        //        CTAttn.TotalWidth = 750f;
        //        CTAttn.WidthPercentage = 100;
        //        CTAttn.LockedWidth = true;
        //        float[] CTAttn_widths = new float[] { 80f, 40f };
        //        CTAttn.SetWidths(CTAttn_widths);
        //        CTAttn.HorizontalAlignment = Element.ALIGN_CENTER;
        //        CTAttn.SpacingBefore = 20f;

        //        PdfPCell S1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
        //        S1.Colspan = 2;
        //        S1.HorizontalAlignment = Element.ALIGN_CENTER;
        //        S1.FixedHeight = 15f;
        //        S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(S1);

        //        PdfPCell S2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
        //        S2.Colspan = 2;
        //        S2.HorizontalAlignment = Element.ALIGN_CENTER;
        //        S2.FixedHeight = 15f;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(S2);

        //        PdfPCell S3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
        //        S3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S3.FixedHeight = 15f;
        //        S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(S3);

        //        PdfPCell S4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
        //        S4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        S4.FixedHeight = 15f;
        //        S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(S4);

        //        PdfPCell S5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
        //        S5.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S5.FixedHeight = 15f;
        //        S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(S5);

        //        if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //        {
        //            PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
        //            S6.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            S6.FixedHeight = 15f;
        //            S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            CTAttn.AddCell(S6);
        //        }
        //        else
        //        {
        //            PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
        //            S6.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            S6.FixedHeight = 15f;
        //            S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            CTAttn.AddCell(S6);
        //        }

        //        PdfPCell P1 = new PdfPCell(new Phrase("", Times));
        //        P1.Colspan = 2;
        //        P1.FixedHeight = 20f;
        //        P1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        P1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(P1);


        //        PdfPCell A1 = new PdfPCell(new Phrase(Attention.Trim(), Times));
        //        A1.Colspan = 2;
        //        A1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        CTAttn.AddCell(A1);

        //        document.Add(CTAttn);

        //    }

        //    #endregion

        //    if (ShortName == "UETHDA")
        //    {
        //        document.NewPage();
        //        PdfPTable Uethdadecl = new PdfPTable(2);
        //        Uethdadecl.TotalWidth = 750f;
        //        Uethdadecl.WidthPercentage = 100;
        //        Uethdadecl.LockedWidth = true;
        //        float[] Declartion_widths = new float[] { 100f, 50f };
        //        Uethdadecl.SetWidths(Declartion_widths);
        //        Uethdadecl.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //Uethdadecl.SpacingBefore = 20f;

        //        PdfPCell E1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
        //        E1.Colspan = 2;
        //        E1.HorizontalAlignment = Element.ALIGN_CENTER;
        //        E1.FixedHeight = 15f;
        //        E1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(E1);

        //        PdfPCell E2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
        //        E2.Colspan = 2;
        //        E2.HorizontalAlignment = Element.ALIGN_CENTER;
        //        E2.FixedHeight = 15f;
        //        E2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(E2);

        //        PdfPCell E3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
        //        //E3.Colspan = 2;
        //        E3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        E3.FixedHeight = 13f;
        //        E3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(E3);

        //        PdfPCell E4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
        //        //E4.Colspan = 4;
        //        E4.HorizontalAlignment = Element.ALIGN_RIGHT;
        //        E4.FixedHeight = 13f;
        //        E4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(E4);

        //        PdfPCell E5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
        //        //E5.Colspan = 2;
        //        E5.HorizontalAlignment = Element.ALIGN_LEFT;
        //        E5.FixedHeight = 13f;
        //        E5.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(E5);

        //        if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
        //        {
        //            PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
        //            //E6.Colspan = 4;
        //            E6.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            E6.FixedHeight = 13f;
        //            E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Uethdadecl.AddCell(E6);
        //        }
        //        else
        //        {
        //            PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
        //            //E6.Colspan = 4;
        //            E6.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            E6.FixedHeight = 13f;
        //            E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Uethdadecl.AddCell(E6);
        //        }

        //        PdfPCell S = new PdfPCell(new Phrase("", TableFont));
        //        S.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S.Colspan = 2;
        //        S.FixedHeight = 15f;
        //        S.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S);

        //        PdfPCell A1 = new PdfPCell(new Phrase("Applicant was:     Approved ________      Denied________    (Over Income________       No Proof________       No Need________)", TableFont));
        //        A1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A1.Colspan = 2;
        //        A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A1);

        //        PdfPCell A2 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
        //        A2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A2.Colspan = 2;
        //        A2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A2);

        //        PdfPCell S1 = new PdfPCell(new Phrase("", TableFont));
        //        S1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S1.Colspan = 2;
        //        S1.FixedHeight = 20f;
        //        S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S1);

        //        PdfPCell A3 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
        //        A3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A3.Colspan = 2;
        //        A3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A3);

        //        PdfPCell A4 = new PdfPCell(new Phrase("Certification Period:                        Service                                                                  Open                                  Close", TableFont));
        //        A4.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A4.Colspan = 2;
        //        A4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A4);

        //        for (int i = 0; i < 3; i++)
        //        {
        //            PdfPCell A5 = new PdfPCell(new Phrase("_____________________________________________________                   __/__/__                            __/__/__", TableFont));
        //            A5.HorizontalAlignment = Element.ALIGN_LEFT;
        //            A5.Colspan = 2;
        //            A5.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Uethdadecl.AddCell(A5);
        //        }

        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 2;
        //        S2.FixedHeight = 20f;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S2);

        //        PdfPCell A6 = new PdfPCell(new Phrase(" CSBG Statement of Need:", TableFont));
        //        A6.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A6.Colspan = 2;
        //        A6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A6);

        //        PdfPCell A7 = new PdfPCell(new Phrase("Why was client requesting Assistance?", TableFont));
        //        A7.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A7.Colspan = 2;
        //        A7.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A7);

        //        for (int j = 0; j < 3; j++)
        //        {
        //            PdfPCell A8 = new PdfPCell(new Phrase("________________________________________________________________________", TableFont));
        //            A8.HorizontalAlignment = Element.ALIGN_LEFT;
        //            A8.Colspan = 2;
        //            A8.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //            Uethdadecl.AddCell(A8);
        //        }

        //        PdfPCell S3 = new PdfPCell(new Phrase("", TableFont));
        //        S3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S3.Colspan = 2;
        //        S3.FixedHeight = 20f;
        //        S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S3);

        //        PdfPCell A9 = new PdfPCell(new Phrase("I certify that all of the information provided by me is true and correct.  I authorize the verification of any and all information provided herein to determine my eligibility and acknowledge I have been informed of the appeal process.  I understand that I will be notified in writing of my eligibility status.  Identifying information provided by you for determination of your eligibility for CSBG and for the provision of services from the program will be considered confidential, unless otherwise authorized or required by law, will not be shared with any other persons or agencies except for the purposes directly related to the administration of the CSBG program.  I attest under penalty of perjury that all persons applying for or receiving aid are either a United States citizen or qualified alien as defined by 8 U.S.C. 1641(b), or eligible immigrants.  I swear under penalty of perjury (a crime for lying under oath) and all other applicable penalties that the statements made on this application, any attachments, and to whoever interviewed me are true and correct.  I understand that anyone who fraudulently covers up a material fact or who knowingly gives false information for the receipt of CSBG assistance is liable upon conviction of a fine of $10,000 or imprisonment for not more than five years or both.", TableFont));
        //        A9.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        //        A9.Colspan = 2;
        //        A9.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A9);

        //        PdfPCell S4 = new PdfPCell(new Phrase("", TableFont));
        //        S4.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S4.Colspan = 2;
        //        S4.FixedHeight = 20f;
        //        S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S4);

        //        PdfPCell A10 = new PdfPCell(new Phrase("By signing, I agree that the information contained in my application may be shared with other agencies from which I seek additional services.  If I DO NOT want my information shared, Please initial here_______.", TableFont));
        //        A10.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A10.Colspan = 2;
        //        A10.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A10);

        //        PdfPCell S5 = new PdfPCell(new Phrase("", TableFont));
        //        S5.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S5.Colspan = 2;
        //        S5.FixedHeight = 30f;
        //        S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S5);

        //        PdfPCell A11 = new PdfPCell(new Phrase("Applicant Signature_________________________________                                 Date____________", TableFont));
        //        A11.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A11.Colspan = 2;
        //        A11.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A11);

        //        PdfPCell S6 = new PdfPCell(new Phrase("", TableFont));
        //        S6.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S6.Colspan = 2;
        //        S6.FixedHeight = 20f;
        //        S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S6);

        //        PdfPCell A12 = new PdfPCell(new Phrase("Case Worker/Intake Worker__________________________                                 Date____________", TableFont));
        //        A12.HorizontalAlignment = Element.ALIGN_LEFT;
        //        A12.Colspan = 2;
        //        A12.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A12);

        //        PdfPCell S7 = new PdfPCell(new Phrase("", TableFont));
        //        S7.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S7.Colspan = 2;
        //        S7.FixedHeight = 15f;
        //        S7.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(S7);

        //        PdfPCell A13 = new PdfPCell(new Phrase("No person on the basis of race, color, national origin, sex, age, disability, ancestry, status as a veteran, or any other characteristics protected by federal, state, or local will be excluded from participation in, or be denied benefits of, or be otherwise subjected to discrimination in the operation of CSBG.", TableFont));
        //        A13.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        //        A13.Colspan = 2;
        //        A13.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Uethdadecl.AddCell(A13);

        //        document.Add(Uethdadecl);

        //    }

        //    document.Close();
        //    fs.Close();
        //    fs.Dispose();

        //    FrmViewer objfrm = new FrmViewer(PdfName);
        //    objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
        //    objfrm.ShowDialog();

        //}

        //#endregion

        #region CABA APP

        private void On_SaveFormClosed_CABA()
        {
            Random_Filename = null;

            PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }


            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document();
            document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
            cb = writer.DirectContent;

            //Agency Control Table
            string Attention = string.Empty, Roma_Switch = string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();
                Roma_Switch = ds.Tables[0].Rows[0]["ACR_ROMA_SWITCH"].ToString().Trim();
            }

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            //Casesite Table
            List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
            CaseSiteEntity Search_Site = new CaseSiteEntity(true);
            Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
            Search_Site.SiteROOM = "0000";
            SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");

            //Services Table
            List<CaseMSTSER> MSTSER_List = new List<CaseMSTSER>();
            CaseMSTSER Search_MSTSER = new CaseMSTSER(true);
            Search_MSTSER.Agency = BaseForm.BaseAgency; Search_MSTSER.Dept = BaseForm.BaseDept; Search_MSTSER.Program = BaseForm.BaseProg;
            Search_MSTSER.Year = BaseForm.BaseYear; Search_MSTSER.AppNo = BaseForm.BaseApplicationNo;
            MSTSER_List = _model.CaseMstData.Browse_MSTSER(Search_MSTSER, "Browse");

            //AddCust Table
            List<AddCustEntity> ADDCUST_List = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            ADDCUST_List = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

            //SerCust Table
            List<CustomQuestionsEntity> SerCust = _model.CaseMstData.GetSERCustomQuestionAnswers(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty, "SERQUES");

            //CUSTFLDS Table for custom Questions
            List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
            CustfldsEntity Search_CustQues = new CustfldsEntity(true);
            custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

            List<CustRespEntity> custResp_List = new List<CustRespEntity>();
            CustRespEntity Search_CustResp = new CustRespEntity(true);
            Search_CustResp.ScrCode = "CASE2001";
            custResp_List = _model.FieldControls.Browse_CUSTRESP(Search_CustResp, "Browse");

            //CaseHie Table
            DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
            DataTable dtCaseHie = dsCaseHie.Tables[0];

            //Getting CaseWorker
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];

            //CaseIncome Table
            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];
            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

            DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCasediff = dsCaseDiff.Tables[0];

            //CHLDMST Table
            ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //CHLDEMER TABLE
            List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);

            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            //DataTable dtrelation = Relations.Tables[0];
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }

            List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

            DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "A");
            DataTable dtFUND = dsFUND.Tables[0];

            cb.BeginText();
            X_Pos = 400; Y_Pos = 580;
            cb.SetFontAndSize(bf_helv, 13);
            //cb.SetColorFill(BaseColor.BLUE.Darker());
            string Header_Desc = string.Empty; string Form_Selection = string.Empty;

            //if (Privileges.ModuleCode == "03")
            //{
            string ShortName = string.Empty;
            string AgencyName = string.Empty; string SerHie = "N";
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ShortName = AGYShortName;//ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                if (ds.Tables[0].Rows[0]["ACR_SERVINQ_CASEHIE"].ToString().Trim() == "1") SerHie = "Y"; else SerHie = "N";
            }

            if (Privileges.ModuleCode != "05")
            {
                if (dtCaseHie.Rows.Count > 0)
                {
                    foreach (DataRow drCasehie in dtCaseHie.Rows)
                    {
                        if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
                        {
                            AgencyName = drCasehie["HIE_NAME"].ToString().Trim(); break;
                        }
                    }

                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " - INTAKE APPLICATION", X_Pos, Y_Pos - 25, 0);
                    Header_Desc = ShortName + " - INTAKE APPLICATION";
                    Form_Selection = AgencyName;//"Casemanagement Application";

                    //cb.SetFontAndSize(bf_helv, 9);
                    //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 40, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos-40, 0);

                    cb.SetFontAndSize(bf_helv, 13);
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);
                }
                cb.SetFontAndSize(bf_helv, 9);
                X_Pos = 30; Y_Pos -= 55;
            }
            else if (Privileges.ModuleCode == "05")
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
                cb.SetFontAndSize(bf_helv, 9);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
                string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
                string phone = string.Empty; string Fax = string.Empty;
                Header_Desc = "Application For Assistance";
                //To dispalying the Programme Address
                if (SiteList.Count > 0)
                {
                    //drCaseSite = dsCaseSite.Tables[0].Rows[0];

                    if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
                        SiteName = SiteList[0].SiteNAME.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
                        Site_street = "," + SiteList[0].SiteSTREET.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
                        Site_city = "," + SiteList[0].SiteCITY.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
                        Site_state = "," + SiteList[0].SiteSTATE.Trim();
                    if (SiteList[0].SiteZIP.Trim() != "0")
                        Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SitePHONE.Trim()))
                        phone = SiteList[0].SitePHONE.Trim();
                    if (!string.IsNullOrEmpty(SiteList[0].SiteFAX.Trim()))
                        Fax = SiteList[0].SiteFAX.Trim();
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

                //To Print the Verifier Name on Application
                string Intake_Worker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            Intake_Worker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(phone.Trim()))
                {
                    MaskedTextBox mskphn = new MaskedTextBox();
                    mskphn.Mask = "(000)000-0000"; mskphn.Text = phone;
                    string Phnnum = "Phone: " + mskphn.Text;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Phnnum, X_Pos, Y_Pos - 26, 0);
                }

                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);

                if (!string.IsNullOrEmpty(Fax.Trim()))
                {
                    MaskedTextBox mskfax = new MaskedTextBox();
                    mskfax.Mask = "(000)000-0000"; mskfax.Text = Fax;
                    string Faxnum = "Fax: " + mskfax.Text;
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Faxnum, X_Pos, Y_Pos - 39, 0);
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);

                if (!string.IsNullOrEmpty(Intake_Worker))
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 52, 0);
                else
                    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 52, 0);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);

                cb.SetFontAndSize(bf_helv, 9);
                X_Pos = 30; Y_Pos -= 72;
            }

            #region Comment blocks
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 40, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 40, 0);

            //}
            //else if (Privileges.ModuleCode == "02")
            //{
            //    string ShortName = string.Empty;
            //    if (dtCaseHie.Rows.Count > 0)
            //    {
            //        foreach (DataRow drCasehie in dtCaseHie.Rows)
            //        {
            //            if (drCasehie["Code"].ToString() == BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg)
            //            {
            //                ShortName = drCasehie["HIE_SHORT_NAME"].ToString().Trim(); break;
            //            }
            //        }
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ShortName + " – EARLY CARE & EDUCATION ", X_Pos, Y_Pos - 25, 0);
            //        Header_Desc = ShortName + " – EARLY CARE & EDUCATION ";

            //            Form_Selection = "CASE MANAGEMENT APPLICATION";

            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 40, 0);

            //    }

            //    cb.SetFontAndSize(bf_helv, 9);
            //    X_Pos = 30; Y_Pos -= 50;
            //}
            //else //if (Privileges.ModuleCode == "05" )
            //{
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Application For Assistance", X_Pos, Y_Pos, 0);
            //    cb.SetFontAndSize(bf_helv, 9);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "OFFICE USE ONLY ________________________________", 780, Y_Pos, 0);
            //    string SiteName = null, Site_city = null, Site_street = null, Site_state = null; string Site_zipcode = null;
            //    Header_Desc = "Application For Assistance";
            //    //To dispalying the Programme Address
            //    if (SiteList.Count > 0)
            //    {
            //        //drCaseSite = dsCaseSite.Tables[0].Rows[0];

            //        if (!string.IsNullOrEmpty(SiteList[0].SiteNAME.Trim()))
            //            SiteName = SiteList[0].SiteNAME.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTREET.Trim()))
            //            Site_street = "," + SiteList[0].SiteSTREET.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteCITY.Trim()))
            //            Site_city = "," + SiteList[0].SiteCITY.Trim();
            //        if (!string.IsNullOrEmpty(SiteList[0].SiteSTATE.Trim()))
            //            Site_state = "," + SiteList[0].SiteSTATE.Trim();
            //        if (SiteList[0].SiteZIP.Trim() != "0")
            //            Site_zipcode = "," + SiteList[0].SiteZIP.Trim();
            //    }
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, SiteName + Site_street + Site_city + Site_state + Site_zipcode, X_Pos, Y_Pos - 13, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "CABA# ___________________________________________", 780, Y_Pos - 13, 0);

            //    //To Print the Verifier Name on Application
            //    string Intake_Worker = null;
            //    if (dtVerifier.Rows.Count > 0)
            //    {
            //        foreach (DataRow drVerifier in dtVerifier.Rows)
            //        {
            //            if (drCaseMST["MST_INTAKE_WORKER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
            //            {
            //                Intake_Worker = drVerifier["NAME"].ToString().Trim();
            //                break;
            //            }
            //        }
            //    }
            //    if (!string.IsNullOrEmpty(Intake_Worker))
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Intake_Worker, X_Pos, Y_Pos - 26, 0);
            //    else
            //        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "  ", X_Pos, Y_Pos - 26, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Search Results ______________________________________", 780, Y_Pos - 26, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 39, 0);
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "___________________________________________________", 780, Y_Pos - 52, 0);
            //    cb.SetFontAndSize(bf_helv, 9);
            //    X_Pos = 30; Y_Pos -= 72;
            //}

            //cb.SetFontAndSize(bf_helv, 9);
            //X_Pos = 30; Y_Pos -= 72;



            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Timesline), 780, Y_Pos, 0);

            ////Y_Pos -= 13;
            #endregion

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 700, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToString("g"), Timesline), 780, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 720, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("____________", Times), 780, Y_Pos, 0);

            Y_Pos -= 13;
            if (Privileges.ModuleCode == "05")
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a citizen or naturalized Alien?", X_Pos, Y_Pos, 0);
            else
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommdation or special help to complete this application?", X_Pos, Y_Pos, 0);

            /************************************CheckBoxes****************************/
            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            RadioCheckField checkbox;
            PdfFormField SField;
            if (Privileges.ModuleCode == "05")
            {
                string SnpResident = string.Empty;
                foreach (DataRow drsnp in dtCaseSNP.Rows)
                {
                    if (drsnp["SNP_FAMILY_SEQ"].ToString() == drCaseMST["MST_FAMILY_SEQ"].ToString())
                    {
                        SnpResident = drsnp["SNP_RESIDENT"].ToString().Trim();
                    }
                }


                rect = new iTextSharp.text.Rectangle(190, Y_Pos + 8, 198, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "Yes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                if (SnpResident == "D") checkbox.Checked = true;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 200, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(220, Y_Pos + 8, 228, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "No", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                if (SnpResident == "E" || SnpResident == "C") checkbox.Checked = true;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 230, Y_Pos, 0);

                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If no, are you a qualified Alien? ", 320, Y_Pos, 0);

                rect = new iTextSharp.text.Rectangle(450, Y_Pos + 8, 458, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                if (SnpResident == "E") checkbox.Checked = true;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 460, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(480, Y_Pos + 8, 488, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                if (SnpResident == "D" || SnpResident == "C") checkbox.Checked = true;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 490, Y_Pos, 0);
            }
            else
            {
                rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
                //rect.Rotate();
                checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);
            }

            if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
            {
                DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
                DataRow drSITE = dsSITE.Tables[0].Rows[0];
                string Site_Name = null;
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                Site_Name = drSITE["SiteName"].ToString().Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 2);
                cb.LineTo(705, Y_Pos - 2);
                cb.Stroke();
            }


            X_Pos = 30; Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);
            //string Zip = string.Empty;
            //if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()))
            //    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            string Zip = string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

            string Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;


            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address ", X_Pos, Y_Pos, 0);

            string House_NO = null, Street1 = null, city = null, state = null, zip = null, DApt = null; string DSuffix = string.Empty;
            if (dtCasediff.Rows.Count > 0)
            {
                foreach (DataRow drCaseDiff in dtCasediff.Rows)
                {
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
                        House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_APT"].ToString().Trim()))
                        DApt = drCaseDiff["DIFF_APT"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
                        DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
                        Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
                        city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
                        state = drCaseDiff["DIFF_STATE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
                        zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
                    if (zip == "00000") zip = ""; else zip = ", " + zip;
                }
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1+DApt + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            }
            else
            {
                //cb.SetLineWidth(0.5f);
                ////cb.SetLineCap(5);
                //cb.MoveTo(X_Pos + 72, Y_Pos);
                //cb.LineTo(210, Y_Pos);
                //cb.Stroke();
                //string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
                //string Zip = string.Empty;
                if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                    Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                    Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                    Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                    Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() ;
                if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                    HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
                string Comma=string.Empty;
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()) && (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()) || !string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim())))
                Comma=", ";

                Address = HN + Street + Suffix +Comma+ Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            }



            string Language = null;
            DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
            DataTable dtLang = dsLang.Tables[0];
            foreach (DataRow drLang in dtLang.Rows)
            {
                if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
                {
                    Language = drLang["LookUpDesc"].ToString().Trim(); break;
                }
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 400, Y_Pos, 0);//380 changed on 05/22/2017
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 470, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone ", 640, Y_Pos, 0);
            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);

            //if (!string.IsNullOrEmpty(drCaseMST["MST_SITE"].ToString().Trim()))
            //{
            //    DataSet dsSITE = DatabaseLayer.CaseMst.GetSITEDESC(BaseForm.BaseAgency, drCaseMST["MST_SITE"].ToString());
            //    DataRow drSITE = dsSITE.Tables[0].Rows[0];
            //    string Site_Name = null;
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
            //    Site_Name = drSITE["SiteName"].ToString().Trim();
            //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_SITE"].ToString(), Timesline), 650, Y_Pos, 0);
            //}
            //else
            //{
            //    cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Site : ", 640, Y_Pos, 0);
            //    cb.SetLineWidth(0.5f);
            //    //cb.SetLineCap(5);
            //    cb.MoveTo(650, Y_Pos - 2);
            //    cb.LineTo(705, Y_Pos - 2);
            //    cb.Stroke();
            //}
            Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Service Address", X_Pos, Y_Pos, 0);

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            //string House_NO = null, Street1 = null, city = null, state = null, zip = null; string DSuffix = string.Empty;
            //if (dtCasediff.Rows.Count > 0)
            //{
            //    foreach (DataRow drCaseDiff in dtCasediff.Rows)
            //    {
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
            //            House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
            //            DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
            //            Street1 = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
            //            city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
            //            state = drCaseDiff["DIFF_STATE"].ToString().Trim();
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
            //            zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
            //        if (zip == "00000") zip = ""; else zip = ", " + zip;
            //    }
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street1 + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            //}
            //else
            //{
            //    //cb.SetLineWidth(0.5f);
            //    ////cb.SetLineCap(5);
            //    //cb.MoveTo(X_Pos + 72, Y_Pos);
            //    //cb.LineTo(210, Y_Pos);
            //    //cb.Stroke();
            //    //string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            //    //string Zip = string.Empty;
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
            //        Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
            //        Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
            //        Street = drCaseMST["MST_STREET"].ToString().Trim() + " ";
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
            //        Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
            //        HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            //    if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
            //        Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

            //    Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;

            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address, Timesline), X_Pos + 72, Y_Pos, 0);
            //}


            if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email : ", Times), 400, Y_Pos, 0);//380 changed on 05/22/2017
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 430, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 400, Y_Pos, 0);//380 changed on 05/22/2017
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(430, Y_Pos);
                cb.LineTo(520, Y_Pos);
                cb.Stroke();
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Number", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskCell = new MaskedTextBox();
                mskCell.Mask = "(000)000-0000";
                mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone ", 640, Y_Pos, 0);
            //MaskedTextBox mskPhn = new MaskedTextBox();
            //mskPhn.Mask = "(000)000-0000";
            //mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);

            Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            //string House_NO = null, Street = null, city = null, state = null, zip = null;
            //if (dtCasediff.Rows.Count > 0)
            //{
            //    foreach (DataRow drCaseDiff in dtCasediff.Rows)
            //    {
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
            //            House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
            //            Street = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
            //            city = drCaseDiff["DIFF_STREET"].ToString().Trim() + ",";
            //        if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
            //            state = drCaseDiff["DIFF_STATE"].ToString().Trim() + ",";
            //        zip = drCaseDiff["DIFF_ZIP"].ToString().Trim();
            //    }
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
            //}
            //else
            //{
            //    //cb.SetLineWidth(0.5f);
            //    ////cb.SetLineCap(5);
            //    //cb.MoveTo(X_Pos + 72, Y_Pos);
            //    //cb.LineTo(210, Y_Pos);
            //    //cb.Stroke();
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
            //}

            //changed on 01/20/2016
            //////cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Message Number", 380, Y_Pos, 0);
            //////if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            //////{
            //////    MaskedTextBox mskMessage = new MaskedTextBox();
            //////    mskMessage.Mask = "(000)000-0000";
            //////    mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
            //////    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 450, Y_Pos, 0);
            //////}
            //////else
            //////{
            //////    cb.SetLineWidth(0.5f);
            //////    //cb.SetLineCap(5);
            //////    cb.MoveTo(450, Y_Pos);
            //////    cb.LineTo(505, Y_Pos);
            //////    cb.Stroke();
            //////}

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Message Number", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskMessage = new MaskedTextBox();
                mskMessage.Mask = "(000)000-0000";
                mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Number", 640, Y_Pos, 0);
            //if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            //{
            //    MaskedTextBox mskCell = new MaskedTextBox();
            //    mskCell.Mask = "(000)000-0000";
            //    mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 650, Y_Pos, 0);
            //}
            //else
            //{
            //    cb.SetLineWidth(0.5f);
            //    //cb.SetLineCap(5);
            //    cb.MoveTo(650, Y_Pos - 3);
            //    cb.LineTo(705, Y_Pos - 3);
            //    cb.Stroke();
            //}

            //Y_Pos -= 13;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Message Number", 640, Y_Pos, 0);
            //if (!string.IsNullOrEmpty(drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim()))
            //{
            //    MaskedTextBox mskMessage = new MaskedTextBox();
            //    mskMessage.Mask = "(000) 000-0000";
            //    mskMessage.Text = drCaseMST["MST_MESSAGE_PHONE"].ToString().Trim();
            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskMessage.Text, Timesline), 650, Y_Pos, 0);
            //}
            //else
            //{
            //    cb.SetLineWidth(0.5f);
            //    //cb.SetLineCap(5);
            //    cb.MoveTo(650, Y_Pos - 3);
            //    cb.LineTo(705, Y_Pos - 3);
            //    cb.Stroke();
            //}

            Y_Pos -= 8;
            SetLine();
            Y_Pos -= 20;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Housing Situation", X_Pos, Y_Pos, 0);
            DataSet dsHouseMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            string strMainData = dsHouseMain.Tables[0].Rows[0]["Agy_9"].ToString();
            string CodeColSubscript = string.Empty, DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsHouseMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();


            //DataSet dsHousing = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.HOUSINGTYPES);
            DataSet dsHousing = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.HOUSINGTYPES);
            DataTable dtHousing = dsHousing.Tables[0];
            PdfFormField Field;
            X_Pos = 140;
            string CheckTitle = string.Empty;
            foreach (DataRow drHousing in dtHousing.Rows)
            {
                if (drHousing["AGY_ACTIVE"].ToString() == "Y" ||
                    (drHousing["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_HOUSING"].ToString().Trim()) && drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drHousing[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_HOUSING"].ToString().Trim() == drHousing[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHousing[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 140;
                        Y_Pos -= 13;
                    }
                }
            }

            Y_Pos -= 25; X_Pos = 30;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Family Type", X_Pos, Y_Pos, 0);
            X_Pos = 140;

            DataSet dsFamilyMain = Captain.DatabaseLayer.AgyTab.GetAgyTab(Consts.AgyTab.HOUSINGTYPES);
            strMainData = dsFamilyMain.Tables[0].Rows[0]["Agy_9"].ToString();
            CodeColSubscript = string.Empty; DescColSubscript = string.Empty;
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim()))
                CodeColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_ACTIVE"].ToString().Trim();
            if (!string.IsNullOrEmpty(dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim()))
                DescColSubscript = "AGY_" + dsFamilyMain.Tables[0].Rows[0]["AGY_DEFAULT"].ToString().Trim();

            //DataSet dsFamilyType = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.FAMILYTYPE);
            DataSet dsFamilyType = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.FAMILYTYPE);
            DataTable dtFamilyType = dsFamilyType.Tables[0];
            foreach (DataRow drFamilyType in dtFamilyType.Rows)
            {
                if (drFamilyType["AGY_ACTIVE"].ToString() == "Y" ||
                    (drFamilyType["AGY_ACTIVE"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_FAMILY_TYPE"].ToString().Trim()) && drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim()))
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, "F" + drFamilyType[DescColSubscript].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_FAMILY_TYPE"].ToString().Trim() == drFamilyType[CodeColSubscript].ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drFamilyType[DescColSubscript].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 130;
                    if (X_Pos > 600)
                    {
                        Y_Pos -= 13;
                        X_Pos = 140;
                    }

                }
            }

            Y_Pos -= 25; X_Pos = 30;
            int Count = dtCaseSNP.Rows.Count;
            int Adults = 0, Child = 0, under5 = 0;
            foreach (DataRow drsnp in dtCaseSNP.Rows)
            {
                if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
                {
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
                        Adults++;
                    else
                        Child++;
                    if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
                        under5++;
                }
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 123, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Adults: ", 210, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Adults.ToString(), Timesline), 260, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children: ", 310, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Child.ToString(), Timesline), 370, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "No of Children under 5: ", 420, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(under5.ToString(), Timesline), 508, Y_Pos, 0);
            cb.EndText();

            //Temp table not displayed on the screen
            PdfPTable head = new PdfPTable(1);
            head.HorizontalAlignment = Element.ALIGN_CENTER;
            head.TotalWidth = 50f;
            PdfPCell headcell = new PdfPCell(new Phrase(""));
            headcell.HorizontalAlignment = Element.ALIGN_CENTER;
            headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            head.AddCell(headcell);

            #region To Print SNP Details in the Table

            PdfPTable Snp_Table = new PdfPTable(13);
            Snp_Table.TotalWidth = 765f;
            Snp_Table.WidthPercentage = 100;
            Snp_Table.LockedWidth = true;
            float[] widths = new float[] { 65f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 25f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
            Snp_Table.SetWidths(widths);
            Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
            Snp_Table.SpacingBefore = 270f;

            PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
            Header.Colspan = 13;
            Header.FixedHeight = 15f;
            Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Header.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(Header);

            PdfPCell row2 = new PdfPCell(new Phrase(""));
            row2.Colspan = 9;
            row2.FixedHeight = 15f;
            row2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2);

            PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
            row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Health.FixedHeight = 15f;
            row2_Health.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Health);

            PdfPCell row2_Space = new PdfPCell(new Phrase(""));
            row2_Space.Colspan = 3;
            row2_Space.FixedHeight = 15f;
            row2_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Space);

            PdfPCell row3 = new PdfPCell(new Phrase(""));
            row3.Colspan = 2;
            row3.FixedHeight = 15f;
            row3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3);

            PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
            row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_SSN.FixedHeight = 15f;
            row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_SSN);

            PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
            row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Birth.FixedHeight = 15f;
            row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Birth);

            PdfPCell row3_Space = new PdfPCell(new Phrase(""));
            //row3_Space.Colspan = 2;
            row3_Space.FixedHeight = 15f;
            row3_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space);

            PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
            row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Sex.FixedHeight = 15f;
            row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Sex);

            PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
            row3_Space2.Colspan = 3;
            row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space2.FixedHeight = 15f;
            row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space2);

            PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
            row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Insurance.FixedHeight = 15f;
            row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Insurance);

            PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
            row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Veteran.FixedHeight = 15f;
            row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Veteran);

            PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("Receive FS", TableFontBoldItalic));
            row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Receive_FS.FixedHeight = 15f;
            row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Receive_FS);

            PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space3.FixedHeight = 15f;
            row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space3);

            string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yyyy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
            for (int i = 0; i < col.Length; ++i)
            {
                PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                cell.FixedHeight = 15f;
                if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                else cell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(cell);
            }

            int Tbl_Count = 0; string FamSeq = string.Empty;
            List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
            foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
                {
                    FamSeq = entity.FamilySeq.Trim();
                    string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
                    {
                        if (entity.Ssno.Trim().Length < 9)
                            entity.Ssno = SetLeadingZeros(entity.Ssno.Trim());

                        //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
                        SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(entity.AltBdate))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (entity.Age.Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (entity.MilitaryStatus.Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(entity.MilitaryStatus.Trim().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);
                }
            }

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {
                if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "F";
                            else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "F";
                                else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "P";
                                break;
                            }
                        }
                    }

                    string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
                    {
                        if (drCaseSNP["SNP_SSNO"].ToString().Trim().Length < 9)
                            drCaseSNP["SNP_SSNO"] = SetLeadingZeros(drCaseSNP["SNP_SSNO"].ToString().Trim());

                        SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);

                    Tbl_Count++;
                    if (Tbl_Count >= 10)
                        break;
                }
            }
            int Len_Var = 130 - Tbl_Count * 13;
            for (int j = 0; j <= Len_Var; ++j)  //120
            {
                PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
                SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
                SpaceCell.FixedHeight = 15f;
                SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(SpaceCell);
            }

            #endregion

            document.Add(head);
            document.Add(Snp_Table);
            document.NewPage();

            //End Of SNP details Table

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

            //X_Pos = 30; Y_Pos -= 30;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

            //cb.EndText();

            iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
            //start the Income details of a Family to the table

            //PdfPTable SpaceTable = new PdfPTable(1);
            //SpaceTable.TotalWidth = 750f;
            //SpaceTable.WidthPercentage = 100;
            //SpaceTable.LockedWidth = true;
            //float[] SpaceTablewidths = new float[] { 80f };
            //SpaceTable.SetWidths(SpaceTablewidths);
            //SpaceTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //SpaceTable.SpacingAfter = 70f;

            #region Incometable

            PdfPTable IncomeTable = new PdfPTable(5);
            IncomeTable.TotalWidth = 750f;
            IncomeTable.WidthPercentage = 100;
            IncomeTable.LockedWidth = true;
            float[] Incomewidths = new float[] { 80f, 50f, 40f, 90f, 80f };
            IncomeTable.SetWidths(Incomewidths);
            IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeTable.SpacingBefore = 100f;

            PdfPCell IncomeCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            IncomeCell.Colspan = 5;
            IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell.FixedHeight = 15f;
            IncomeCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell);

            PdfPCell IncomeCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            IncomeCell1.Colspan = 5;
            IncomeCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell1.FixedHeight = 15f;
            IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell1);

            PdfPCell IncomeCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            IncomeCell0.Colspan = 2;
            IncomeCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell0.FixedHeight = 15f;
            IncomeCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell0);

            PdfPCell IncomeCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            IncomeCell2.Colspan = 3;
            IncomeCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            IncomeCell2.FixedHeight = 15f;
            IncomeCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell2);

            PdfPCell IncomeCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            IncomeCell3.Colspan = 3;
            IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell3.FixedHeight = 15f;
            IncomeCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell3);

            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            else
            {
                PdfPCell IncomeCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                IncomeCell4.Colspan = 2;
                IncomeCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                IncomeCell4.FixedHeight = 15f;
                IncomeCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                IncomeTable.AddCell(IncomeCell4);
            }
            PdfPCell IncomeHeader = new PdfPCell(new Phrase("Financial Information - As reported by Applicant", TblFontBold));
            IncomeHeader.Colspan = 5;
            IncomeHeader.FixedHeight = 15f;
            IncomeHeader.BackgroundColor = BaseColor.LIGHT_GRAY;
            IncomeHeader.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeHeader);
            string[] Incomecol = { "Household Member", "Amount", "Interval", "Income Sources", "How Verified?" };
            for (int p = 0; p < Incomecol.Length; ++p)
            {
                PdfPCell Incomecell = new PdfPCell(new Phrase(Incomecol[p], TableFontBoldItalic));
                Incomecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Incomecell.FixedHeight = 15f;
                Incomecell.Border = iTextSharp.text.Rectangle.BOX;
                IncomeTable.AddCell(Incomecell);
            }

            if (dsIncome.Tables.Count > 0)
                dtIncome = dsIncome.Tables[0];

            decimal Row_Prog_Income = 0; string interval = null, MemName = null, Income_Verifier = null;
            string IncomeDesc = null, privSeq = null;
            if (dtCaseIncome.Rows.Count > 0)
            {
                DataView dv = dtCaseIncome.DefaultView;
                dv.RowFilter = "INCOME_EXCLUDE = 'N'";
                dv.Sort = "INCOME_FAMILY_SEQ ASC";
                dtCaseIncome = dv.ToTable();
                foreach (DataRow drCaseIncome in dtCaseIncome.Rows)
                {
                    Income_Verifier = interval = IncomeDesc = string.Empty;
                    if (drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim() != privSeq)
                    {
                        if (!string.IsNullOrEmpty(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim()))
                            MemName = Get_Member_Name(drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim(), string.Empty);
                        PdfPCell House_HoldMem = new PdfPCell(new Phrase(MemName, TableFont));
                        House_HoldMem.Colspan = 5;
                        House_HoldMem.HorizontalAlignment = Element.ALIGN_LEFT;
                        House_HoldMem.FixedHeight = 15f;
                        House_HoldMem.Border = iTextSharp.text.Rectangle.BOX;
                        IncomeTable.AddCell(House_HoldMem);
                        privSeq = drCaseIncome["INCOME_FAMILY_SEQ"].ToString().Trim();
                    }
                    PdfPCell Income_Space = new PdfPCell(new Phrase("", TableFont));
                    Income_Space.Colspan = 1;
                    Income_Space.HorizontalAlignment = Element.ALIGN_CENTER;
                    Income_Space.FixedHeight = 15f;
                    Income_Space.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Income_Space);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim()))
                        Row_Prog_Income = decimal.Parse(drCaseIncome["INCOME_PROG_INCOME"].ToString().Trim());
                    PdfPCell Amount = new PdfPCell(new Phrase(Row_Prog_Income.ToString(), TableFont));
                    Amount.HorizontalAlignment = Element.ALIGN_CENTER;
                    Amount.FixedHeight = 15f;
                    Amount.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Amount);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_INTERVAL"].ToString().Trim()))
                        interval = LookupDataAccess.ShowIncomeInterval(drCaseIncome["INCOME_INTERVAL"].ToString().Trim());
                    PdfPCell Freq = new PdfPCell(new Phrase(interval, TableFont));
                    Freq.HorizontalAlignment = Element.ALIGN_LEFT;
                    Freq.FixedHeight = 15f;
                    Freq.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(Freq);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_TYPE"].ToString().Trim()))
                        IncomeDesc = Get_IncomeType_Desc(drCaseIncome["INCOME_TYPE"].ToString().Trim());

                    PdfPCell IncomeSource = new PdfPCell(new Phrase(IncomeDesc, TableFont));
                    IncomeSource.HorizontalAlignment = Element.ALIGN_CENTER;
                    IncomeSource.FixedHeight = 15f;
                    IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeSource);

                    if (!string.IsNullOrEmpty(drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim()))
                        Income_Verifier = drCaseIncome["INCOME_HOW_VERIFIED"].ToString().Trim();

                    PdfPCell IncomeVer = new PdfPCell(new Phrase(Income_Verifier, TableFont));
                    IncomeVer.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeVer.FixedHeight = 15f;
                    IncomeVer.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeVer);

                }
            }

            PdfPTable TotIncomeTable = new PdfPTable(8);
            TotIncomeTable.TotalWidth = 750f;
            TotIncomeTable.WidthPercentage = 100;
            TotIncomeTable.LockedWidth = true;
            float[] TotIncomeTablewidths = new float[] { 50f, 30f, 50f, 40f, 60f, 30f, 50f, 30f };
            TotIncomeTable.SetWidths(TotIncomeTablewidths);
            TotIncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            //IncomeTable.SpacingBefore = 60f;

            PdfPCell Total_Space = new PdfPCell(new Phrase("", TableFont));
            Total_Space.Colspan = 8;
            Total_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            Total_Space.FixedHeight = 15f;
            Total_Space.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Space);

            PdfPCell Total = new PdfPCell(new Phrase("Total Income", TableFont));
            Total.HorizontalAlignment = Element.ALIGN_LEFT;
            Total.FixedHeight = 15f;
            Total.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total);

            PdfPCell Total_Income = new PdfPCell(new Phrase(drCaseMST["MST_FAM_INCOME"].ToString().Trim(), TableFont));
            Total_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Total_Income.FixedHeight = 15f;
            Total_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Total_Income);

            PdfPCell Program = new PdfPCell(new Phrase("Program Income", TableFont));
            Program.HorizontalAlignment = Element.ALIGN_LEFT;
            Program.FixedHeight = 15f;
            Program.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program);

            PdfPCell Program_Income = new PdfPCell(new Phrase(drCaseMST["MST_PROG_INCOME"].ToString().Trim(), TableFont));
            Program_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            Program_Income.FixedHeight = 15f;
            Program_Income.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Program_Income);

            PdfPCell Federal = new PdfPCell(new Phrase("% of Federal Poverty Level", TableFont));
            Federal.HorizontalAlignment = Element.ALIGN_LEFT;
            Federal.FixedHeight = 15f;
            Federal.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal);

            PdfPCell Federal_Poverty = new PdfPCell(new Phrase(drCaseMST["MST_POVERTY"].ToString().Trim() + "%", TableFont));
            Federal_Poverty.HorizontalAlignment = Element.ALIGN_CENTER;
            Federal_Poverty.FixedHeight = 15f;
            Federal_Poverty.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(Federal_Poverty);

            PdfPCell HUD = new PdfPCell(new Phrase("HUD%", TableFont));
            HUD.HorizontalAlignment = Element.ALIGN_LEFT;
            HUD.FixedHeight = 15f;
            HUD.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD);

            PdfPCell HUD_Value = new PdfPCell(new Phrase(drCaseMST["MST_HUD"].ToString().Trim() + "%", TableFont));
            HUD_Value.HorizontalAlignment = Element.ALIGN_CENTER;
            HUD_Value.FixedHeight = 15f;
            HUD_Value.Border = iTextSharp.text.Rectangle.BOX;
            TotIncomeTable.AddCell(HUD_Value);

            #endregion

            document.Add(IncomeTable);
            document.Add(TotIncomeTable);


            #region Income Verification

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            if (Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance")
            {
                PdfPTable Income_Last = new PdfPTable(15);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 20f, 8f, 13f, 8f, 20f, 8f, 25f, 8f, 18f, 8f, 15f, 25f, 20f, 13f, 30f };
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Income_Verified = new PdfPCell(new Phrase("Income Verified", TableFontBoldItalic));
                Income_Verified.HorizontalAlignment = Element.ALIGN_LEFT;
                Income_Verified.FixedHeight = 15f;
                Income_Verified.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Income_Verified);

                if (drCaseMST["MST_VERIFY_W2"].ToString().Trim() == "Y")
                {
                    PdfPCell W2Cheked = new PdfPCell(_image_Checked);
                    W2Cheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2Cheked.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    W2Cheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2Cheked);
                }
                else
                {
                    PdfPCell W2UnCheked = new PdfPCell(_image_UnChecked);
                    W2UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    W2UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    W2UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(W2UnCheked);
                }

                PdfPCell W2Text = new PdfPCell(new Phrase("W2", Times));
                W2Text.HorizontalAlignment = Element.ALIGN_LEFT;
                W2Text.FixedHeight = 15f;
                W2Text.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(W2Text);

                if (drCaseMST["MST_VERIFY_CHECK_STUB"].ToString().Trim() == "Y")
                {
                    PdfPCell CHECK_STUB_Check = new PdfPCell(_image_Checked);
                    CHECK_STUB_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    CHECK_STUB_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_Check);
                }
                else
                {
                    PdfPCell CHECK_STUB_UnCheked = new PdfPCell(_image_UnChecked);
                    CHECK_STUB_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    CHECK_STUB_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    CHECK_STUB_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(CHECK_STUB_UnCheked);
                }

                PdfPCell CHECK_STUB = new PdfPCell(new Phrase("CHECK_STUB", Times));
                CHECK_STUB.HorizontalAlignment = Element.ALIGN_LEFT;
                CHECK_STUB.FixedHeight = 15f;
                CHECK_STUB.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(CHECK_STUB);

                if (drCaseMST["MST_VERIFY_LETTER"].ToString().Trim() == "Y")
                {
                    PdfPCell LETTER_Check = new PdfPCell(_image_Checked);
                    LETTER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    LETTER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_Check);
                }
                else
                {
                    PdfPCell LETTER_UnCheked = new PdfPCell(_image_UnChecked);
                    LETTER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    LETTER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    LETTER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(LETTER_UnCheked);
                }

                PdfPCell LETTER = new PdfPCell(new Phrase("Letter/Budget Sheet", Times));
                LETTER.HorizontalAlignment = Element.ALIGN_LEFT;
                LETTER.FixedHeight = 15f;
                LETTER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(LETTER);

                if (drCaseMST["MST_VERIFY_TAX_RETURN"].ToString().Trim() == "Y")
                {
                    PdfPCell TAX_RETURN_Check = new PdfPCell(_image_Checked);
                    TAX_RETURN_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    TAX_RETURN_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_Check);
                }
                else
                {
                    PdfPCell TAX_RETURN_UnCheked = new PdfPCell(_image_UnChecked);
                    TAX_RETURN_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    TAX_RETURN_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    TAX_RETURN_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(TAX_RETURN_UnCheked);
                }

                PdfPCell TAX_RETURN = new PdfPCell(new Phrase("Tax Returns", Times));
                TAX_RETURN.HorizontalAlignment = Element.ALIGN_LEFT;
                TAX_RETURN.FixedHeight = 15f;
                TAX_RETURN.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(TAX_RETURN);

                if (drCaseMST["MST_VERIFY_OTHER"].ToString().Trim() == "Y")
                {
                    PdfPCell OTHER_Check = new PdfPCell(_image_Checked);
                    OTHER_Check.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_Check.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    //W2Cheked.FixedHeight = 15f;
                    OTHER_Check.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_Check);
                }
                else
                {
                    PdfPCell OTHER_UnCheked = new PdfPCell(_image_UnChecked);
                    OTHER_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    OTHER_UnCheked.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //W2UnCheked.FixedHeight = 15f;
                    OTHER_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(OTHER_UnCheked);
                }

                PdfPCell OTHER = new PdfPCell(new Phrase("Other", Times));
                OTHER.HorizontalAlignment = Element.ALIGN_LEFT;
                OTHER.FixedHeight = 15f;
                OTHER.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(OTHER);

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }


                if (ShortName != "UETHDA")
                {
                    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    V_Space.Colspan = 15;
                    V_Space.FixedHeight = 15f;
                    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(V_Space);

                    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver.Colspan = 11;
                    P_Ver.FixedHeight = 15f;
                    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver);

                    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                    P_Ver1.Colspan = 2;
                    P_Ver1.FixedHeight = 15f;
                    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver1);

                    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Ver_Date_Space.FixedHeight = 15f;
                    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Income_Last.AddCell(Ver_Date_Space);

                    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //P_Ver2.Colspan = 4;
                    P_Ver2.FixedHeight = 15f;
                    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(P_Ver2);

                    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Ver_Space.FixedHeight = 15f;
                    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Ver_Space);
                }
                document.Add(Income_Last);
            }
            else
            {
                PdfPTable Income_Last = new PdfPTable(5);
                Income_Last.TotalWidth = 750f;
                Income_Last.WidthPercentage = 100;
                Income_Last.LockedWidth = true;
                float[] Income_Lastwidths = new float[] { 25f, 20f, 13f, 30f, 100f };//80f, 50f, 40f, 90f, 80f 
                Income_Last.SetWidths(Income_Lastwidths);
                Income_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Income_Last.SpacingBefore = 20f;

                PdfPCell Verification_Date = new PdfPCell(new Phrase("Verification Date:", Times));
                Verification_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                Verification_Date.FixedHeight = 15f;
                Verification_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verification_Date);

                if (!string.IsNullOrEmpty(drCaseMST["MST_ELIG_DATE"].ToString().Trim()))
                {
                    PdfPCell Verify_Date = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_ELIG_DATE"].ToString().Trim()), Timesline));
                    Verify_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date.FixedHeight = 15f;
                    Verify_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date);
                }
                else
                {
                    PdfPCell Verify_Date_Space = new PdfPCell(new Phrase("________________", Times));
                    Verify_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verify_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verify_Date_Space.FixedHeight = 15f;
                    Verify_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verify_Date_Space);
                }

                PdfPCell Verifier_Head = new PdfPCell(new Phrase("Verifier:", Times));
                Verifier_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Verifier_Head.FixedHeight = 15f;
                Verifier_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(Verifier_Head);

                string CaseWorker = null;
                if (dtVerifier.Rows.Count > 0)
                {
                    foreach (DataRow drVerifier in dtVerifier.Rows)
                    {
                        if (drCaseMST["MST_VERIFIER"].ToString().Trim() == drVerifier["PWH_CASEWORKER"].ToString().Trim())
                        {
                            CaseWorker = drVerifier["NAME"].ToString().Trim();
                            break;
                        }
                    }
                }

                if (!string.IsNullOrEmpty(CaseWorker))
                {
                    PdfPCell Verifier = new PdfPCell(new Phrase(CaseWorker, Timesline));
                    Verifier.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier.FixedHeight = 15f;
                    Verifier.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier);
                }
                else
                {
                    PdfPCell Verifier_Space = new PdfPCell(new Phrase("_______________________________", Times));
                    Verifier_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                    Verifier_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                    Verifier_Space.FixedHeight = 15f;
                    Verifier_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Income_Last.AddCell(Verifier_Space);
                }

                PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                V_Space.FixedHeight = 15f;
                V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Income_Last.AddCell(V_Space);

                //if (ShortName != "UETHDA")
                //{
                //    PdfPCell V_Space = new PdfPCell(new Phrase("", Times));
                //    V_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    V_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    V_Space.Colspan = 15;
                //    V_Space.FixedHeight = 15f;
                //    V_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(V_Space);

                //    PdfPCell P_Ver = new PdfPCell(new Phrase("Parent Verification ______________________________________________________________________________", Times));
                //    P_Ver.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver.Colspan = 11;
                //    P_Ver.FixedHeight = 15f;
                //    P_Ver.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver);

                //    PdfPCell P_Ver1 = new PdfPCell(new Phrase("Reverify Date: ________________", Times));
                //    P_Ver1.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver1.HorizontalAlignment = Element.ALIGN_LEFT;
                //    P_Ver1.Colspan = 2;
                //    P_Ver1.FixedHeight = 15f;
                //    P_Ver1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver1);

                //    //PdfPCell Ver_Date_Space = new PdfPCell(new Phrase("________________", Times));
                //    //Ver_Date_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    //Ver_Date_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //Ver_Date_Space.FixedHeight = 15f;
                //    //Ver_Date_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    //Income_Last.AddCell(Ver_Date_Space);

                //    PdfPCell P_Ver2 = new PdfPCell(new Phrase("Verifier ", Times));
                //    P_Ver2.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    P_Ver2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //P_Ver2.Colspan = 4;
                //    P_Ver2.FixedHeight = 15f;
                //    P_Ver2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(P_Ver2);

                //    PdfPCell Ver_Space = new PdfPCell(new Phrase("_______________________________", Times));
                //    Ver_Space.VerticalAlignment = PdfPCell.BOTTOM_BORDER;
                //    Ver_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Ver_Space.FixedHeight = 15f;
                //    Ver_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    Income_Last.AddCell(Ver_Space);
                //}

                document.Add(Income_Last);
            }

            #endregion


            //End of Income Details

            #region Start of Energy Calculations

            PdfPTable Energy = new PdfPTable(3);
            Energy.TotalWidth = 750f;
            Energy.WidthPercentage = 100;
            Energy.LockedWidth = true;
            float[] Energy_widths = new float[] { 60, 60f, 60f };
            Energy.SetWidths(Energy_widths);
            Energy.HorizontalAlignment = Element.ALIGN_CENTER;
            Energy.SpacingBefore = 20f;

            if (Privileges.ModuleCode == "05" || gvApp.CurrentRow.Cells["AppDet"].Value.ToString() == "Application for Assistance")
            {
                PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
                Compute.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute.FixedHeight = 15f;
                Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute);

                PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
                Compute_Space.Colspan = 2;
                Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                Compute_Space.FixedHeight = 15f;
                Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Compute_Space);

                decimal UtilityCost = 0; decimal EnergyBurden = 0;
                //if (ADDCUST_List.Count > 0)
                //{
                //    AddCustEntity Custdet = ADDCUST_List.Find(u => u.ACTCODE.Equals("C00012") && u.ACTAPPNO.Equals(BaseForm.BaseApplicationNo));
                //    if (Custdet != null)
                //    {
                //        if (!string.IsNullOrEmpty(Custdet.ACTNUMRESP.Trim()))
                //            UtilityCost = decimal.Parse(Custdet.ACTNUMRESP.Trim());
                //    }
                //}

                if (SerCust.Count > 0)
                {
                    CustomQuestionsEntity Custdet = SerCust.Find(u => u.ACTCODE.Equals("RESTOT") && u.ACTAPPNO.Equals(BaseForm.BaseApplicationNo));
                    if (Custdet != null)
                    {
                        if (!string.IsNullOrEmpty(Custdet.SER_ANNUAL.Trim()))
                            UtilityCost = decimal.Parse(Custdet.SER_ANNUAL.Trim());
                    }
                }

                PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: " + UtilityCost.ToString("0.00"), Times));
                Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
                Utility_Costs.FixedHeight = 15f;
                Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Utility_Costs);

                PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
                Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
                Annual_Income.FixedHeight = 15f;
                Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Annual_Income);

                if (UtilityCost > 0 && decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim()) == 0)
                    EnergyBurden = 100;

                if (UtilityCost == 0 )
                    EnergyBurden = 0;

                if (decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim()) > 0 && UtilityCost > 0)
                    EnergyBurden = (UtilityCost / decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim())) * 100;
                    
                //Commented on 03/21/2018 brain asked by email
                //EnergyBurden = (UtilityCost / decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim())) * 100;

                //EnergyBurden = (decimal.Parse(drCaseMST["MST_FAM_INCOME"].ToString().Trim())/UtilityCost);

                PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: " + EnergyBurden.ToString("0.00") + "%", Times));
                Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
                Energy_Burden.FixedHeight = 15f;
                Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Energy.AddCell(Energy_Burden);
            }




            //if (Privileges.ModuleCode == "05")
            //{
            //    PdfPCell Compute = new PdfPCell(new Phrase("Compute Energy Burden", TblFontBold));
            //    Compute.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Compute.FixedHeight = 15f;
            //    Compute.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Energy.AddCell(Compute);

            //    PdfPCell Compute_Space = new PdfPCell(new Phrase("", TableFontBoldItalic));
            //    Compute_Space.Colspan = 2;
            //    Compute_Space.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Compute_Space.FixedHeight = 15f;
            //    Compute_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Energy.AddCell(Compute_Space);

            //    PdfPCell Utility_Costs = new PdfPCell(new Phrase("Utility Costs: 0.00", Times));
            //    Utility_Costs.HorizontalAlignment = Element.ALIGN_LEFT;
            //    Utility_Costs.FixedHeight = 15f;
            //    Utility_Costs.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Energy.AddCell(Utility_Costs);

            //    PdfPCell Annual_Income = new PdfPCell(new Phrase("Annual Income Total:" + drCaseMST["MST_FAM_INCOME"].ToString().Trim(), Times));
            //    Annual_Income.HorizontalAlignment = Element.ALIGN_CENTER;
            //    Annual_Income.FixedHeight = 15f;
            //    Annual_Income.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Energy.AddCell(Annual_Income);

            //    PdfPCell Energy_Burden = new PdfPCell(new Phrase("Energy Burden: 0.00", Times));
            //    Energy_Burden.HorizontalAlignment = Element.ALIGN_CENTER;
            //    Energy_Burden.FixedHeight = 15f;
            //    Energy_Burden.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Energy.AddCell(Energy_Burden);
            //}
            #endregion

            #region Start of the Services table for a applicant

            PdfPTable Services = new PdfPTable(2);
            Services.TotalWidth = 750f;
            Services.WidthPercentage = 100;
            Services.LockedWidth = true;
            float[] Services_widths = new float[] { 40f, 120f };
            Services.SetWidths(Services_widths);
            Services.HorizontalAlignment = Element.ALIGN_CENTER;
            Services.SpacingBefore = 20f;
            Services.HeaderRows = 1;

            PdfPCell Services_Requested = new PdfPCell(new Phrase("Services Requested", TblFontBold));
            Services_Requested.Colspan = 2;
            Services_Requested.HorizontalAlignment = Element.ALIGN_LEFT;
            Services_Requested.FixedHeight = 15f;
            Services_Requested.BackgroundColor = BaseColor.LIGHT_GRAY;
            Services_Requested.Border = iTextSharp.text.Rectangle.BOX;
            Services.AddCell(Services_Requested);

            if (MSTSER_List.Count > 0)
            {
                foreach (CaseMSTSER Entity in MSTSER_List)
                {
                    PdfPCell SerVice_Code = new PdfPCell(new Phrase(Entity.Service.Trim(), Times));
                    SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_Code.FixedHeight = 15f;
                    SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_Code);
                    string Ser_Desc = null;
                    if (SerHie == "Y")
                    {
                        foreach (DataRow drCaseHie in dtCaseHie.Rows)
                        {
                            if (Entity.Service.Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && Entity.Service.Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && Entity.Service.Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
                            {
                                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (CAMASTList.Count > 0)
                        {
                            foreach (CAMASTEntity serEntity in CAMASTList)
                            {
                                if (serEntity.Code.Trim() == Entity.Service.Trim())
                                { Ser_Desc = serEntity.Desc.Trim(); break; }
                            }
                        }
                    }
                    PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
                    SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                    SerVice_DESC.FixedHeight = 15f;
                    SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
                    Services.AddCell(SerVice_DESC);
                }
            }

            #endregion
            //if (dtMSTSER.Rows.Count > 0)
            //{
            //    foreach (DataRow drMSTSER in dtMSTSER.Rows)
            //    {
            //        PdfPCell SerVice_Code = new PdfPCell(new Phrase(drMSTSER["MSTSER_SERVICE"].ToString().Trim(), Times));
            //        SerVice_Code.HorizontalAlignment = Element.ALIGN_LEFT;
            //        SerVice_Code.FixedHeight = 15f;
            //        SerVice_Code.Border = iTextSharp.text.Rectangle.BOX;
            //        Services.AddCell(SerVice_Code);
            //        string Ser_Desc = null;
            //        foreach (DataRow drCaseHie in dtCaseHie.Rows)
            //        {
            //            if (drMSTSER["MSTSER_SERVICE"].ToString().Substring(0, 2).Trim() == drCaseHie["HIE_AGENCY"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(2, 2).Trim() == drCaseHie["HIE_DEPT"].ToString().Trim() && drMSTSER["MSTSER_SERVICE"].ToString().Substring(4, 2).Trim() == drCaseHie["HIE_PROGRAM"].ToString().Trim())
            //            {
            //                Ser_Desc = drCaseHie["HIE_NAME"].ToString().Trim();
            //                break;
            //            }
            //        }
            //        PdfPCell SerVice_DESC = new PdfPCell(new Phrase(Ser_Desc, Times));
            //        SerVice_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
            //        SerVice_DESC.FixedHeight = 15f;
            //        SerVice_DESC.Border = iTextSharp.text.Rectangle.BOX;
            //        Services.AddCell(SerVice_DESC);
            //    }
            //}


            if (Privileges.ModuleCode == "05")
                document.Add(Energy);
            document.Add(Services);



            #region Start the Custom Question table for an applicant

            PdfPTable Questions = new PdfPTable(3);
            Questions.TotalWidth = 750f;
            Questions.WidthPercentage = 100;
            Questions.LockedWidth = true;
            float[] Questions_widths = new float[] { 100f, 40f, 60f };
            Questions.SetWidths(Questions_widths);
            Questions.HorizontalAlignment = Element.ALIGN_CENTER;
            Questions.SpacingBefore = 30f;
            Questions.HeaderRows = 2;


            //PdfPCell QueCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
            //QueCell.Colspan = 3;
            //QueCell.HorizontalAlignment = Element.ALIGN_CENTER;
            //QueCell.FixedHeight = 15f;
            //QueCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Questions.AddCell(QueCell);

            //PdfPCell QueCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
            //QueCell1.Colspan = 3;
            //QueCell1.HorizontalAlignment = Element.ALIGN_CENTER;
            //QueCell1.FixedHeight = 15f;
            //QueCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Questions.AddCell(QueCell1);

            //PdfPCell QueCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
            ////QueCell0.Colspan = 2;
            //QueCell0.HorizontalAlignment = Element.ALIGN_LEFT;
            //QueCell0.FixedHeight = 15f;
            //QueCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Questions.AddCell(QueCell0);

            //PdfPCell QueCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
            //QueCell2.Colspan = 2;
            //QueCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            //QueCell2.FixedHeight = 15f;
            //QueCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Questions.AddCell(QueCell2);

            //PdfPCell QueCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
            ////QueCell3.Colspan = 3;
            //QueCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            //QueCell3.FixedHeight = 15f;
            //QueCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Questions.AddCell(QueCell3);

            //if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
            //{
            //    PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
            //    QueCell4.Colspan = 2;
            //    QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    QueCell4.FixedHeight = 15f;
            //    QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Questions.AddCell(QueCell4);
            //}
            //else
            //{
            //    PdfPCell QueCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
            //    QueCell4.Colspan = 2;
            //    QueCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
            //    QueCell4.FixedHeight = 15f;
            //    QueCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    Questions.AddCell(QueCell4);
            //}

            PdfPCell Add_Ques_Header = new PdfPCell(new Phrase("Additional Intake Questions and Answers", TblFontBold));
            Add_Ques_Header.Colspan = 3;
            Add_Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Add_Ques_Header.FixedHeight = 15f;
            //Add_Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Add_Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Add_Ques_Header);

            PdfPCell Ques_Header = new PdfPCell(new Phrase("Question Description", TblFontBold));
            ////Ques_Header.Colspan = 3;
            Ques_Header.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Header.FixedHeight = 15f;
            Ques_Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Header.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Header);

            PdfPCell Ques_Member = new PdfPCell(new Phrase("Member", TblFontBold));
            Ques_Member.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Member.FixedHeight = 15f;
            Ques_Member.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Member.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Member);

            PdfPCell Ques_Response = new PdfPCell(new Phrase("Response", TblFontBold));
            Ques_Response.HorizontalAlignment = Element.ALIGN_LEFT;
            Ques_Response.FixedHeight = 15f;
            Ques_Response.BackgroundColor = BaseColor.LIGHT_GRAY;
            Ques_Response.Border = iTextSharp.text.Rectangle.BOX;
            Questions.AddCell(Ques_Response);
            List<CustRespEntity> CustResp_List;
            if (ADDCUST_List.Count > 0)
            {
                foreach (AddCustEntity Entity in ADDCUST_List)
                {
                    string CustQues_Code = Entity.ACTCODE.Trim();
                    string CustQues_Desc = null;
                    string CustQues_Type = null;
                    string CustQues_Active = string.Empty;
                    string CustQuesResponse_Desc = null;
                    string Member_Desc = null;
                    if (custQues_List.Count > 0)
                    {
                        foreach (CustfldsEntity CustQues in custQues_List)
                        {
                            if (CustQues_Code.Trim() == CustQues.CustCode.Trim())
                            {
                                CustQues_Desc = CustQues.CustDesc.Trim();
                                CustQues_Type = CustQues.RespType.Trim();
                                CustQues_Active = CustQues.Active.Trim();
                                break;
                            }
                        }

                        if (CustQues_Active == "A")
                        {
                            if (!string.IsNullOrEmpty(CustQues_Type))
                            {
                                PdfPCell Ques_DESC = new PdfPCell(new Phrase(CustQues_Desc, TableFont));
                                Ques_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                                Ques_DESC.FixedHeight = 15f;
                                Ques_DESC.Border = iTextSharp.text.Rectangle.BOX;
                                Questions.AddCell(Ques_DESC);

                                if (CustQues_Type.Trim() == "N")
                                {
                                    if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim().Trim();

                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                            Member_Desc = "Applicant";
                                    }
                                    else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "HouseHold";
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTNUMRESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTNUMRESP.Trim();
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(Entity.ACTSNPFAMILYSEQ));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Member";
                                    }
                                }
                                else if (CustQues_Type.Trim() == "T")
                                {
                                    if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                            CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Applicant";
                                    }
                                    else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                            CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "HouseHold";
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTDATERESP.Trim()))
                                            CustQuesResponse_Desc = LookupDataAccess.Getdate(Entity.ACTDATERESP.Trim());
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(Entity.ACTSNPFAMILYSEQ));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Member";
                                    }
                                }
                                else if ((CustQues_Type.Trim() == "A" || CustQues_Type.Trim() == "X"))
                                {
                                    if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Applicant";
                                    }
                                    else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "HouseHold";
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTALPHARESP.Trim()))
                                            CustQuesResponse_Desc = Entity.ACTALPHARESP.Trim();
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(Entity.ACTSNPFAMILYSEQ));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Member";
                                    }
                                }
                                else
                                {
                                    CustRespEntity Search_Entity = new CustRespEntity(true);
                                    Search_Entity.ResoCode = CustQues_Code.Trim();
                                    Search_Entity.ScrCode = "CASE2001";
                                    //Search_Entity.RecType = Search_Entity.RespSeq = null;
                                    //Search_Entity.RespDesc = Search_Entity.DescCode = Search_Entity.AddDate = Search_Entity.AddOpr = null;
                                    //Search_Entity.ChgDate = Search_Entity.ChgOpr = Search_Entity.Changed = null;
                                    CustResp_List = _model.FieldControls.Browse_CUSTRESP(Search_Entity, "Browse");
                                    if (Entity.ACTSNPFAMILYSEQ.Trim() == "9999999")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                        {
                                            foreach (CustRespEntity CustEntity in CustResp_List)
                                            {
                                                if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim().Trim())
                                                {
                                                    CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                    break;
                                                }
                                            }
                                        }
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Applicant";
                                    }
                                    else if (Entity.ACTSNPFAMILYSEQ.Trim() == "8888888")
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                        {
                                            foreach (CustRespEntity CustEntity in CustResp_List)
                                            {
                                                if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                                {
                                                    CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                    break;
                                                }
                                            }
                                        }
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(drCaseMST["MST_FAMILY_SEQ"].ToString()));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "HouseHold";
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Entity.ACTMULTRESP.Trim()))
                                        {
                                            foreach (CustRespEntity CustEntity in CustResp_List)
                                            {
                                                if (CustEntity.DescCode.Trim() == Entity.ACTMULTRESP.Trim())
                                                {
                                                    CustQuesResponse_Desc = CustEntity.RespDesc.Trim();
                                                    break;
                                                }
                                            }
                                        }
                                        CaseSnpEntity SNPNAME = BaseForm.BaseCaseSnpEntity.Find(u => u.App.Equals(Entity.ACTAPPNO) && u.FamilySeq.Equals(Entity.ACTSNPFAMILYSEQ));
                                        if (SNPNAME != null)
                                        {
                                            if (!string.IsNullOrEmpty(SNPNAME.NameixMi.Trim())) Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim() + " " + SNPNAME.NameixMi.Trim();
                                            else Member_Desc = SNPNAME.NameixLast.Trim() + ", " + SNPNAME.NameixFi.Trim();
                                        }
                                        else
                                        Member_Desc = "Member";
                                    }
                                }

                                PdfPCell Ques_Mem_Name = new PdfPCell(new Phrase(Member_Desc, TableFont));
                                Ques_Mem_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                                Ques_Mem_Name.FixedHeight = 15f;
                                Ques_Mem_Name.Border = iTextSharp.text.Rectangle.BOX;
                                Questions.AddCell(Ques_Mem_Name);

                                PdfPCell Resp_Desc = new PdfPCell(new Phrase(CustQuesResponse_Desc, TableFont));
                                Resp_Desc.HorizontalAlignment = Element.ALIGN_LEFT;
                                Resp_Desc.FixedHeight = 15f;
                                Resp_Desc.Border = iTextSharp.text.Rectangle.BOX;
                                Questions.AddCell(Resp_Desc);

                            }
                        }
                    }
                }
            }

            #endregion End of custom Questions Table


            if (ADDCUST_List.Count > 0)
            {
                //document.NewPage();
                document.Add(Questions);
            }



            //document.NewPage();



            #region Code Not Used

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.EndText();

            //cb.BeginText();
            //X_Pos = 400; Y_Pos = 580;
            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

            //cb.SetFontAndSize(bf_helv, 13);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

            //X_Pos = 30; Y_Pos -= 30;
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            //cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

            //cb.EndText();

            //PdfPTable Spacetable = new PdfPTable(1);
            //Spacetable.HorizontalAlignment = Element.ALIGN_CENTER;
            //Spacetable.TotalWidth = 600f;

            //document.Add(Spacetable);

            #endregion

            if (Privileges.ModuleCode != "05" && gvApp.CurrentRow.Cells["AppDet"].Value.ToString() != "Application for Assistance")
            {
                #region Employment Details

                PdfPTable EmploymentDet = new PdfPTable(6);
                EmploymentDet.TotalWidth = 750f;
                EmploymentDet.WidthPercentage = 100;
                EmploymentDet.LockedWidth = true;
                float[] EmploymentDet_widths = new float[] { 20f, 40f, 1f, 8f, 1f, 10f };
                EmploymentDet.SetWidths(EmploymentDet_widths);
                EmploymentDet.HorizontalAlignment = Element.ALIGN_CENTER;
                EmploymentDet.SpacingBefore = 50f;

                PdfPCell EmpCell = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                EmpCell.Colspan = 6;
                EmpCell.HorizontalAlignment = Element.ALIGN_CENTER;
                EmpCell.FixedHeight = 15f;
                EmpCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell);

                PdfPCell EmpCell1 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                EmpCell1.Colspan = 6;
                EmpCell1.HorizontalAlignment = Element.ALIGN_CENTER;
                EmpCell1.FixedHeight = 15f;
                EmpCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell1);

                PdfPCell EmpCell0 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                EmpCell0.Colspan = 2;
                EmpCell0.HorizontalAlignment = Element.ALIGN_LEFT;
                EmpCell0.FixedHeight = 13f;
                EmpCell0.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell0);

                PdfPCell EmpCell2 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                EmpCell2.Colspan = 4;
                EmpCell2.HorizontalAlignment = Element.ALIGN_RIGHT;
                EmpCell2.FixedHeight = 13f;
                EmpCell2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell2);

                PdfPCell EmpCell3 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                EmpCell3.Colspan = 2;
                EmpCell3.HorizontalAlignment = Element.ALIGN_LEFT;
                EmpCell3.FixedHeight = 13f;
                EmpCell3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(EmpCell3);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    EmpCell4.Colspan = 4;
                    EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                    EmpCell4.FixedHeight = 13f;
                    EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(EmpCell4);
                }
                else
                {
                    PdfPCell EmpCell4 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    EmpCell4.Colspan = 4;
                    EmpCell4.HorizontalAlignment = Element.ALIGN_RIGHT;
                    EmpCell4.FixedHeight = 13f;
                    EmpCell4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(EmpCell4);
                }
                //if (Privileges.ModuleCode == "02" || Privileges.ModuleCode == "03")
                //{
                PdfPCell Computer = new PdfPCell(new Phrase("EMPLOYMENT INFORMATION", TblFontBold));
                Computer.HorizontalAlignment = Element.ALIGN_LEFT;
                Computer.Colspan = 2;
                Computer.FixedHeight = 15f;
                Computer.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Computer);

                PdfPCell Applicant = new PdfPCell(new Phrase("Applicant Name/ID", Times));
                Applicant.Colspan = 2;
                Applicant.HorizontalAlignment = Element.ALIGN_LEFT;
                Applicant.FixedHeight = 15f;
                Applicant.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Applicant);

                PdfPCell ApplicationName = new PdfPCell(new Phrase(BaseForm.BaseApplicationName, Timesline));
                ApplicationName.HorizontalAlignment = Element.ALIGN_LEFT;
                ApplicationName.Colspan = 2;
                ApplicationName.FixedHeight = 15f;
                ApplicationName.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(ApplicationName);

                PdfPCell Mother = new PdfPCell(new Phrase("Mother/Gurdian Employer Name", Times));
                Mother.HorizontalAlignment = Element.ALIGN_LEFT;
                Mother.FixedHeight = 15f;
                Mother.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Mother);

                if (!string.IsNullOrEmpty(MotherName.Trim()))
                {
                    PdfPCell Mother_Line = new PdfPCell(new Phrase(MotherName, Timesline));
                    Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Mother_Line.FixedHeight = 15f;
                    Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Mother_Line);
                }
                else
                {
                    PdfPCell Mother_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    Mother_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Mother_Line.FixedHeight = 15f;
                    Mother_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Mother_Line);
                }

                if (M_FullPart == "F")
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell FullTime = new PdfPCell(new Phrase("Full Time", Times));
                FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
                FullTime.FixedHeight = 15f;
                FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FullTime);

                if (M_FullPart == "P")
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                }
                else
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                }

                PdfPCell PartTime = new PdfPCell(new Phrase("Part Time", Times));
                PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
                PartTime.FixedHeight = 15f;
                PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(PartTime);


                PdfPCell MWork_Add = new PdfPCell(new Phrase("Work Address", Times));
                MWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Add.Colspan = 2;
                MWork_Add.FixedHeight = 15f;
                MWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Add);

                if (!string.IsNullOrEmpty(M_Address.Trim()))
                {
                    PdfPCell MWork_Line = new PdfPCell(new Phrase(M_Address, Timesline));
                    MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    MWork_Line.FixedHeight = 15f;
                    MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Line);
                }
                else
                {
                    PdfPCell MWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    MWork_Line.FixedHeight = 15f;
                    MWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Line);
                }

                PdfPCell MWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
                MWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                MWork_Phone.Colspan = 2;
                MWork_Phone.FixedHeight = 15f;
                MWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(MWork_Phone);

                if (!string.IsNullOrEmpty(M_Phone.Trim()))
                {
                    MaskedTextBox mskphn = new MaskedTextBox();
                    mskphn.Mask = "(999)000-0000";
                    mskphn.Text = M_Phone.Trim();

                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                else
                {
                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                PdfPCell Father = new PdfPCell(new Phrase("Father/Gurdian Employer Name", Times));
                Father.HorizontalAlignment = Element.ALIGN_LEFT;
                Father.FixedHeight = 15f;
                Father.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(Father);

                if (!string.IsNullOrEmpty(FatherName.Trim()))
                {
                    PdfPCell Father_Line = new PdfPCell(new Phrase(FatherName, Timesline));
                    Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Father_Line.FixedHeight = 15f;
                    Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Father_Line);
                }
                else
                {
                    PdfPCell Father_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    Father_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Father_Line.FixedHeight = 15f;
                    Father_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(Father_Line);
                }

                if (F_FullPart == "F")
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_Checked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                }
                else
                {
                    PdfPCell FullTime_UnCheked = new PdfPCell(_image_UnChecked);
                    FullTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FullTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    FullTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FullTime_UnCheked);
                }

                PdfPCell F_FullTime = new PdfPCell(new Phrase("Full Time", Times));
                F_FullTime.HorizontalAlignment = Element.ALIGN_LEFT;
                F_FullTime.FixedHeight = 15f;
                F_FullTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(F_FullTime);

                if (F_FullPart == "P")
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_Checked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                }
                else
                {
                    PdfPCell PartTime_UnCheked = new PdfPCell(_image_UnChecked);
                    PartTime_UnCheked.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PartTime_UnCheked.HorizontalAlignment = Element.ALIGN_LEFT;
                    //W2UnCheked.FixedHeight = 15f;
                    PartTime_UnCheked.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(PartTime_UnCheked);
                }

                PdfPCell F_PartTime = new PdfPCell(new Phrase("Part Time", Times));
                F_PartTime.HorizontalAlignment = Element.ALIGN_LEFT;
                F_PartTime.FixedHeight = 15f;
                F_PartTime.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(F_PartTime);


                PdfPCell FWork_Add = new PdfPCell(new Phrase("Work Address", Times));
                FWork_Add.HorizontalAlignment = Element.ALIGN_LEFT;
                //MWork_Add.Colspan = 2;
                FWork_Add.FixedHeight = 15f;
                FWork_Add.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Add);

                if (!string.IsNullOrEmpty(F_Address.Trim()))
                {
                    PdfPCell FWork_Line = new PdfPCell(new Phrase(F_Address, Timesline));
                    FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    FWork_Line.FixedHeight = 15f;
                    FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FWork_Line);
                }
                else
                {
                    PdfPCell FWork_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    FWork_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MWork_Line.Colspan = 2;
                    FWork_Line.FixedHeight = 15f;
                    FWork_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(FWork_Line);
                }

                PdfPCell FWork_Phone = new PdfPCell(new Phrase("Work Phone", Times));
                FWork_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                FWork_Phone.Colspan = 2;
                FWork_Phone.FixedHeight = 15f;
                FWork_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                EmploymentDet.AddCell(FWork_Phone);

                if (!string.IsNullOrEmpty(F_Phone.Trim()))
                {
                    MaskedTextBox mskphn = new MaskedTextBox();
                    mskphn.Mask = "(999)000-0000";
                    mskphn.Text = F_Phone.Trim();

                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase(mskphn.Text, Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }
                else
                {
                    PdfPCell MWork_Phone_Line = new PdfPCell(new Phrase("________________________________________", Times));
                    MWork_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    MWork_Phone_Line.Colspan = 2;
                    MWork_Phone_Line.FixedHeight = 15f;
                    MWork_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    EmploymentDet.AddCell(MWork_Phone_Line);
                }



                PdfPCell Line = new PdfPCell(new Phrase("", Times));
                Line.HorizontalAlignment = Element.ALIGN_CENTER;
                Line.Colspan = 6;
                //Line.FixedHeight = 15f;
                Line.BorderWidthBottom = 2f;
                Line.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                EmploymentDet.AddCell(Line);

                document.Add(EmploymentDet);

                #endregion

                #region Emergency Data Details

                PdfPTable Emergency = new PdfPTable(4);
                Emergency.TotalWidth = 750f;
                Emergency.WidthPercentage = 100;
                Emergency.LockedWidth = true;
                float[] Emergency_widths = new float[] { 55f, 50f, 40f, 50f };
                Emergency.SetWidths(Emergency_widths);
                Emergency.HorizontalAlignment = Element.ALIGN_CENTER;
                Emergency.SpacingBefore = 10f;

                PdfPCell Emer_Head = new PdfPCell(new Phrase("Emergency/Medical Data", TblFontBold));
                Emer_Head.Colspan = 4;
                Emer_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                Emer_Head.FixedHeight = 15f;
                Emer_Head.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Emergency.AddCell(Emer_Head);

                if (chldEmemDetails.Count > 0)
                {
                    int Em_Count = 0;

                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.FixedHeight = 15f;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name);

                    PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                    Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Relation.FixedHeight = 15f;
                    Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Relation);

                    PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                    Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Addr.FixedHeight = 15f;
                    Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Addr);

                    PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                    Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Phone.FixedHeight = 15f;
                    Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Phone);

                    foreach (ChldMstEMEMEntitty item in chldEmemDetails)
                    {
                        //PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", Times));
                        //Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Name.FixedHeight = 15f;
                        //Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Name);
                        if (!string.IsNullOrEmpty(item.EMERName.Trim()))
                        {
                            PdfPCell Emer_Name_Line = new PdfPCell(new Phrase(item.EMERName, Times));
                            Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Name_Line.FixedHeight = 15f;
                            Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Name_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Name_Line.FixedHeight = 15f;
                            Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Name_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
                        {
                            string Rel_Desc = string.Empty;
                            if (AgyTabs_List.Count > 0)
                            {
                                AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
                                Rel_Desc = Rela.Code_Desc.Trim();
                            }

                            PdfPCell Emer_Rela = new PdfPCell(new Phrase(Rel_Desc, Times));
                            Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Rela.FixedHeight = 15f;
                            Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Rela);
                        }
                        else
                        {
                            PdfPCell Emer_Rela = new PdfPCell(new Phrase("________________", Times));
                            Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Rela.FixedHeight = 15f;
                            Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Rela);
                        }


                        if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress1, Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Address_Line.FixedHeight = 15f;
                            Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Address_Line);
                        }
                        //PdfPCell Emer_Tel = new PdfPCell(new Phrase("Telephone:", Times));
                        //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                        ////Emer_Space.Colspan = 2;
                        //Emer_Tel.FixedHeight = 15f;
                        //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel);
                        //string Emer_Phone = string.Empty;
                        //if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()) && item.EmerPhone1.Trim().Length == 10)
                        //    Emer_Phone = "(" + item.EmerPhone1.Substring(0, 3).Trim() + ") " + item.EmerPhone1.Substring(3, 3).Trim() + "-" + item.EmerPhone1.Substring(6, 4).Trim();
                        //else
                        //    Emer_Phone = item.EmerPhone1.Trim();

                        if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
                        {
                            MaskedComboBox mskemerphn = new MaskedComboBox();
                            mskemerphn.Mask = "(000)000-0000";
                            mskemerphn.Text = item.EmerPhone1;
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }
                        else
                        {
                            PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("________________", Times));
                            Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Tel_Line.FixedHeight = 15f;
                            Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Tel_Line);
                        }

                        if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()) || !string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                        {
                            PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                            Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                            Emer_Space.Colspan = 2;
                            Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Emergency.AddCell(Emer_Space);

                            if (!string.IsNullOrEmpty(item.EmerAddress2.Trim()))
                            {
                                PdfPCell Emer_Address_Line = new PdfPCell(new Phrase(item.EmerAddress2, Times));
                                Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Address_Line.FixedHeight = 15f;
                                Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Address_Line);
                            }
                            else
                            {
                                PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("", Times));
                                Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Address_Line.FixedHeight = 15f;
                                Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Address_Line);
                            }

                            if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                            {
                                MaskedComboBox mskemerphn = new MaskedComboBox();
                                mskemerphn.Mask = "(000)000-0000";
                                mskemerphn.Text = item.EmerPhone2;
                                PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase(mskemerphn.Text, Times));
                                Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Tel_Line.FixedHeight = 15f;
                                Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Tel_Line);
                            }
                            else
                            {
                                PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                                Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                                Emer_Tel_Line.FixedHeight = 15f;
                                Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Emergency.AddCell(Emer_Tel_Line);
                            }
                        }

                        Em_Count++;
                        if (Em_Count == 2)
                            break;
                    }
                }
                else
                {
                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name", TblFontBold));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.FixedHeight = 15f;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Name);

                    PdfPCell Emer_Relation = new PdfPCell(new Phrase("Relation", TblFontBold));
                    Emer_Relation.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Relation.FixedHeight = 15f;
                    Emer_Relation.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Relation);

                    PdfPCell Emer_Addr = new PdfPCell(new Phrase("Address", TblFontBold));
                    Emer_Addr.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Addr.FixedHeight = 15f;
                    Emer_Addr.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Addr);

                    PdfPCell Emer_Phone = new PdfPCell(new Phrase("Phone", TblFontBold));
                    Emer_Phone.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Phone.FixedHeight = 15f;
                    Emer_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Emergency.AddCell(Emer_Phone);

                    for (int i = 0; i < 2; i++)
                    {
                        PdfPCell Emer_Name1 = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name1.FixedHeight = 15f;
                        Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name1);

                        PdfPCell Emer_Name_Line = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Name_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name_Line.FixedHeight = 15f;
                        Emer_Name_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Name_Line);

                        //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Space.Colspan = 2;
                        //Emer_Space.FixedHeight = 15f;
                        //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Space);

                        PdfPCell Emer_Address = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address.FixedHeight = 15f;
                        Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address);

                        PdfPCell Emer_Address_Line = new PdfPCell(new Phrase("______________________________", Times));
                        Emer_Address_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Address_Line.FixedHeight = 15f;
                        Emer_Address_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Emergency.AddCell(Emer_Address_Line);

                        //PdfPCell Emer_Space = new PdfPCell(new Phrase("", Times));
                        //Emer_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Space.Colspan = 2;
                        //Emer_Space.FixedHeight = 15f;
                        //Emer_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Space);

                        //PdfPCell Emer_Tel = new PdfPCell(new Phrase("", Times));
                        //Emer_Tel.HorizontalAlignment = Element.ALIGN_RIGHT;
                        ////Emer_Space.Colspan = 2;
                        //Emer_Tel.FixedHeight = 15f;
                        //Emer_Tel.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel);

                        //PdfPCell Emer_Tel_Line = new PdfPCell(new Phrase("", Times));
                        //Emer_Tel_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                        //Emer_Tel_Line.FixedHeight = 15f;
                        //Emer_Tel_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        //Emergency.AddCell(Emer_Tel_Line);
                    }
                }

                //PdfPCell Emer_Space1 = new PdfPCell(new Phrase("", Times));
                //Emer_Space1.HorizontalAlignment = Element.ALIGN_LEFT;
                //Emer_Space1.Colspan = 4;
                //Emer_Space1.FixedHeight = 15f;
                //Emer_Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Emergency.AddCell(Emer_Space1);


                document.Add(Emergency);

                #endregion

                #region Health Insurance Information

                PdfPTable InsuranceTable = new PdfPTable(5);
                InsuranceTable.TotalWidth = 750f;
                InsuranceTable.WidthPercentage = 100;
                InsuranceTable.LockedWidth = true;
                float[] InsuranceTable_widths = new float[] { 25f, 30f, 45f, 60f, 25f };
                InsuranceTable.SetWidths(InsuranceTable_widths);
                InsuranceTable.HorizontalAlignment = Element.ALIGN_CENTER;
                InsuranceTable.SpacingBefore = 10f;

                PdfPCell INS_Head = new PdfPCell(new Phrase("HEALTH INSURANCE INFORMATION", TblFontBold));
                INS_Head.Colspan = 5;
                INS_Head.HorizontalAlignment = Element.ALIGN_LEFT;
                INS_Head.FixedHeight = 15f;
                INS_Head.Border = iTextSharp.text.Rectangle.BOX;
                INS_Head.BorderWidth = 1f;
                InsuranceTable.AddCell(INS_Head);

                for (int i = 0; i < 4; i++)
                {
                    PdfPCell I1 = new PdfPCell(new Phrase("Name", TableFont));
                    I1.HorizontalAlignment = Element.ALIGN_LEFT;
                    I1.Colspan = 5;
                    I1.FixedHeight = 15f;
                    I1.BorderWidth = 1f;
                    I1.Border = iTextSharp.text.Rectangle.BOX;
                    InsuranceTable.AddCell(I1);

                    if (chldMstDetails != null && i == 0)
                    {
                        PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
                        I2.HorizontalAlignment = Element.ALIGN_LEFT;
                        I2.Rowspan = 2;
                        I2.BorderWidth = 1f;
                        I2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I2);

                        PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        I3.HorizontalAlignment = Element.ALIGN_LEFT;
                        I3.BorderWidth = 1f;
                        I3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        I4.HorizontalAlignment = Element.ALIGN_LEFT;
                        I4.BorderWidth = 1f;
                        I4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I4);

                        PdfPCell I5 = new PdfPCell(new Phrase(chldMstDetails.DoctorAddress.Trim(), TableFont));
                        I5.HorizontalAlignment = Element.ALIGN_LEFT;
                        I5.BorderWidth = 1f;
                        I5.Rowspan = 2;
                        I5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I5);

                        PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
                        I6.HorizontalAlignment = Element.ALIGN_LEFT;
                        I6.BorderWidth = 1f;
                        I6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I6);

                        if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                        {
                            PdfPCell I7 = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), TableFont));
                            I7.HorizontalAlignment = Element.ALIGN_LEFT;
                            I7.BorderWidth = 1f;
                            I7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I7);
                        }
                        else
                        {
                            PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
                            I7.HorizontalAlignment = Element.ALIGN_LEFT;
                            I7.BorderWidth = 1f;
                            I7.FixedHeight = 15f;
                            I7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I7);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                        {
                            PdfPCell I8 = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim(), TableFont));
                            I8.HorizontalAlignment = Element.ALIGN_LEFT;
                            I8.BorderWidth = 1f;
                            I8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I8);
                        }
                        else
                        {
                            PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
                            I8.HorizontalAlignment = Element.ALIGN_LEFT;
                            I8.BorderWidth = 1f;
                            I8.FixedHeight = 15f;
                            I8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I8);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                        {
                            PdfPCell I9 = new PdfPCell(new Phrase(chldMstDetails.DoctorPhone.Trim(), TableFont));
                            I9.HorizontalAlignment = Element.ALIGN_LEFT;
                            I9.BorderWidth = 1f;
                            I9.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I9);
                        }
                        else
                        {
                            PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
                            I9.HorizontalAlignment = Element.ALIGN_LEFT;
                            I9.BorderWidth = 1f;
                            I9.FixedHeight = 15f;
                            I9.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(I9);
                        }

                        PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
                        D1.HorizontalAlignment = Element.ALIGN_LEFT;
                        D1.BorderWidth = 1f;
                        D1.Rowspan = 2;
                        D1.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D1);

                        PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        D2.HorizontalAlignment = Element.ALIGN_LEFT;
                        D2.BorderWidth = 1f;
                        D2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        D3.HorizontalAlignment = Element.ALIGN_LEFT;
                        D3.BorderWidth = 1f;
                        D3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D3);

                        PdfPCell D4 = new PdfPCell(new Phrase(chldMstDetails.DentistAddress.Trim(), TableFont));
                        D4.HorizontalAlignment = Element.ALIGN_LEFT;
                        D4.BorderWidth = 1f;
                        D4.Rowspan = 2;
                        D4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D4);

                        PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
                        D5.HorizontalAlignment = Element.ALIGN_LEFT;
                        D5.BorderWidth = 1f;
                        D5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D5);

                        if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                        {
                            PdfPCell D6 = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), TableFont));
                            D6.HorizontalAlignment = Element.ALIGN_LEFT;
                            D6.BorderWidth = 1f;
                            D6.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D6);
                        }
                        else
                        {
                            PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
                            D6.HorizontalAlignment = Element.ALIGN_LEFT;
                            D6.BorderWidth = 1f;
                            D6.FixedHeight = 15f;
                            D6.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D6);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                        {
                            PdfPCell D7 = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim(), TableFont));
                            D7.HorizontalAlignment = Element.ALIGN_LEFT;
                            D7.BorderWidth = 1f;
                            D7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D7);
                        }
                        else
                        {
                            PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
                            D7.HorizontalAlignment = Element.ALIGN_LEFT;
                            D7.BorderWidth = 1f;
                            D7.FixedHeight = 15f;
                            D7.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D7);
                        }

                        if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                        {
                            PdfPCell D8 = new PdfPCell(new Phrase(chldMstDetails.DentistPhone.Trim(), TableFont));
                            D8.HorizontalAlignment = Element.ALIGN_LEFT;
                            D8.BorderWidth = 1f;
                            D8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D8);
                        }
                        else
                        {
                            PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
                            D8.HorizontalAlignment = Element.ALIGN_LEFT;
                            D8.BorderWidth = 1f;
                            D8.FixedHeight = 15f;
                            D8.Border = iTextSharp.text.Rectangle.BOX;
                            InsuranceTable.AddCell(D8);
                        }
                    }
                    else
                    {
                        PdfPCell I2 = new PdfPCell(new Phrase("Medical", TableFont));
                        I2.HorizontalAlignment = Element.ALIGN_LEFT;
                        I2.Rowspan = 2;
                        I2.BorderWidth = 1f;
                        I2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I2);

                        PdfPCell I3 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        I3.HorizontalAlignment = Element.ALIGN_LEFT;
                        I3.BorderWidth = 1f;
                        I3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell I4 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        I4.HorizontalAlignment = Element.ALIGN_LEFT;
                        I4.BorderWidth = 1f;
                        I4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I4);

                        PdfPCell I5 = new PdfPCell(new Phrase("", TableFont));
                        I5.HorizontalAlignment = Element.ALIGN_LEFT;
                        I5.BorderWidth = 1f;
                        I5.Rowspan = 2;
                        I5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I5);

                        PdfPCell I6 = new PdfPCell(new Phrase("Telephone", TableFont));
                        I6.HorizontalAlignment = Element.ALIGN_LEFT;
                        I6.BorderWidth = 1f;
                        I6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I6);

                        PdfPCell I7 = new PdfPCell(new Phrase("", TableFont));
                        I7.HorizontalAlignment = Element.ALIGN_LEFT;
                        I7.BorderWidth = 1f;
                        I7.FixedHeight = 15f;
                        I7.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I7);

                        PdfPCell I8 = new PdfPCell(new Phrase("", TableFont));
                        I8.HorizontalAlignment = Element.ALIGN_LEFT;
                        I8.BorderWidth = 1f;
                        I8.FixedHeight = 15f;
                        I8.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I8);

                        PdfPCell I9 = new PdfPCell(new Phrase("", TableFont));
                        I9.HorizontalAlignment = Element.ALIGN_LEFT;
                        I9.BorderWidth = 1f;
                        I9.FixedHeight = 15f;
                        I9.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I9);


                        PdfPCell D1 = new PdfPCell(new Phrase("Dental", TableFont));
                        D1.HorizontalAlignment = Element.ALIGN_LEFT;
                        D1.BorderWidth = 1f;
                        D1.Rowspan = 2;
                        D1.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D1);

                        PdfPCell D2 = new PdfPCell(new Phrase("Insurance Plan", TableFont));
                        D2.HorizontalAlignment = Element.ALIGN_LEFT;
                        D2.BorderWidth = 1f;
                        D2.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(I3);

                        PdfPCell D3 = new PdfPCell(new Phrase("Doctor Name", TableFont));
                        D3.HorizontalAlignment = Element.ALIGN_LEFT;
                        D3.BorderWidth = 1f;
                        D3.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D3);

                        PdfPCell D4 = new PdfPCell(new Phrase("", TableFont));
                        D4.HorizontalAlignment = Element.ALIGN_LEFT;
                        D4.BorderWidth = 1f;
                        D4.Rowspan = 2;
                        D4.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D4);

                        PdfPCell D5 = new PdfPCell(new Phrase("Telephone", TableFont));
                        D5.HorizontalAlignment = Element.ALIGN_LEFT;
                        D5.BorderWidth = 1f;
                        D5.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D5);

                        PdfPCell D6 = new PdfPCell(new Phrase("", TableFont));
                        D6.HorizontalAlignment = Element.ALIGN_LEFT;
                        D6.BorderWidth = 1f;
                        D6.FixedHeight = 15f;
                        D6.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D6);

                        PdfPCell D7 = new PdfPCell(new Phrase("", TableFont));
                        D7.HorizontalAlignment = Element.ALIGN_LEFT;
                        D7.BorderWidth = 1f;
                        D7.FixedHeight = 15f;
                        D7.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D7);

                        PdfPCell D8 = new PdfPCell(new Phrase("", TableFont));
                        D8.HorizontalAlignment = Element.ALIGN_LEFT;
                        D8.BorderWidth = 1f;
                        D8.FixedHeight = 15f;
                        D8.Border = iTextSharp.text.Rectangle.BOX;
                        InsuranceTable.AddCell(D8);
                    }
                }

                document.Add(InsuranceTable);

                #endregion

                #region Mediacal data from chldmst

                //PdfPTable MediaclTable = new PdfPTable(4);
                //MediaclTable.TotalWidth = 750f;
                //MediaclTable.WidthPercentage = 100;
                //MediaclTable.LockedWidth = true;
                //float[] MediaclTable_widths = new float[] { 55f, 50f, 40f, 50f };
                //MediaclTable.SetWidths(MediaclTable_widths);
                //MediaclTable.HorizontalAlignment = Element.ALIGN_CENTER;
                //MediaclTable.SpacingBefore = 10f;
                //if (chldMstDetails != null)
                //{

                //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan.FixedHeight = 15f;
                //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan);

                //    if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                //    {
                //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
                //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_Plan_Line.FixedHeight = 15f;
                //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_Plan_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_Plan_Line.FixedHeight = 15f;
                //        Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_Plan_Line);
                //    }

                //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Med_No.FixedHeight = 15f;
                //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No);

                //    if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }

                //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_LEFT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Ins_Catg.FixedHeight = 15f;
                //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg);

                //    if (!string.IsNullOrEmpty(chldMstDetails.InsCat.Trim()))
                //    {
                //        string INS_CATG_DESC=string.Empty;
                //        if (lookInsuranceCategory.Count > 0)
                //        {
                //            foreach (CommonEntity Ins in lookInsuranceCategory)
                //            {
                //                if (chldMstDetails.InsCat.Trim() == Ins.Code.Trim())
                //                {
                //                    INS_CATG_DESC = Ins.Desc.Trim(); break;
                //                }
                //            }
                //        }

                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(INS_CATG_DESC, Timesline));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.FixedHeight = 15f;
                //        Chld_Med_No_Line.Colspan = 3;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Med_No_Line.Colspan = 3;
                //        Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Med_No_Line);
                //    }


                //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor.FixedHeight = 15f;
                //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                //    {
                //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim() + ", " + chldMstDetails.DoctorAddress, Timesline));
                //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doctor_Line.FixedHeight = 15f;
                //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doctor_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doctor_Line.FixedHeight = 15f;
                //        Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doctor_Line);
                //    }

                //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Doc_Phone.FixedHeight = 15f;
                //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                //    {
                //        MaskedTextBox mskdocphn = new MaskedTextBox();
                //        mskdocphn.Mask = "(000)000-0000";
                //        mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();
                //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doc_Phone_Line.FixedHeight = 15f;
                //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Doc_Phone_Line.FixedHeight = 15f;
                //        Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Doc_Phone_Line);
                //    }


                //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space2.Colspan = 4;
                //    Emer_Space2.FixedHeight = 10f;
                //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space2);

                //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan.FixedHeight = 15f;
                //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentalPlan.Trim()))
                //    {
                //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.DentalPlan.Trim(), Timesline));
                //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_Plan_Line.FixedHeight = 15f;
                //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_Plan_Line.FixedHeight = 15f;
                //        Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_Plan_Line);
                //    }

                //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dent_No.FixedHeight = 15f;
                //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentalInsurer.Trim()))
                //    {
                //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase(chldMstDetails.DentalInsurer.Trim(), Timesline));
                //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_No_Line.FixedHeight = 15f;
                //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_No_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dent_No_Line.FixedHeight = 15f;
                //        Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dent_No_Line);
                //    }


                //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist.FixedHeight = 15f;
                //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist);
                //    if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                //    {
                //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim() + ", " + chldMstDetails.DentistAddress, Timesline));
                //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Line.FixedHeight = 15f;
                //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Line.FixedHeight = 15f;
                //        Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Line);
                //    }

                //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dentist_Phone.FixedHeight = 15f;
                //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone);

                //    if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                //    {
                //        MaskedTextBox mskdocphn = new MaskedTextBox();
                //        mskdocphn.Mask = "(000)000-0000";
                //        mskdocphn.Text = chldMstDetails.DentistPhone.Trim();
                //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase(mskdocphn.Text.Trim(), Timesline));
                //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
                //    }
                //    else
                //    {
                //        PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //        Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Chld_Dentist_Phone_Line);
                //    }

                //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space3.Colspan = 4;
                //    Emer_Space3.FixedHeight = 10f;
                //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space3);

                //    if (caseconddet != null)
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                //        {
                //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        else
                //        {
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Timesline));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Timesline));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }


                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                //        {
                //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        HH_Space.FixedHeight = 15f;
                //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HH_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Timesline));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DEVL_Space.FixedHeight = 15f;
                //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DEVL_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                //        {
                //            string AltFund_Desc = string.Empty;
                //            foreach (DataRow drFUND in dtFUND.Rows)
                //            {
                //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                //                {
                //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                //                }
                //            }

                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                //        {
                //            string Trans_Desc = string.Empty;
                //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                //            foreach (CommonEntity agyEntity in lookClsTransport)
                //            {
                //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                //                {
                //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                //                }
                //            }

                //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //            else
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);

                //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //    else
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIESLine.FixedHeight = 15f;
                //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIESLine);

                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITYLine.FixedHeight = 15f;
                //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITYLine);

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY_Date_Line.FixedHeight = 15f;
                //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date_Line);

                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONSLine.FixedHeight = 15f;
                //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONSLine);

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICALLine.FixedHeight = 15f;
                //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICALLine);

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DIETLine.Colspan = 2;
                //        DIETLine.FixedHeight = 15f;
                //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIETLine);

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DIET_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //HOUSEHOLDLine.Colspan = 2;
                //        HOUSEHOLDLine.FixedHeight = 15f;
                //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLDLine);

                //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        HOUSEHOLD_Space.Colspan = 2;
                //        HOUSEHOLD_Space.FixedHeight = 15f;
                //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLD_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DevpLine.Colspan = 2;
                //        DevpLine.FixedHeight = 15f;
                //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DevpLine);

                //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp_Space.Colspan = 2;
                //        Devp_Space.FixedHeight = 15f;
                //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnddesc.FixedHeight = 15f;
                //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnddesc);

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);


                //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Trans_Space.FixedHeight = 15f;
                //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans_Space);

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);


                //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        PickSpace.FixedHeight = 15f;
                //        PickSpace.Colspan = 3;
                //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(PickSpace);

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);


                //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        dropSpace.FixedHeight = 15f;
                //        dropSpace.Colspan = 3;
                //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(dropSpace);

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //}
                //else
                //{
                //    PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Child Medical Insurance Plan", Times));
                //    Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan.FixedHeight = 15f;
                //    Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan);

                //    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_Plan_Line.FixedHeight = 15f;
                //    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_Plan_Line);

                //    PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Medical Insurance Name", Times));
                //    Chld_Med_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Med_No.FixedHeight = 15f;
                //    Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No);


                //    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Med_No_Line.FixedHeight = 15f;
                //    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Med_No_Line);

                //    PdfPCell Chld_Ins_Catg = new PdfPCell(new Phrase("Medical Insurance Category", Times));
                //    Chld_Ins_Catg.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Ins_Catg.FixedHeight = 15f;
                //    Chld_Ins_Catg.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg);


                //    PdfPCell Chld_Ins_Catg_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Ins_Catg_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Ins_Catg_Line.FixedHeight = 15f;
                //    Chld_Ins_Catg_Line.Colspan = 3;
                //    Chld_Ins_Catg_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Ins_Catg_Line);

                //    PdfPCell Chld_Doctor = new PdfPCell(new Phrase("Child Doctor & Address", Times));
                //    Chld_Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor.FixedHeight = 15f;
                //    Chld_Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor);

                //    PdfPCell Chld_Doctor_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Doctor_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doctor_Line.FixedHeight = 15f;
                //    Chld_Doctor_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doctor_Line);

                //    PdfPCell Chld_Doc_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Doc_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Doc_Phone.FixedHeight = 15f;
                //    Chld_Doc_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone);


                //    PdfPCell Chld_Doc_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Doc_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Doc_Phone_Line.FixedHeight = 15f;
                //    Chld_Doc_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Doc_Phone_Line);

                //    PdfPCell Emer_Space2 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space2.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space2.Colspan = 4;
                //    Emer_Space2.FixedHeight = 10f;
                //    Emer_Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space2);

                //    PdfPCell Chld_Dent_Plan = new PdfPCell(new Phrase("Child Dental Insurance Plan", Times));
                //    Chld_Dent_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan.FixedHeight = 15f;
                //    Chld_Dent_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan);

                //    PdfPCell Chld_Dent_Plan_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Dent_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_Plan_Line.FixedHeight = 15f;
                //    Chld_Dent_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_Plan_Line);

                //    PdfPCell Chld_Dent_No = new PdfPCell(new Phrase("Dental Insurance Name", Times));
                //    Chld_Dent_No.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dent_No.FixedHeight = 15f;
                //    Chld_Dent_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No);

                //    PdfPCell Chld_Dent_No_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Dent_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dent_No_Line.FixedHeight = 15f;
                //    Chld_Dent_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dent_No_Line);

                //    PdfPCell Chld_Dentist = new PdfPCell(new Phrase("Child Dentist & Address", Times));
                //    Chld_Dentist.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist.FixedHeight = 15f;
                //    Chld_Dentist.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist);

                //    PdfPCell Chld_Dentist_Line = new PdfPCell(new Phrase("_____________________________________________", Times));
                //    Chld_Dentist_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist_Line.FixedHeight = 15f;
                //    Chld_Dentist_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Line);

                //    PdfPCell Chld_Dentist_Phone = new PdfPCell(new Phrase("Phone#", Times));
                //    Chld_Dentist_Phone.HorizontalAlignment = Element.ALIGN_RIGHT;
                //    //Emer_Space.Colspan = 2;
                //    Chld_Dentist_Phone.FixedHeight = 15f;
                //    Chld_Dentist_Phone.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone);

                //    PdfPCell Chld_Dentist_Phone_Line = new PdfPCell(new Phrase("_____________________", Times));
                //    Chld_Dentist_Phone_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Chld_Dentist_Phone_Line.FixedHeight = 15f;
                //    Chld_Dentist_Phone_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Chld_Dentist_Phone_Line);

                //    PdfPCell Emer_Space3 = new PdfPCell(new Phrase("", Times));
                //    Emer_Space3.HorizontalAlignment = Element.ALIGN_LEFT;
                //    Emer_Space3.Colspan = 4;
                //    Emer_Space3.FixedHeight = 10f;
                //    Emer_Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //    MediaclTable.AddCell(Emer_Space3);

                //    if (caseconddet != null)
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                //        {
                //            string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        else
                //        {
                //            PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            ALLERGIESLine.Colspan = 2;
                //            ALLERGIESLine.FixedHeight = 15f;
                //            ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(ALLERGIESLine);
                //        }
                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Disability.Trim()))
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase(chldMstDetails.DisabilityType.Trim(), Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITYLine.FixedHeight = 15f;
                //            DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITYLine);
                //        }

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DiagnosisDate.Trim()))
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase(LookupDataAccess.Getdate(chldMstDetails.DiagnosisDate.Trim()), Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }
                //        else
                //        {
                //            PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //            DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //            DISABILITY_Date_Line.FixedHeight = 15f;
                //            DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(DISABILITY_Date_Line);
                //        }


                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                //        {
                //            string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICATIONSLine.Colspan = 2;
                //            MEDICATIONSLine.FixedHeight = 15f;
                //            MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICATIONSLine);
                //        }

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        if (!string.IsNullOrEmpty(caseconddet.MedConds.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.MedConds.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        if (!string.IsNullOrEmpty(caseconddet.DietRestrct.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DietRestrct.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        if (!string.IsNullOrEmpty(caseconddet.HHConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.HHConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell HH_Space = new PdfPCell(new Phrase("", Times));
                //        HH_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        HH_Space.FixedHeight = 15f;
                //        HH_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HH_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        if (!string.IsNullOrEmpty(caseconddet.DevlConcerns.Trim()))
                //        {
                //            string MedConds_desc = caseconddet.DevlConcerns.Replace("\r\n", " ");
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase(MedConds_desc.Trim(), Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }
                //        else
                //        {
                //            PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //            MEDICALLine.Colspan = 2;
                //            MEDICALLine.FixedHeight = 15f;
                //            MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(MEDICALLine);
                //        }

                //        PdfPCell DEVL_Space = new PdfPCell(new Phrase("", Times));
                //        DEVL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //MEDICAL_Space.Colspan = 2;
                //        DEVL_Space.FixedHeight = 15f;
                //        DEVL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DEVL_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        if (!string.IsNullOrEmpty(chldMstDetails.AltFundSrc.Trim()))
                //        {
                //            string AltFund_Desc = string.Empty;
                //            foreach (DataRow drFUND in dtFUND.Rows)
                //            {
                //                if (chldMstDetails.AltFundSrc.ToString().Trim() == drFUND["Code"].ToString().Trim())
                //                {
                //                    AltFund_Desc = drFUND["LookUpDesc"].ToString().Trim(); break;
                //                }
                //            }

                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(AltFund_Desc, Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);

                //        if (!string.IsNullOrEmpty(chldMstDetails.Transport.Trim()))
                //        {
                //            string Trans_Desc = string.Empty;
                //            List<CommonEntity> lookClsTransport = _model.lookupDataAccess.GetCMBTransport();
                //            foreach (CommonEntity agyEntity in lookClsTransport)
                //            {
                //                if (chldMstDetails.Transport.ToString().Trim() == agyEntity.Code.ToString().Trim())
                //                {
                //                    Trans_Desc = agyEntity.Desc.ToString().Trim(); break;
                //                }
                //            }

                //            if (!string.IsNullOrEmpty(Trans_Desc.Trim()))
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase(Trans_Desc, Timesline));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //            else
                //            {
                //                PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //                AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //                AltFnddesc.FixedHeight = 15f;
                //                AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //                MediaclTable.AddCell(AltFnddesc);
                //            }
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);

                //        if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.PickOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);

                //        if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase(chldMstDetails.DropOff.Trim(), Timesline));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }
                //        else
                //        {
                //            PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //            AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //            AltFnddesc.FixedHeight = 15f;
                //            AltFnddesc.Colspan = 3;
                //            AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //            MediaclTable.AddCell(AltFnddesc);
                //        }

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //    else
                //    {
                //        PdfPCell ALLERGIES = new PdfPCell(new Phrase("My Child has the following ALLERGIES", Times));
                //        ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES.FixedHeight = 15f;
                //        ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES);

                //        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIESLine.FixedHeight = 15f;
                //        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIESLine);

                //        PdfPCell ALLERGIES_Space = new PdfPCell(new Phrase("", Times));
                //        ALLERGIES_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        ALLERGIES_Space.Colspan = 2;
                //        ALLERGIES_Space.FixedHeight = 15f;
                //        ALLERGIES_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(ALLERGIES_Space);

                //        PdfPCell DISABILITY = new PdfPCell(new Phrase("Has been diagonosed with following DISABILITY", Times));
                //        DISABILITY.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY.FixedHeight = 15f;
                //        DISABILITY.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY);

                //        PdfPCell DISABILITYLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DISABILITYLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITYLine.FixedHeight = 15f;
                //        DISABILITYLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITYLine);

                //        PdfPCell DISABILITY_Date = new PdfPCell(new Phrase("Date", Times));
                //        DISABILITY_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        DISABILITY_Date.FixedHeight = 15f;
                //        DISABILITY_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date);

                //        PdfPCell DISABILITY_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        DISABILITY_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DISABILITY_Date_Line.FixedHeight = 15f;
                //        DISABILITY_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DISABILITY_Date_Line);

                //        PdfPCell MEDICATIONS = new PdfPCell(new Phrase("is taking following MEDICATIONS", Times));
                //        MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS.FixedHeight = 15f;
                //        MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS);

                //        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONSLine.FixedHeight = 15f;
                //        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONSLine);

                //        PdfPCell MEDICATIONS_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICATIONS_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICATIONS_Space.Colspan = 2;
                //        MEDICATIONS_Space.FixedHeight = 15f;
                //        MEDICATIONS_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICATIONS_Space);

                //        PdfPCell MEDICAL = new PdfPCell(new Phrase("has the following MEDICAL CONDITIONS", Times));
                //        MEDICAL.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL.FixedHeight = 15f;
                //        MEDICAL.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL);

                //        PdfPCell MEDICALLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        MEDICALLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICALLine.FixedHeight = 15f;
                //        MEDICALLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICALLine);

                //        PdfPCell MEDICAL_Space = new PdfPCell(new Phrase("", Times));
                //        MEDICAL_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        MEDICAL_Space.Colspan = 2;
                //        MEDICAL_Space.FixedHeight = 15f;
                //        MEDICAL_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(MEDICAL_Space);

                //        PdfPCell Diet = new PdfPCell(new Phrase("DIETARY RESTRICTIONS", Times));
                //        Diet.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Diet.FixedHeight = 15f;
                //        Diet.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Diet);

                //        PdfPCell DIETLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DIETLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DIETLine.Colspan = 2;
                //        DIETLine.FixedHeight = 15f;
                //        DIETLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIETLine);

                //        PdfPCell DIET_Space = new PdfPCell(new Phrase("", Times));
                //        DIET_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        DIET_Space.Colspan = 2;
                //        DIET_Space.FixedHeight = 15f;
                //        DIET_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DIET_Space);

                //        PdfPCell House = new PdfPCell(new Phrase("HOUSEHOLD CONCERNS ", Times));
                //        House.HorizontalAlignment = Element.ALIGN_LEFT;
                //        House.FixedHeight = 15f;
                //        House.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(House);

                //        PdfPCell HOUSEHOLDLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        HOUSEHOLDLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //HOUSEHOLDLine.Colspan = 2;
                //        HOUSEHOLDLine.FixedHeight = 15f;
                //        HOUSEHOLDLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLDLine);

                //        PdfPCell HOUSEHOLD_Space = new PdfPCell(new Phrase("", Times));
                //        HOUSEHOLD_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        HOUSEHOLD_Space.Colspan = 2;
                //        HOUSEHOLD_Space.FixedHeight = 15f;
                //        HOUSEHOLD_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(HOUSEHOLD_Space);

                //        PdfPCell Devp = new PdfPCell(new Phrase("DEVELOPMENTAL CONCERNS ", Times));
                //        Devp.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp.FixedHeight = 15f;
                //        Devp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp);

                //        PdfPCell DevpLine = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        DevpLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //DevpLine.Colspan = 2;
                //        DevpLine.FixedHeight = 15f;
                //        DevpLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(DevpLine);

                //        PdfPCell Devp_Space = new PdfPCell(new Phrase("", Times));
                //        Devp_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Devp_Space.Colspan = 2;
                //        Devp_Space.FixedHeight = 15f;
                //        Devp_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Devp_Space);

                //        PdfPCell AltFnd = new PdfPCell(new Phrase("Alternate Fund", Times));
                //        AltFnd.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnd.FixedHeight = 15f;
                //        AltFnd.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnd);

                //        PdfPCell AltFnddesc = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        AltFnddesc.HorizontalAlignment = Element.ALIGN_LEFT;
                //        AltFnddesc.FixedHeight = 15f;
                //        AltFnddesc.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(AltFnddesc);

                //        PdfPCell Trans = new PdfPCell(new Phrase("Transport", Times));
                //        Trans.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        Trans.FixedHeight = 15f;
                //        Trans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans);


                //        PdfPCell Trans_Space = new PdfPCell(new Phrase("_____________________", Times));
                //        Trans_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Trans_Space.FixedHeight = 15f;
                //        Trans_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Trans_Space);

                //        PdfPCell Pick = new PdfPCell(new Phrase("Pickup", Times));
                //        Pick.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Pick.FixedHeight = 15f;
                //        Pick.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Pick);


                //        PdfPCell PickSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        PickSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        PickSpace.FixedHeight = 15f;
                //        PickSpace.Colspan = 3;
                //        PickSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(PickSpace);

                //        PdfPCell Drop = new PdfPCell(new Phrase("Dropoff", Times));
                //        Drop.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Drop.FixedHeight = 15f;
                //        Drop.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Drop);


                //        PdfPCell dropSpace = new PdfPCell(new Phrase("_____________________________________________", Times));
                //        dropSpace.HorizontalAlignment = Element.ALIGN_LEFT;
                //        dropSpace.FixedHeight = 15f;
                //        dropSpace.Colspan = 3;
                //        dropSpace.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(dropSpace);

                //        PdfPCell Last_Space = new PdfPCell(new Phrase("", Times));
                //        Last_Space.HorizontalAlignment = Element.ALIGN_LEFT;
                //        Last_Space.Colspan = 4;
                //        Last_Space.FixedHeight = 15f;
                //        Last_Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Last_Space);

                //        PdfPCell Signature = new PdfPCell(new Phrase("Signature of Parent/Gurdian", Times));
                //        Signature.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature.FixedHeight = 15f;
                //        Signature.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature);

                //        PdfPCell SignatureLine = new PdfPCell(new Phrase("______________________________________", Times));
                //        SignatureLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //SignatureLine.FixedHeight = 15f;
                //        SignatureLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(SignatureLine);

                //        PdfPCell Signature_Date = new PdfPCell(new Phrase("Date", Times));
                //        Signature_Date.HorizontalAlignment = Element.ALIGN_RIGHT;
                //        //DISABILITY_Space.Colspan = 2;
                //        //Signature_Date.FixedHeight = 15f;
                //        Signature_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date);

                //        PdfPCell Signature_Date_Line = new PdfPCell(new Phrase("_____________________", Times));
                //        Signature_Date_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //        //Signature_Date_Line.FixedHeight = 15f;
                //        Signature_Date_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //        MediaclTable.AddCell(Signature_Date_Line);

                //        PdfPCell Line_Last = new PdfPCell(new Phrase("", Times));
                //        Line_Last.HorizontalAlignment = Element.ALIGN_CENTER;
                //        Line_Last.Colspan = 6;
                //        //Line_Last.FixedHeight = 15f;
                //        Line_Last.BorderWidthBottom = 2f;
                //        Line_Last.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                //        MediaclTable.AddCell(Line_Last);
                //    }
                //}

                //}
                //document.Add(MediaclTable);
                #endregion
            }

            if (Privileges.ModuleCode == "05")
            {
                PdfPTable Declartion = new PdfPTable(2);
                Declartion.TotalWidth = 750f;
                Declartion.WidthPercentage = 100;
                Declartion.LockedWidth = true;
                float[] Declartion_widths = new float[] { 80f, 40f };
                Declartion.SetWidths(Declartion_widths);
                Declartion.HorizontalAlignment = Element.ALIGN_CENTER;
                Declartion.SpacingBefore = 20f;

                PdfPCell Declartion_DESC = new PdfPCell(new Phrase("The information provided is true and correct to the best of my knowledge and belief. I am aware that I am subject to prosecution for providing false or fraudulent information. I understand I may request a hearing to appeal a denial of eligibility, amount of assistancereceived, or a delay of service delivery.", Times));
                Declartion_DESC.Colspan = 2;
                Declartion_DESC.HorizontalAlignment = Element.ALIGN_LEFT;
                //SerVice_DESC.FixedHeight = 15f;
                Declartion_DESC.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(Declartion_DESC);

                PdfPCell App_Sign = new PdfPCell(new Phrase("Applicant Signature: ______________________________________", Times));
                App_Sign.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Sign);

                PdfPCell App_Date = new PdfPCell(new Phrase("Date: ______________________", Times));
                App_Date.HorizontalAlignment = Element.ALIGN_LEFT;
                App_Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Declartion.AddCell(App_Date);

                document.Add(Declartion);
            }

            #region Last Paragarph
            if (!string.IsNullOrEmpty(Attention.Trim()))
            {
                document.NewPage();

                PdfPTable CTAttn = new PdfPTable(2);
                CTAttn.TotalWidth = 750f;
                CTAttn.WidthPercentage = 100;
                CTAttn.LockedWidth = true;
                float[] CTAttn_widths = new float[] { 80f, 40f };
                CTAttn.SetWidths(CTAttn_widths);
                CTAttn.HorizontalAlignment = Element.ALIGN_CENTER;
                CTAttn.SpacingBefore = 20f;

                PdfPCell S1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                S1.Colspan = 2;
                S1.HorizontalAlignment = Element.ALIGN_CENTER;
                S1.FixedHeight = 15f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S1);

                PdfPCell S2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                S2.Colspan = 2;
                S2.HorizontalAlignment = Element.ALIGN_CENTER;
                S2.FixedHeight = 15f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S2);

                PdfPCell S3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.FixedHeight = 15f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S3);

                PdfPCell S4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                S4.HorizontalAlignment = Element.ALIGN_RIGHT;
                S4.FixedHeight = 15f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S4);

                PdfPCell S5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.FixedHeight = 15f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(S5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }
                else
                {
                    PdfPCell S6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    S6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    S6.FixedHeight = 15f;
                    S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    CTAttn.AddCell(S6);
                }

                PdfPCell P1 = new PdfPCell(new Phrase("", Times));
                P1.Colspan = 2;
                P1.FixedHeight = 20f;
                P1.HorizontalAlignment = Element.ALIGN_LEFT;
                P1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(P1);


                PdfPCell A1 = new PdfPCell(new Phrase(Attention.Trim(), Times));
                A1.Colspan = 2;
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                CTAttn.AddCell(A1);

                document.Add(CTAttn);

            }

            #endregion

            if (ShortName == "UETHDA")
            {
                document.NewPage();
                PdfPTable Uethdadecl = new PdfPTable(2);
                Uethdadecl.TotalWidth = 750f;
                Uethdadecl.WidthPercentage = 100;
                Uethdadecl.LockedWidth = true;
                float[] Declartion_widths = new float[] { 100f, 50f };
                Uethdadecl.SetWidths(Declartion_widths);
                Uethdadecl.HorizontalAlignment = Element.ALIGN_CENTER;
                //Uethdadecl.SpacingBefore = 20f;

                PdfPCell E1 = new PdfPCell(new Phrase(Header_Desc, HeaderFontBold));
                E1.Colspan = 2;
                E1.HorizontalAlignment = Element.ALIGN_CENTER;
                E1.FixedHeight = 15f;
                E1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E1);

                PdfPCell E2 = new PdfPCell(new Phrase(Form_Selection, HeaderFontBold));
                E2.Colspan = 2;
                E2.HorizontalAlignment = Element.ALIGN_CENTER;
                E2.FixedHeight = 15f;
                E2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E2);

                PdfPCell E3 = new PdfPCell(new Phrase("Applicant No: " + BaseForm.BaseApplicationNo, TableFont));
                //E3.Colspan = 2;
                E3.HorizontalAlignment = Element.ALIGN_LEFT;
                E3.FixedHeight = 13f;
                E3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E3);

                PdfPCell E4 = new PdfPCell(new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TableFont));
                //E4.Colspan = 4;
                E4.HorizontalAlignment = Element.ALIGN_RIGHT;
                E4.FixedHeight = 13f;
                E4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E4);

                PdfPCell E5 = new PdfPCell(new Phrase("Applicant Name   " + BaseForm.BaseApplicationName, TableFont));
                //E5.Colspan = 2;
                E5.HorizontalAlignment = Element.ALIGN_LEFT;
                E5.FixedHeight = 13f;
                E5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(E5);

                if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                {
                    PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), TableFont));
                    //E6.Colspan = 4;
                    E6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    E6.FixedHeight = 13f;
                    E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(E6);
                }
                else
                {
                    PdfPCell E6 = new PdfPCell(new Phrase("Application Date: " + "____________", TableFont));
                    //E6.Colspan = 4;
                    E6.HorizontalAlignment = Element.ALIGN_RIGHT;
                    E6.FixedHeight = 13f;
                    E6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(E6);
                }

                PdfPCell S = new PdfPCell(new Phrase("", TableFont));
                S.HorizontalAlignment = Element.ALIGN_LEFT;
                S.Colspan = 2;
                S.FixedHeight = 15f;
                S.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S);

                PdfPCell A1 = new PdfPCell(new Phrase("Applicant was:     Approved ________      Denied________    (Over Income________       No Proof________       No Need________)", TableFont));
                A1.HorizontalAlignment = Element.ALIGN_LEFT;
                A1.Colspan = 2;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A1);

                PdfPCell A2 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
                A2.HorizontalAlignment = Element.ALIGN_LEFT;
                A2.Colspan = 2;
                A2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A2);

                PdfPCell S1 = new PdfPCell(new Phrase("", TableFont));
                S1.HorizontalAlignment = Element.ALIGN_LEFT;
                S1.Colspan = 2;
                S1.FixedHeight = 20f;
                S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S1);

                PdfPCell A3 = new PdfPCell(new Phrase("Applicant was notified of eligibility on the date of application:  Yes_____        No_____             Date if No___________", TableFont));
                A3.HorizontalAlignment = Element.ALIGN_LEFT;
                A3.Colspan = 2;
                A3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A3);

                PdfPCell A4 = new PdfPCell(new Phrase("Certification Period:                        Service                                                                  Open                                  Close", TableFont));
                A4.HorizontalAlignment = Element.ALIGN_LEFT;
                A4.Colspan = 2;
                A4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A4);

                for (int i = 0; i < 3; i++)
                {
                    PdfPCell A5 = new PdfPCell(new Phrase("_____________________________________________________                   __/__/__                            __/__/__", TableFont));
                    A5.HorizontalAlignment = Element.ALIGN_LEFT;
                    A5.Colspan = 2;
                    A5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(A5);
                }

                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 2;
                S2.FixedHeight = 20f;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S2);

                PdfPCell A6 = new PdfPCell(new Phrase(" CSBG Statement of Need:", TableFont));
                A6.HorizontalAlignment = Element.ALIGN_LEFT;
                A6.Colspan = 2;
                A6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A6);

                PdfPCell A7 = new PdfPCell(new Phrase("Why was client requesting Assistance?", TableFont));
                A7.HorizontalAlignment = Element.ALIGN_LEFT;
                A7.Colspan = 2;
                A7.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A7);

                for (int j = 0; j < 3; j++)
                {
                    PdfPCell A8 = new PdfPCell(new Phrase("________________________________________________________________________", TableFont));
                    A8.HorizontalAlignment = Element.ALIGN_LEFT;
                    A8.Colspan = 2;
                    A8.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Uethdadecl.AddCell(A8);
                }

                PdfPCell S3 = new PdfPCell(new Phrase("", TableFont));
                S3.HorizontalAlignment = Element.ALIGN_LEFT;
                S3.Colspan = 2;
                S3.FixedHeight = 20f;
                S3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S3);

                PdfPCell A9 = new PdfPCell(new Phrase("I certify that all of the information provided by me is true and correct.  I authorize the verification of any and all information provided herein to determine my eligibility and acknowledge I have been informed of the appeal process.  I understand that I will be notified in writing of my eligibility status.  Identifying information provided by you for determination of your eligibility for CSBG and for the provision of services from the program will be considered confidential, unless otherwise authorized or required by law, will not be shared with any other persons or agencies except for the purposes directly related to the administration of the CSBG program.  I attest under penalty of perjury that all persons applying for or receiving aid are either a United States citizen or qualified alien as defined by 8 U.S.C. 1641(b), or eligible immigrants.  I swear under penalty of perjury (a crime for lying under oath) and all other applicable penalties that the statements made on this application, any attachments, and to whoever interviewed me are true and correct.  I understand that anyone who fraudulently covers up a material fact or who knowingly gives false information for the receipt of CSBG assistance is liable upon conviction of a fine of $10,000 or imprisonment for not more than five years or both.", TableFont));
                A9.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                A9.Colspan = 2;
                A9.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A9);

                PdfPCell S4 = new PdfPCell(new Phrase("", TableFont));
                S4.HorizontalAlignment = Element.ALIGN_LEFT;
                S4.Colspan = 2;
                S4.FixedHeight = 20f;
                S4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S4);

                PdfPCell A10 = new PdfPCell(new Phrase("By signing, I agree that the information contained in my application may be shared with other agencies from which I seek additional services.  If I DO NOT want my information shared, Please initial here_______.", TableFont));
                A10.HorizontalAlignment = Element.ALIGN_LEFT;
                A10.Colspan = 2;
                A10.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A10);

                PdfPCell S5 = new PdfPCell(new Phrase("", TableFont));
                S5.HorizontalAlignment = Element.ALIGN_LEFT;
                S5.Colspan = 2;
                S5.FixedHeight = 30f;
                S5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S5);

                PdfPCell A11 = new PdfPCell(new Phrase("Applicant Signature_________________________________                                 Date____________", TableFont));
                A11.HorizontalAlignment = Element.ALIGN_LEFT;
                A11.Colspan = 2;
                A11.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A11);

                PdfPCell S6 = new PdfPCell(new Phrase("", TableFont));
                S6.HorizontalAlignment = Element.ALIGN_LEFT;
                S6.Colspan = 2;
                S6.FixedHeight = 20f;
                S6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S6);

                PdfPCell A12 = new PdfPCell(new Phrase("Case Worker/Intake Worker__________________________                                 Date____________", TableFont));
                A12.HorizontalAlignment = Element.ALIGN_LEFT;
                A12.Colspan = 2;
                A12.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A12);

                PdfPCell S7 = new PdfPCell(new Phrase("", TableFont));
                S7.HorizontalAlignment = Element.ALIGN_LEFT;
                S7.Colspan = 2;
                S7.FixedHeight = 15f;
                S7.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(S7);

                PdfPCell A13 = new PdfPCell(new Phrase("No person on the basis of race, color, national origin, sex, age, disability, ancestry, status as a veteran, or any other characteristics protected by federal, state, or local will be excluded from participation in, or be denied benefits of, or be otherwise subjected to discrimination in the operation of CSBG.", TableFont));
                A13.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                A13.Colspan = 2;
                A13.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Uethdadecl.AddCell(A13);

                document.Add(Uethdadecl);

            }

            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion

        #region PrintLetter
        string Dep_Agncy_Name = string.Empty; string Rep_Order = string.Empty; string ShortName = string.Empty;
        string BenfitAuthDate = string.Empty;
        public void On_PrintLetter()
        {
            ReportDetails = _model.TmsAllData.GetReportDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            if (ReportDetails.Count > 0)
            {
                StringBuilder strMstApplUpdate = new StringBuilder();
                string PdfName = "Pdf File";
                PdfName = BaseForm.BaseApplicationNo + "Report";

                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                    ex.ToString();
                }


                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }


                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                FileStream fs = new FileStream(PdfName, FileMode.Create);
                Document document = new Document(PageSize.LETTER, 25, 25, 30, 30);
                PdfWriter writer = PdfWriter.GetInstance(document, fs);
                document.Open();

                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 9, 3);
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
                cb = writer.DirectContent;

                //string Agency=BaseForm.BaseAgency; string Dept=BaseForm.BaseDept; string Program=BaseForm.BaseProg; string Year=BaseForm.BaseYear; string Appno=BaseForm.BaseApplicationNo;

                //if (!string.IsNullOrEmpty(PValue))
                //{ Agency = PAgency; Dept = PDept; Program = PProgram; Year = PYear; Appno = string.Empty; }

                string Spanish_Code = string.Empty; BenfitAuthDate = string.Empty;

                DataSet dsAwards = DatabaseLayer.FuelControlDB.Browse_FuelCntl(BaseForm.BaseYear);
                DataTable FuelCntl_Aradrs_Table = dsAwards.Tables[0];
                DataView dvAwards = new DataView(FuelCntl_Aradrs_Table);
                dvAwards.RowFilter = "FCNTL_BEN_TYPE='D' AND FCNTL_Award='A'"; FuelCntl_Aradrs_Table = dvAwards.ToTable();
                if (FuelCntl_Aradrs_Table.Rows.Count > 0) BenfitAuthDate = FuelCntl_Aradrs_Table.Rows[0]["FCNTL_SDate"].ToString();

                DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);

                DataTable dtLang = dsLang.Tables[0];
                foreach (DataRow drLang in dtLang.Rows)
                {
                    if (drLang["LookUpDesc"].ToString().Trim() == "SPANISH" || drLang["LookUpDesc"].ToString().Trim() == "Spanish")
                    {
                        Spanish_Code = drLang["Code"].ToString().Trim(); break;
                    }
                }

                ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

                string State = string.Empty; ShortName = string.Empty;
                DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
                if (ds != null && ds.Tables[0].Rows.Count > 0)
                {
                    State = ds.Tables[0].Rows[0]["ACR_STATE"].ToString().Trim();
                    ShortName = AGYShortName;//ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
                }

                try
                {
                    PdfPTable Table = new PdfPTable(4);
                    Table.TotalWidth = 550f;
                    Table.WidthPercentage = 100;
                    Table.LockedWidth = true;
                    float[] Lastwidths = new float[] { 8f, 30f, 8f, 40f };
                    Table.SetWidths(Lastwidths);
                    Table.HorizontalAlignment = Element.ALIGN_CENTER;
                    if (ShortName == "NEON")
                        Table.SpacingBefore = 10f;

                    PdfPTable Table1 = new PdfPTable(4);
                    Table1.TotalWidth = 500f;
                    Table1.WidthPercentage = 100;
                    Table1.LockedWidth = true;
                    float[] Lastwidths1 = new float[] { 8f, 30f, 8f, 40f };
                    Table1.SetWidths(Lastwidths1);
                    Table1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Table1.SpacingBefore = 3f;


                    Dep_Agncy_Name = programEntity.ProgramName.Trim();
                    foreach (TMS81ReportEntity Entity in ReportDetails)
                    {
                        string Address1 = string.Empty; string Address2 = string.Empty; string Address3 = string.Empty; string Address4 = string.Empty; string Fax = string.Empty;
                        if (State == "CT" && (Entity.Site == "0900" || Entity.Site == "0901" || Entity.Site == "0902" || Entity.Site == "0903" || Entity.Site == "0904" || Entity.Site == "0905" || Entity.Site == "0906" || Entity.Site == "0907"))
                        {
                            //Address1 = "74 Cambridge Street"; Address2 = "Meriden, CT 06450"; Address3 = "Phone:(203) 235-0278" + " Fax #: (203) 235-4707 "; Address4 = "Hours: 09:00 AM to 05:00 PM";
                            Address1 = "55 West Main Street 3rd Floor"; Address2 = "Meriden, CT 06451"; Address3 = "Phone:(203) 235-0278" + " Fax #: (203) 235-4707 "; Address4 = "Hours: 09:00 AM to 05:00 PM";
                        }
                        else if (State == "CT" && (Entity.Site == "BRIS" || Entity.Site == "FARM" || Entity.Site == "PLYM"))
                        {
                            Address1 = "55 South Street"; Address2 = "Bristol, CT 06010"; Address3 = "Phone:(860) 584-2725" + " Fax #: (860) 582-5224 ";
                            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                            if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                                Address4 = "Hours: " + LookupDataAccess.GetTime(dsAgency.Tables[0].Rows[0]["ACR_HOURS_FROM"].ToString().Trim()) + " to " + LookupDataAccess.GetTime(dsAgency.Tables[0].Rows[0]["ACR_HOURS_TO"].ToString().Trim());
                            //Address4 = "Hours: 08:30 AM to 04:30 PM";
                        }
                        else
                        {
                            if (programEntity != null)
                            {
                                Address1 = programEntity.Address1.Trim() + " " + programEntity.Address2.Trim();
                                Address2 = programEntity.City.Trim() + ", " + programEntity.State.Trim() + " " + "00000".Substring(0, 5 - programEntity.Zip.Trim().Length) + programEntity.Zip.Trim() + "-" + "0000".Substring(0, 4 - programEntity.ZipPlus.Trim().Length) + programEntity.ZipPlus.Trim();
                                MaskedTextBox mskphn = new MaskedTextBox(); MaskedTextBox mskFax = new MaskedTextBox();
                                mskphn.Mask = "(000) 000-0000"; mskphn.Text = programEntity.Phone.Trim();
                                mskFax.Mask = "(000) 000-0000"; mskFax.Text = programEntity.DepFax.Trim();
                                if (ShortName == "NEON")
                                {
                                    Address3 = "Phone: " + mskphn.Text;
                                    Fax = "Fax #: " + mskFax.Text;
                                }
                                else
                                    Address3 = "Phone: " + mskphn.Text + "    Fax #: " + mskFax.Text;
                                DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
                                if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
                                    Address4 = "Hours: " + LookupDataAccess.GetTime(dsAgency.Tables[0].Rows[0]["ACR_HOURS_FROM"].ToString().Trim()) + " to " + LookupDataAccess.GetTime(dsAgency.Tables[0].Rows[0]["ACR_HOURS_TO"].ToString().Trim());
                            }
                        }

                        PrintAgcncyAddress(Address1, Address2, Address3, Address4, Table, programEntity, ShortName, Fax);

                        string AppDate = string.Empty;
                        if (Entity.MST_LANGUAGE.Trim() == Spanish_Code.Trim())
                            AppDate = "Fecha: " + LookupDataAccess.Getdate(Entity.LPB_DATE.Trim());
                        else
                            AppDate = "Date : " + LookupDataAccess.Getdate(Entity.LPB_DATE.Trim());

                        string HN = string.Empty; string Apt = string.Empty; string Floor = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
                        string AppAddress = string.Empty; string AppAddress1 = string.Empty;
                        CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(Entity.AGENCY.ToString(), Entity.DEPT.ToString(), Entity.PROGRAM.ToString(), Entity.YEAR, Entity.APP_NO, string.Empty);
                        if (caseDiffDetails != null)
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                            {
                                if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                    HN = caseDiffDetails.Hn.Trim() + "  ";
                                Street = caseDiffDetails.Street.Trim() + "  ";
                                if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                    Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                                if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                    Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                                if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                    Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                                AppAddress = HN + Street + Suffix + Apt + Floor;
                                AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(Entity.Hno.Trim()))
                                    HN = Entity.Hno.Trim() + "  ";
                                Street = Entity.Street.Trim() + "  ";
                                if (!string.IsNullOrEmpty(Entity.Suffix.Trim()))
                                    Suffix = Entity.Suffix.Trim() + "  ";
                                if (!string.IsNullOrEmpty(Entity.Apt.Trim()))
                                    Apt = "Apt: " + Entity.Apt.Trim() + "  ";
                                if (!string.IsNullOrEmpty(Entity.Flr.Trim()))
                                    Floor = "Flr: " + Entity.Flr.Trim();
                                string zipplus = string.Empty;
                                if (!string.IsNullOrEmpty(Entity.ZipPlus.Trim()))
                                {
                                    if (int.Parse(Entity.ZipPlus.ToString()) > 0)
                                        zipplus = "-" + "0000".Substring(0, 4 - Entity.ZipPlus.Trim().Length) + Entity.ZipPlus.Trim();
                                }

                                AppAddress = HN + Street + Suffix + Apt + Floor;
                                AppAddress1 = Entity.City.Trim() + "  " + Entity.State.Trim() + "  " + "00000".Substring(0, 5 - Entity.Zip.Trim().Length) + Entity.Zip.Trim() + zipplus;
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(Entity.Hno.Trim()))
                                HN = Entity.Hno.Trim() + "  ";
                            Street = Entity.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(Entity.Suffix.Trim()))
                                Suffix = Entity.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(Entity.Apt.Trim()))
                                Apt = "Apt: " + Entity.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(Entity.Flr.Trim()))
                                Floor = "Flr: " + Entity.Flr.Trim();

                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(Entity.ZipPlus.Trim()))
                            {
                                if (int.Parse(Entity.ZipPlus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - Entity.ZipPlus.Trim().Length) + Entity.ZipPlus.Trim();
                            }
                            AppAddress = HN + Street + Suffix + Apt + Floor;
                            AppAddress1 = Entity.City.Trim() + "  " + Entity.State.Trim() + "  " + "00000".Substring(0, 5 - Entity.Zip.Trim().Length) + Entity.Zip.Trim() + zipplus;
                        }

                        PrintAppAddress(AppDate, AppAddress, AppAddress1, Entity, Table1);

                        if (Entity.LPB_CERTIFIED_STATUS == "98")
                        {
                            if (Entity.LPB_INC == "2" || Entity.LPB_INC == "3")
                            {
                                Rep_Order = "1";
                                Denied(Entity, Spanish_Code, programEntity);
                            }
                            else if (Entity.Heat_Inc_Rent == "2")
                            {
                                if (Entity.LPB_ELIGRENT == "11")
                                {
                                    Rep_Order = "4";
                                    DeniedRentReceiptLtr(Entity, Spanish_Code);
                                }
                                else
                                {
                                    Rep_Order = "3";
                                    DeniedRent(Entity, Spanish_Code, programEntity);
                                }
                            }
                            else if (Entity.LPB_ELIGFUEL == "08")
                            {
                                Rep_Order = "2";
                                DeniedRentReceiptLtr(Entity, Spanish_Code);
                            }
                            else
                            {
                                Rep_Order = "1";
                                Denied(Entity, Spanish_Code, programEntity);
                            }
                        }
                        else
                        {
                            if (Entity.LPB_TYPE == "B1" || Entity.LPB_TYPE == "U1")
                                EligibleLetters(Entity, Spanish_Code, Table);
                            if (Entity.LPB_TYPE == "R1")
                                RentalLetters(Entity, Spanish_Code, Table);
                        }

                        if (Table.Rows.Count > 0)
                        {
                            document.Add(Table);
                            Table.DeleteBodyRows();
                            document.Add(Table1);
                            Table1.DeleteBodyRows();
                            document.NewPage();
                        }
                    }
                    //}
                    //else
                    //{
                    //    document.Add(new Paragraph("This Applicant Having No data in ............................................... "));
                    //}
                }
                catch (Exception ex) { document.Add(new Paragraph("Aborted due to Exception............................................... ")); }


                document.Close();
                fs.Close();
                fs.Dispose();

                //if (Form_Name == "PrintApplicant")
                //{
                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.ShowDialog();
                }
                //}
            }
            else //if (Form_Name == "PrintApplicant")
            {
                MessageBox.Show("Can not print letter as there is no Benefit record for this client", "CAP Systems");
            }


        }

        BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        BaseFont bf_times_Bold = BaseFont.CreateFont("c:/windows/fonts/TIMESBD.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);


        private void PrintAgcncyAddress(string Add1, string Add2, string Add3, string Add4, PdfPTable table, ProgramDefinitionEntity PrgEntity, string Shortname, string Fax)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 12, 1);

            if (Shortname.Trim() == "NEON")
            {
                PdfPTable nestedTable = new PdfPTable(3);
                nestedTable.WidthPercentage = 100;
                //table.LockedWidth = true;
                float[] Nestedwidths = new float[] { 35f, 55f, 35f };
                nestedTable.SetWidths(Nestedwidths);
                nestedTable.HorizontalAlignment = Element.ALIGN_CENTER;

                PdfPCell NR1 = new PdfPCell(new Phrase(PrgEntity.ProgramName.Trim(), TblFontBold));
                NR1.HorizontalAlignment = Element.ALIGN_LEFT;
                //NR1.Width = 35f;
                NR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR1);

                PdfPCell NRR1 = new PdfPCell(new Phrase(PrgEntity.ProgramName.Trim(), TblFontBold));
                NRR1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRR1);

                //PdfPCell NRR2 = new PdfPCell(new Phrase(PrgEntity.ProgramName.Trim(), TblFontBold));
                //NRR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //NRR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //nestedTable.AddCell(NRR2);
                PdfPCell NRR2 = new PdfPCell(new Phrase("", TblFontBold));
                NRR2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRR2);

                PdfPCell NR2 = new PdfPCell(new Phrase("98 South Main St. 2nd Fl", TblFontBold));
                NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR2);

                PdfPCell NRA1 = new PdfPCell(new Phrase(Add1, TblFontBold));
                NRA1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRA1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRA1);

                //PdfPCell NRA2 = new PdfPCell(new Phrase("34 Woodland Ave. Rm 114", TblFontBold));
                //NRA2.HorizontalAlignment = Element.ALIGN_LEFT;
                //NRA2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //nestedTable.AddCell(NRA2);

                PdfPCell NRA2 = new PdfPCell(new Phrase("", TblFontBold));
                NRA2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRA2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRA2);

                PdfPCell NR3 = new PdfPCell(new Phrase("Norwalk, CT 06854", TblFontBold));
                NR3.HorizontalAlignment = Element.ALIGN_LEFT;
                NR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR3);

                PdfPCell NRB1 = new PdfPCell(new Phrase(Add2, TblFontBold));
                NRB1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRB1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRB1);

                //PdfPCell NRB2 = new PdfPCell(new Phrase("Stamford, CT 06902", TblFontBold));
                //NRB2.HorizontalAlignment = Element.ALIGN_LEFT;
                //NRB2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //nestedTable.AddCell(NRB2);
                PdfPCell NRB2 = new PdfPCell(new Phrase("", TblFontBold));
                NRB2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRB2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRB2);

                PdfPCell NR4 = new PdfPCell(new Phrase("Phone: (203)838-8110", TblFontBold));
                NR4.HorizontalAlignment = Element.ALIGN_LEFT;
                NR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR4);

                PdfPCell NRC1 = new PdfPCell(new Phrase(Add3, TblFontBold));
                NRC1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRC1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRC1);

                //PdfPCell NRC2 = new PdfPCell(new Phrase("Phone: (203)357-0720", TblFontBold));
                //NRC2.HorizontalAlignment = Element.ALIGN_LEFT;
                //NRC2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //nestedTable.AddCell(NRC2);
                PdfPCell NRC2 = new PdfPCell(new Phrase("", TblFontBold));
                NRC2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRC2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRC2);

                PdfPCell NR8 = new PdfPCell(new Phrase("Fax: (203)838-8198", TblFontBold));
                NR8.HorizontalAlignment = Element.ALIGN_LEFT;
                NR8.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR8);

                PdfPCell NRC3 = new PdfPCell(new Phrase(Fax, TblFontBold));
                NRC3.HorizontalAlignment = Element.ALIGN_CENTER;
                NRC3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRC3);

                //PdfPCell NRC4 = new PdfPCell(new Phrase("Fax: (203)363-9882", TblFontBold));
                //NRC4.HorizontalAlignment = Element.ALIGN_LEFT;
                //NRC4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //nestedTable.AddCell(NRC4);
                PdfPCell NRC4 = new PdfPCell(new Phrase("", TblFontBold));
                NRC4.HorizontalAlignment = Element.ALIGN_LEFT;
                NRC4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRC4);

                PdfPCell NR5 = new PdfPCell(new Phrase("", TblFontBold));
                NR5.HorizontalAlignment = Element.ALIGN_LEFT;
                NR5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR5);

                PdfPCell NRD1 = new PdfPCell(new Phrase(Add4, TblFontBold));
                NRD1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRD1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRD1);

                PdfPCell NRD2 = new PdfPCell(new Phrase("", TblFontBold));
                NRD2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRD2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRD2);

                PdfPCell NR6 = new PdfPCell(new Phrase("", TblFontBold));
                NR6.HorizontalAlignment = Element.ALIGN_LEFT;
                NR6.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NR6);

                PdfPCell NRE1 = new PdfPCell(new Phrase("www.abcd.org", TblFontBold));
                NRE1.HorizontalAlignment = Element.ALIGN_CENTER;
                NRE1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRE1);

                PdfPCell NRE2 = new PdfPCell(new Phrase("", TblFontBold));
                NRE2.HorizontalAlignment = Element.ALIGN_LEFT;
                NRE2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                nestedTable.AddCell(NRE2);

                PdfPCell NestedLoop = new PdfPCell(nestedTable);
                NestedLoop.Colspan = 4;
                NestedLoop.Padding = 0f;
                NestedLoop.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                table.AddCell(NestedLoop);
            }
            else
            {
                PdfPCell Agncy = new PdfPCell(new Phrase(PrgEntity.ProgramName.Trim(), TblFontBold));
                Agncy.HorizontalAlignment = Element.ALIGN_CENTER;
                Agncy.Colspan = 4;
                Agncy.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Agncy);

                PdfPCell A1 = new PdfPCell(new Phrase(Add1, TblFontBold));
                A1.HorizontalAlignment = Element.ALIGN_CENTER;
                A1.Colspan = 4;
                A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(A1);

                PdfPCell A2 = new PdfPCell(new Phrase(Add2, TblFontBold));
                A2.HorizontalAlignment = Element.ALIGN_CENTER;
                A2.Colspan = 4;
                A2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(A2);

                PdfPCell A3 = new PdfPCell(new Phrase(Add3, TblFontBold));
                A3.HorizontalAlignment = Element.ALIGN_CENTER;
                A3.Colspan = 4;
                A3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(A3);

                PdfPCell A4 = new PdfPCell(new Phrase(Add4, TblFontBold));
                A4.HorizontalAlignment = Element.ALIGN_CENTER;
                A4.Colspan = 4;
                A4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(A4);
            }
            PdfPCell space = new PdfPCell(new Phrase("", TblFontBold));
            space.HorizontalAlignment = Element.ALIGN_CENTER;
            space.Colspan = 4;
            space.FixedHeight = 15f;
            space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(space);
        }

        private void PrintAppAddress(string LPB_DATE, string Addr1, string addr2, TMS81ReportEntity Entity, PdfPTable table)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 10, 1);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 10);

            PdfPCell Date = new PdfPCell(new Phrase(LPB_DATE, TableFont));
            Date.HorizontalAlignment = Element.ALIGN_LEFT;
            Date.Colspan = 4;
            Date.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Date);

            PrintSpaceCell(table, 4, TableFont, 0);

            PdfPCell R1 = new PdfPCell(new Phrase("     " + LookupDataAccess.GetMemberName(Entity.FName.Trim(), Entity.MName.Trim(), Entity.LName.Trim(), strNameFormat), TblFontBold)); //  Entity.FName.Trim()+ " "+Entity.LName.Trim(), TblFontBold));
            R1.HorizontalAlignment = Element.ALIGN_LEFT;
            R1.Colspan = 4;
            R1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(R1);

            PdfPCell R2 = new PdfPCell(new Phrase("     " + Addr1, TableFont));
            R2.HorizontalAlignment = Element.ALIGN_LEFT;
            R2.Colspan = 4;
            R2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(R2);

            PdfPCell R3 = new PdfPCell(new Phrase("     " + addr2, TableFont));
            R3.HorizontalAlignment = Element.ALIGN_LEFT;
            R3.Colspan = 4;
            R3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(R3);
        }

        int UTILITY_ELIGIBLE_SFA = 0; int UTILITY_ELIGIBLE_FFA = 0; int UTILITY_ELIGIBLE_WEATHER = 0;
        private void EligibleLetters(TMS81ReportEntity Entity, string LangCode, PdfPTable table)
        {
            UTILITY_ELIGIBLE_SFA = 0; UTILITY_ELIGIBLE_FFA = 0; UTILITY_ELIGIBLE_WEATHER = 0;
            float LTR_C4_2_AMOUNT = float.Parse(Entity.LPB_AMOUNT.Trim()) - float.Parse(Entity.LPB_REDUCE_ELIG.Trim());
            UTILITY_UTILACCT = string.Empty;
            if (Entity.LPB_TYPE == "U1")
            {
                if (Entity.MST_LANGUAGE.Trim() == LangCode)
                    UTILITY_UTILACCT = "Num. De Cuenta de Utilidad# " + Entity.LPV_AccNo.Trim();
                else
                    UTILITY_UTILACCT = "Utility Account # " + Entity.LPV_AccNo.Trim();
            }

            if (Entity.LPB_BENEFIT_LEVEL == "4")
                UTILITY_ELIGIBLE_SFA = 1;
            else UTILITY_ELIGIBLE_FFA = 1;

            if (Entity.LPB_ELIGWTHR.Contains("Y") || int.Parse(Entity.MST_POVERTY.Trim()) < 201)
                UTILITY_ELIGIBLE_WEATHER = 1;

            if (Entity.MST_LANGUAGE.Trim() == LangCode)
                EligLetter_Spanish(Entity, LTR_C4_2_AMOUNT);
            else
                EligibleLetter(Entity, LTR_C4_2_AMOUNT, table);
        }

        private void RentalLetters(TMS81ReportEntity Entity, string LangCode, PdfPTable table)
        {
            UTILITY_ELIGIBLE_SFA = 0; UTILITY_ELIGIBLE_FFA = 0; UTILITY_ELIGIBLE_WEATHER = 0;
            float LTR_C4_2_AMOUNT = float.Parse(Entity.LPB_AMOUNT.Trim()) - float.Parse(Entity.LPB_REDUCE_ELIG.Trim());
            if (Entity.LPB_ELIGRENT.Contains("Y"))
                UTILITY_ELIGIBLE_SFA = 1;

            if (Entity.LPB_ELIGWTHR.Contains("Y") || int.Parse(Entity.MST_POVERTY.Trim()) < 201)
                UTILITY_ELIGIBLE_WEATHER = 1;

            if (Entity.MST_LANGUAGE.Trim() == LangCode)
                RentalLetter_Spanish(Entity, LTR_C4_2_AMOUNT);
            else
                RentalLetter(Entity, LTR_C4_2_AMOUNT);
        }

        //private void ULetters(TMS81ReportEntity Entity, string LangCode, PdfPTable table)
        //{
        //    float LTR_C4_2_AMOUNT = float.Parse(Entity.LPB_AMOUNT.Trim()) - float.Parse(Entity.LPB_REDUCE_ELIG.Trim());
        //    if (Entity.LPB_ELIGRENT.Contains("Y"))
        //        UTILITY_ELIGIBLE_SFA = 1;

        //    if (Entity.LPB_ELIGWTHR.Contains("Y") || int.Parse(Entity.MST_POVERTY.Trim()) < 201)
        //        UTILITY_ELIGIBLE_WEATHER = 1;

        //    if (Entity.MST_LANGUAGE.Trim() == LangCode)
        //        RentalLetter_Spanish(Entity, LTR_C4_2_AMOUNT);
        //    else
        //        RentalLetter(Entity, LTR_C4_2_AMOUNT);
        //}

        string ELIGIBLE_EASSISTANCE = string.Empty; string UTILITY_ELIGIBLE_DEARSIR = string.Empty;
        string UTILITY_ELIGIBLE_YOUR = string.Empty; string UTILITY_ELIGIBLE_APPROVED = string.Empty;
        string UTILITY_ELIGIBLE_FORTHE = string.Empty; string UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
        string UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; string UTILITY_ELIGIBLE_DONT = string.Empty;
        string UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; string UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
        string UTILITY_ELIGIBLE_THEREARE = string.Empty; string UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
        string UTILITY_UTILACCT = string.Empty; string UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
        string UTILITY_ELIGIBLE_PERSONS = string.Empty; string UTILITY_ELIGIBLE_IFYOU = string.Empty;
        string UTILITY_ELIGIBLE_SINCERELY = string.Empty; string UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;
        string UTILITY_ELECTRICITY = string.Empty;

        private void EligibleLetter(TMS81ReportEntity Entity, float LTR_C4_2_AMOUNT, PdfPTable table)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;
            UTILITY_ELECTRICITY = string.Empty;

            ELIGIBLE_EASSISTANCE = "Energy Assistance Case # " + Entity.APP_NO.Trim();
            UTILITY_ELIGIBLE_DEARSIR = "Dear Sir or Madam: ";
            UTILITY_ELIGIBLE_YOUR = "Your household has been ";
            UTILITY_ELIGIBLE_APPROVED = "approved ";
            UTILITY_ELIGIBLE_FORTHE = "for the following Energy Assistance Programs:";
            UTILITY_ELIGIBLE_YOURBASIC = "YOUR BASIC BENEFIT FOR THIS PROGRAM YEAR IS: $" + LTR_C4_2_AMOUNT.ToString("0.00");

            UTILITY_ELIGIBLE_WEATHER_TEXT = "- The Weatherization Assistance Program can help to make your home more energy efficient, ";
            UTILITY_ELIGIBLE_WEATHER_TEXTA = "and to lower your energy costs.  If you are interested, please contact us at the telephone number above for additional information.";

            if (Entity.LPB_TYPE == "B1")
            {
                UTILITY_ELIGIBLE_DONT = "DON'T WAIT";
                UTILITY_ELIGIBLE_IFYOUAREON = "If you are on automatic delivery, let your vendor know that you have been approved for energy assistance.";
                UTILITY_ELIGIBLE_IFYOUUSE = "If you use all of your Basic Benefit, you may be eligible to receive Crisis and Safety Net Assistance.  Call our Energy office for more information about these benefits.";
            }
            else if (Entity.LPB_TYPE == "U1")
            {
                UTILITY_ELIGIBLE_DONT = "Contact your utility company to let them know that you have been approved for energy assistance.";
                UTILITY_ELIGIBLE_IFYOUAREON = "Your Basic Benefit payment will be sent to your utility company.  Look for it on your utility bill.  It should appear as a credit to your account.";
                UTILITY_ELIGIBLE_IFYOUUSE = "If you have a past due balance with your utility company, ask them about their Matching Payment Program.  The Matching Payment Program can help you to eliminate your past due utility charges.";
            }
            UTILITY_ELIGIBLE_THEREARE = "These are not entitlement programs.  The State has the right to close the programs early if funding is not available.";
            UTILITY_ELECTRICITY = "You may qualify for Winter Protection for your electric account from November 1 – May 1.  Please contact your electric company.";
            UTILITY_ELIGIBLE_YOUHAVE = "You have the right to a Desk Review concerning the decision made on this application. Requests must be made in writing, and sent to our Energy Office within 60 days of the discovery of the occurrence, or by September 30th, whichever comes first. ";
            UTILITY_ELIGIBLE_PERSONS = "Persons who misrepresent their household circumstances, income or liquid assets, are required to repay any assistance that was provided. In addition, the household will be suspended from participation in the Energy Assistance Programs for the remainder of the current program year, and for the following 2 program years.";
            UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
            UTILITY_ELIGIBLE_SINCERELY = "Sincerely,";
            UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            PrintEligLetterPDF(Entity, "English");


        }

        private void EligLetter_Spanish(TMS81ReportEntity Entity, float LTR_C4_2_AMOUNT)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;
            UTILITY_ELECTRICITY = string.Empty;


            ELIGIBLE_EASSISTANCE = "Numero de Caso-Asistencia de Combustible# " + Entity.APP_NO.Trim();
            UTILITY_ELIGIBLE_DEARSIR = "Estimado(a) Señor o Señora/Srta.:";
            //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
            UTILITY_ELIGIBLE_APPROVED = "Su hogar ha sido aprobado para los siguientes Programas de Asistencia con Combustible: ";
            //UTILITY_ELIGIBLE_FORTHE = "for the following Energy Assistance Programs:";
            UTILITY_ELIGIBLE_YOURBASIC = " SU BENEFICIO BASICO PARA EL PROGRAMA DE ESTE AÑO ES  :  $" + LTR_C4_2_AMOUNT.ToString("0.00");

            UTILITY_ELIGIBLE_WEATHER_TEXT = "- El Programa de Aclimatación puede ayudarle a que su hogar sea más eficiente ";
            UTILITY_ELIGIBLE_WEATHER_TEXTA = " con el uso de combustible, y le ayude a rebajar el costo de calefacción. Si usted está interesado , por favor communiquese con nosotros al número de teléfono arriba para obtener información adicional.";//Si esta interesado(a), favor de llenar y enviar a vuelta de correo la Tarjeta de Aclimatación adjunta lo mas pronto posible.";
            if (Entity.LPB_TYPE == "B1")
            {
                //UTILITY_ELIGIBLE_DONT = "DON'T WAIT";
                UTILITY_ELIGIBLE_IFYOUAREON = "Comuníquese con su vendedor de Aceite u otro Combustible de entrega a Domicilio e infórmele de su aprobación para el programa.";
                UTILITY_ELIGIBLE_IFYOUUSE = "Si usted agoto su Beneficio Básico, puede ser elegible para recibir beneficios adicionales.  Comuníquese con nuestra oficina para mas información acerca de estos Beneficios. ";
            }
            else if (Entity.LPB_TYPE == "U1")
            {
                //aprobación "  Póngase en contacto con la empresa de servicio público e infórmele que ha sido aprobado(a) para la ayuda con su combustible.";
                UTILITY_ELIGIBLE_DONT = "  Póngase en contacto con la empresa de servicio público e infórmele de su aprobación para el programa."; //que
                UTILITY_ELIGIBLE_IFYOUAREON = "Pago de Beneficio Básico será remitido directamente a la empresa de servicio público.  Este aparecerá acreditado en su factura.";
                UTILITY_ELIGIBLE_IFYOUUSE = "Si tiene una factura atrasada con la empresa de servicio público, pregunte acerca del programa de  pareos o igualdad de pagos.  El Programa de pareo o igualdad de pagos le ayuda a eliminar saldo   por servicios atrasados.";
            }
            UTILITY_ELIGIBLE_THEREARE = "Estos no son programas de privilegio.  El Estado tiene el derecho de suspender todos los programas temprano si los fondos no están disponibles.";
            UTILITY_ELECTRICITY = "USTED PODRIA CALIFICAR PARA PROTECCION INVERNAL CON SU CUENTA DE ELECTRICIDAD DESDE NOVIEMBRE 1 - MAYO 1.  POR FAVOR COMUNIQUESE CON SU COMPAÑÍA DE ELECTRICIDAD.";
            UTILITY_ELIGIBLE_YOUHAVE = "Usted tiene el derecho a una Revisión con relación a la decisión tomada en esta solicitud. Peticiones deben ser por escrito, y enviadas a nuestra oficina dentro de sesenta (60) días pasados a la decisión tomada o el 30 de Septiembre, lo que ocurra primero.";
            UTILITY_ELIGIBLE_PERSONS = "Personas que alteren sus circunstancias, ingresos o activos líquidos se les requerirá pagar por completo cualquier asistencia que haya sido provista. Al mismo tiempo, la participación en el programa de la unidad familiar será suspendida por el restante del programa actual, y por los próximos dos (2) años del programa.";
            UTILITY_ELIGIBLE_IFYOU = "Si tiene preguntas relacionadas con esta carta, favor de comunicarse con nuestra Oficina de Energía.";
            UTILITY_ELIGIBLE_SINCERELY = "Sinceramente,";
            UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";

            PrintEligLetterPDF(Entity, "Spanish");

        }

        private void RentalLetter(TMS81ReportEntity Entity, float LTR_C4_2_AMOUNT)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty; UTILITY_UTILACCT = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;

            ELIGIBLE_EASSISTANCE = "Energy Assistance Case # " + Entity.APP_NO.Trim();
            UTILITY_ELIGIBLE_DEARSIR = "Dear Sir or Madam: ";
            UTILITY_ELIGIBLE_YOUR = "Your household has been ";
            UTILITY_ELIGIBLE_APPROVED = "approved ";
            UTILITY_ELIGIBLE_FORTHE = "for the following Rental Assistance Programs:";
            UTILITY_ELIGIBLE_YOURBASIC = "YOUR BASIC BENEFIT FOR THIS PROGRAM YEAR IS: $" + LTR_C4_2_AMOUNT.ToString("0.00");

            UTILITY_ELIGIBLE_WEATHER_TEXT = "- The Weatherization Assistance Program can help to make your home more energy efficient, ";
            UTILITY_ELIGIBLE_WEATHER_TEXTA = "and to lower your energy costs.  If you are interested, please contact us at the telephone number above for additional information.";
            //UTILITY_ELIGIBLE_DONT = "DON'T WAIT";
            //UTILITY_ELIGIBLE_IFYOUAREON = "If you are on automatic delivery, let your vendor know that you have been approved for energy assistance.";
            //UTILITY_ELIGIBLE_IFYOUUSE = "If you use all of your Basic Benefit, you may be eligible to receive Crisis and Safety Net Assistance.  Call our Energy office for more information about these benefits.";
            UTILITY_ELIGIBLE_THEREARE = "These are not entitlement programs.  The State has the right to close the programs early if funding is not available.";
            UTILITY_ELIGIBLE_YOUHAVE = "You have the right to a Desk Review concerning the decision made on this application. Requests must be made in writing, and sent to our Energy Office within 60 days of the discovery of the occurrence, or by September 30th, whichever comes first. ";
            UTILITY_ELIGIBLE_PERSONS = "Persons who misrepresent their household circumstances, income or liquid assets, are required to repay any assistance that was provided. In addition, the household will be suspended from participation in the Energy Assistance Programs for the remainder of the current program year, and for the following 2 program years.";
            UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
            UTILITY_ELIGIBLE_SINCERELY = "Sincerely,";
            UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            PrintEligLetterPDF(Entity, "English");


        }

        private void RentalLetter_Spanish(TMS81ReportEntity Entity, float LTR_C4_2_AMOUNT)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty; UTILITY_UTILACCT = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;


            ELIGIBLE_EASSISTANCE = "Numero de Caso-Asistencia de Combustible# " + Entity.APP_NO.Trim();
            UTILITY_ELIGIBLE_DEARSIR = "Estimado(a) Señor o Señora/Srta.:";
            //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
            UTILITY_ELIGIBLE_APPROVED = "Su hogar ha sido aprobado para los siguientes Programas de Asistencia con Combustible: ";
            //UTILITY_ELIGIBLE_FORTHE = "for the following Energy Assistance Programs:";
            UTILITY_ELIGIBLE_YOURBASIC = " SU BENEFICIO BASICO PARA EL PROGRAMA DE ESTE AÑO ES  :  $" + LTR_C4_2_AMOUNT.ToString("0.00");

            UTILITY_ELIGIBLE_WEATHER_TEXT = "- El Programa de Aclimatación puede ayudarle a que su hogar sea más eficiente ";
            UTILITY_ELIGIBLE_WEATHER_TEXTA = " con el uso de combustible, y le ayude a rebajar el costo de calefacción.  Si usted está interesado , por favor communiquese con nosotros al número de teléfono arriba para obtener información adicional.";
            //UTILITY_ELIGIBLE_DONT = "DON'T WAIT";
            //UTILITY_ELIGIBLE_IFYOUAREON = "Comuníquese con su vendedor de Aceite u otro Combustible de entrega a Domicilio e infórmele de su aprobación para el programa.";
            //UTILITY_ELIGIBLE_IFYOUUSE = "Si usted agoto su Beneficio Básico, puede ser elegible para recibir beneficios adicionales.  Comuníquese con nuestra oficina para mas información acerca de estos Beneficios. ";
            UTILITY_ELIGIBLE_THEREARE = "Estos no son programas de privilegio.  El Estado tiene el derecho de suspender todos los programas temprano si los fondos no están disponibles.";
            UTILITY_ELIGIBLE_YOUHAVE = "Usted tiene el derecho a una Revisión con relación a la decisión tomada en esta solicitud. Peticiones deben ser por escrito, y enviadas a nuestra oficina dentro de sesenta (60) días pasados a la decisión tomada o el 30 de Septiembre, lo que ocurra primero.";
            UTILITY_ELIGIBLE_PERSONS = "Personas que alteren sus circunstancias, ingresos o activos líquidos se les requerirá pagar por completo cualquier asistencia que haya sido provista. Al mismo tiempo, la participación en el programa de la unidad familiar será suspendida por el restante del programa actual, y por los próximos dos (2) años del programa.";
            UTILITY_ELIGIBLE_IFYOU = "Si tiene preguntas relacionadas con esta carta, favor de comunicarse con nuestra Oficina de Energía.";
            UTILITY_ELIGIBLE_SINCERELY = "Sinceramente,";
            UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";

            PrintEligLetterPDF(Entity, "Spanish");

        }

        private void PrintEligLetterPDF(TMS81ReportEntity Entity, string Lanuage)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 10, 1);
            iTextSharp.text.Font TblFontBoldLetter = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 10, 1);
            BaseFont bf_helv = TblFontBold.GetCalculatedBaseFont(false);

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            cb.SetFontAndSize(bf_times, 10);
            cb.BeginText();
            X_Pos = 60;
            if (ShortName == "NEON") Y_Pos = 555; else Y_Pos = 570;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ELIGIBLE_EASSISTANCE, TableFont), X_Pos, Y_Pos, 0);

            if (Entity.LPB_TYPE == "U1")
            {
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_UTILACCT, TableFont), X_Pos, Y_Pos, 0);
            }

            Y_Pos = Y_Pos - 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEARSIR, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos = Y_Pos - 20; X_Pos = 60;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUR + UTILITY_ELIGIBLE_APPROVED + UTILITY_ELIGIBLE_FORTHE, TableFont), X_Pos, Y_Pos, 0);
            //cb.ShowTextAligned(0, UTILITY_ELIGIBLE_YOUR + UTILITY_ELIGIBLE_APPROVED + UTILITY_ELIGIBLE_FORTHE, X_Pos, Y_Pos, 0);

            Y_Pos = Y_Pos - 10;

            //if (Entity.LPB_TYPE.Trim() == "B1" || Entity.LPB_TYPE == "U1")
            //{
            //    if (UTILITY_ELIGIBLE_SFA == 1)
            //    {
            //        PrintCheckBox(X_Pos, Y_Pos, "Y");
            //        //_image_Checked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
            //        //cb.AddImage(_image_Checked);

            //    }
            //    else
            //    {
            //        PrintCheckBox(X_Pos, Y_Pos, "N");
            //        //_image_UnChecked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
            //        //cb.AddImage(_image_UnChecked);
            //    }

            //    if(Lanuage=="English")
            //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("State Fuel Assistance" , TblFontBold), X_Pos + 12, Y_Pos - 15, 0);
            //    else ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Estatal", TblFontBold), X_Pos + 12, Y_Pos - 15, 0);

            //    if (UTILITY_ELIGIBLE_FFA == 1)
            //    {
            //        PrintCheckBox(X_Pos+200, Y_Pos, "Y");
            //        //_image_Checked.SetAbsolutePosition(X_Pos+200, Y_Pos - 17);
            //        //cb.AddImage(_image_Checked);
            //    }
            //    else
            //    {
            //        PrintCheckBox(X_Pos+200, Y_Pos, "N");
            //        _image_UnChecked.SetAbsolutePosition(X_Pos + 200, Y_Pos - 17);
            //        cb.AddImage(_image_UnChecked);
            //    }
            //    Y_Pos -= 15;
            //    if (Lanuage == "English")
            //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Federal Fuel Assistance", TblFontBold), X_Pos + 212, Y_Pos, 0);
            //    else ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Federal", TblFontBold), X_Pos + 212, Y_Pos, 0);

            //}
            if (Entity.LPB_TYPE == "R1")
            {
                if (UTILITY_ELIGIBLE_SFA == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");

                Y_Pos -= 15;
                if (Lanuage == "English")
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Rental Assistance", TblFontBold), X_Pos + 12, Y_Pos, 0);
                else ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Asistencia de Alquiler", TblFontBold), X_Pos + 12, Y_Pos, 0);

            }


            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOURBASIC, TblFontBold), X_Pos, Y_Pos, 0);

            if (UTILITY_ELIGIBLE_WEATHER == 1)
                PrintCheckBox(X_Pos, Y_Pos - 5, "Y");
            else
                PrintCheckBox(X_Pos, Y_Pos - 5, "N");
            Y_Pos -= 20;
            if (Lanuage == "English")
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Weatherization", TblFontBold), X_Pos + 12, Y_Pos, 0);
            else ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Aclimatación", TblFontBold), X_Pos + 12, Y_Pos, 0);

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXT, TblFontBold), X_Pos + 90, Y_Pos, 0);
            if (Entity.LPB_TYPE == "B1" || Entity.LPB_TYPE == "U1")
            {

                Y_Pos -= 15;
                if (Lanuage == "English")
                {
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA, TblFontBold), X_Pos, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(104, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
                else
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(104, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
            }
            else if (Entity.LPB_TYPE == "R1")
            {
                //if (UTILITY_ELIGIBLE_WEATHER == 1)
                //    PrintCheckBox(X_Pos, Y_Pos, "Y");
                //else
                //    PrintCheckBox(X_Pos, Y_Pos, "N");
                //Y_Pos -= 15;
                //if (Lanuage == "English")
                //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Weatherization", TblFontBold), X_Pos + 12, Y_Pos, 0);
                //else ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Aclimatación", TblFontBold), X_Pos + 12, Y_Pos, 0);

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXT, TableFont), X_Pos + 90, Y_Pos, 0);

                Y_Pos -= 15;
                if (Lanuage == "English")
                {
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA, TblFontBold), X_Pos, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(104, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 104).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
                else
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 106).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(106, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 106).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
            }


            cb.EndText();

            Y_Pos -= 8;
            cb.SetLineWidth(0.7f);
            cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
            cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
            cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
            cb.Stroke();

            Y_Pos -= 10;
            cb.BeginText();
            if (Entity.LPB_TYPE == "B1")
            {
                if (Lanuage == "English")
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("WHAT DO I DO NOW?", TblFontBold), 300, Y_Pos, 0);
                else
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("¿QUE PROCEDO A HACER AHORA?", TblFontBold), 300, Y_Pos, 0);


                X_Pos = 60;
                if (Lanuage == "English")
                {
                    //_image_Checked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
                    //cb.AddImage(_image_Checked);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Call our Energy Office when you need a fuel delivery.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("DON'T WAIT UNTIL YOU ARE OUT.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON, TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(0, 102).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(102, (UTILITY_ELIGIBLE_IFYOUUSE.Length) - 102).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);

                    cb.EndText();
                    Y_Pos -= 8;
                    cb.SetLineWidth(0.7f);
                    cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                    cb.Stroke();
                    cb.BeginText();
                    Y_Pos -= 10;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("OTHER IMPORTANT INFORMATION", TblFontBold), 300, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;

                    string BAdate = HumanisedDate(BenfitAuthDate);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BAdate + " is the first day to call our Energy Office for fuel.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("November 2nd, 2020 is the first day to receive a fuel delivery.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("May 20th, 2021 is the last day to call our Energy Office for fuel.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("May 31st, 2021 is the last day to submit fuel bills for payment.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                    Y_Pos -= 8;
                    cb.SetLineWidth(0.7f);
                    cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                    cb.Stroke();
                }
                else
                {
                    //_image_Checked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
                    //cb.AddImage(_image_Checked);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Comuníquese con nuestra oficina cuando este necesitado de combustible.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("NO ESPERE A QUE EL TANQUE DE ACEITE SE VACIE.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(0, 98).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(98, (UTILITY_ELIGIBLE_IFYOUAREON.Length) - 98).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(0, 104).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(104, (UTILITY_ELIGIBLE_IFYOUUSE.Length) - 104).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);

                    cb.EndText();
                    Y_Pos -= 8;
                    cb.SetLineWidth(0.7f);
                    cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                    cb.Stroke();
                    cb.BeginText();
                    Y_Pos -= 10;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("OTRA INFORMACION IMPORTANTE", TblFontBold), 300, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    //var Format="MMMM dd";
                    CultureInfo currentCulture = new CultureInfo("es-ES", true);
                    string BAdate = Convert.ToDateTime(BenfitAuthDate.Trim()).ToShortDateString();
                    DateTime dateToCheck;
                    dateToCheck = DateTime.Parse(BAdate);
                    //var BAdate = DateTime.ParseExact(Convert.ToDateTime(BenfitAuthDate.Trim()).ToShortDateString(), Format, CultureInfo.InvariantCulture);
                    //System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("es-ES");
                    //var Result = BAdate.ToString("MMMM", CultureInfo.GetCultureInfo("es-ES"));
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dateToCheck.Date.ToString("dd", new CultureInfo("es-ES")) + " de " + dateToCheck.Date.ToString("MMMM", new CultureInfo("es-ES")) + " es el primer DIA para solicitar una entrega de Combustible.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("2 de Noviembre de 2020 es el primer día para recibir un suministro de combustible.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("20 de Mayo de 2021 es el último día para solicitar una entrega de Combustible.", TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("31 de Mayo de 2021 es el último día para someter facturas para pagos.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                    Y_Pos -= 8;
                    cb.SetLineWidth(0.7f);
                    cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                    cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                    cb.Stroke();
                }

                //PdfPCell cell1 = new PdfPCell(new Phrase(UTILITY_ELIGIBLE_YOUHAVE, TableFont));

            }
            else if (Entity.LPB_TYPE == "R1")
            {
                Y_Pos -= 15;
                if (Lanuage == "English")
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("A check in the amount of your Rental Assistance Award will be mailed to your household.", TblFontBold), X_Pos, Y_Pos, 0);
                else
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Un cheque por la cantidad de su Beneficio Asistencia de Alquiler será enviado por correo a su hogar.", TblFontBold), X_Pos, Y_Pos, 0);
            }
            else if (Entity.LPB_TYPE == "U1")
            {
                if (Lanuage == "English")
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("WHAT DO I DO NOW?", TblFontBold), 300, Y_Pos, 0);
                else
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("¿QUE PROCEDO A HACER AHORA?", TblFontBold), 300, Y_Pos, 0);

                X_Pos = 60;
                PrintCheckBox(X_Pos, Y_Pos, "Y");
                Y_Pos -= 15;
                if (Lanuage == "English")
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT, TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(0, 100).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(100, (UTILITY_ELIGIBLE_IFYOUAREON.Length) - 100), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(0, 104).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(104, (UTILITY_ELIGIBLE_IFYOUUSE.Length) - 104).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);

                }
                else
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 94).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(94, (UTILITY_ELIGIBLE_DONT.Length) - 94), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(0, 98).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(98, 98).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE.Substring(196, (UTILITY_ELIGIBLE_IFYOUUSE.Length) - 196).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(0, 101).ToString(), TblFontBold), X_Pos + 12, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(101, (UTILITY_ELIGIBLE_IFYOUAREON.Length) - 101), TblFontBold), X_Pos + 12, Y_Pos, 0);


                }

                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();
                Y_Pos -= 10;

            }

            Y_Pos -= 20;
            if (Lanuage == "English")
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE, TableFont), X_Pos, Y_Pos, 0);
                if (Entity.LPB_TYPE == "B1")
                {
                    Y_Pos -= 20;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELECTRICITY.Substring(0, 110), TblFontBoldLetter), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELECTRICITY.Substring(110, (UTILITY_ELECTRICITY.Length) - 110).ToString(), TblFontBoldLetter), X_Pos, Y_Pos, 0);
                }
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(120, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 123).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(123, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(243, (UTILITY_ELIGIBLE_PERSONS.Length) - 243).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            else
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(124, (UTILITY_ELIGIBLE_THEREARE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                if (Entity.LPB_TYPE == "B1")
                {
                    Y_Pos -= 20;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELECTRICITY.Substring(0, 84).ToString(), TblFontBoldLetter), X_Pos, Y_Pos, 0);
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELECTRICITY.Substring(84, (UTILITY_ELECTRICITY.Length) - 84).ToString(), TblFontBoldLetter), X_Pos, Y_Pos, 0);
                }
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(124, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 125).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(125, 119).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(244, (UTILITY_ELIGIBLE_PERSONS.Length) - 244).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOU, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_SINCERELY, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEPARTMENT, TableFont), X_Pos, Y_Pos, 0);

            cb.EndText();
        }

        private void PrintCheckBox(int X_Pos, int Y_Pos, string Check)
        {
            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            if (Check == "Y")
            {
                _image_Checked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
                cb.AddImage(_image_Checked);
            }
            else
            {
                _image_UnChecked.SetAbsolutePosition(X_Pos, Y_Pos - 17);
                cb.AddImage(_image_UnChecked);
            }
        }


        private void PrintRec(string Record, int X_Pos, int Y_Pos)
        {

        }

        int INELIGIBLE_SSN_MISSING = 0; int INELIGIBLE_ASSIST = 0; int INELIGIBLE_WEATHER = 0; int INELIGIBLE_OTHER = 0;
        private void Denied(TMS81ReportEntity Entity, string LangCode, ProgramDefinitionEntity PrgEntity)
        {
            INELIGIBLE_SSN_MISSING = 0; INELIGIBLE_ASSIST = 0; INELIGIBLE_WEATHER = 0;

            int n;
            bool isNumeric = int.TryParse(Entity.LPB_ELIGASSETS.Trim(), out n);
            if (Entity.LPB_INC == "2" || Entity.LPB_INC == "3")
            {
                if (Entity.LPB_INC == "3" && (Entity.LPB_SSN_SW == "U" || Entity.LPB_SSN_SW == "P") && PrgEntity.SSNReasonFlag == "Y")
                    INELIGIBLE_SSN_MISSING = 1;
                else INELIGIBLE_OTHER = 1;
            }
            else if (Entity.LPB_ELIGINCOME.Contains("Y"))
            {
                if (isNumeric)
                {
                    INELIGIBLE_WEATHER = 1;
                }
            }
            else if (Entity.LPB_ELIGINCOME.Contains("02"))
            {
                if (isNumeric)
                {
                    INELIGIBLE_WEATHER = 1;
                    INELIGIBLE_ASSIST = 1;
                }
            }
            else
            {
                if (Entity.LPB_ELIGFUEL == "02") INELIGIBLE_ASSIST = 1;

                if (INELIGIBLE_SSN_MISSING == 0 && INELIGIBLE_ASSIST == 0 && INELIGIBLE_WEATHER == 0)
                    INELIGIBLE_OTHER = 1;
            }
            //if (!string.IsNullOrEmpty(Entity.Casenotes_Screen.Trim()))
            //{
            //    INELIGIBLE_OTHER = 1;
            //    if (string.IsNullOrEmpty(Entity.CaseNotes_Data.Trim()))
            //    {
            //        if (Entity.MST_LANGUAGE.Trim() == LangCode)
            //            DeniedLtr(Entity, "Spanish");
            //        else
            //            DeniedLtr(Entity, "English");
            //    }
            //    else
            //    {

            //    }
            //}
            //else
            //{
            if (Entity.MST_LANGUAGE.Trim() == LangCode)
                DeniedLtr(Entity, "Spanish");
            else
                DeniedLtr(Entity, "English");
            //}
        }

        private void DeniedLtr(TMS81ReportEntity Entity, string Language)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;

            if (Language == "English")
            {
                ELIGIBLE_EASSISTANCE = "Energy Assistance Case # " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Dear Sir or Madam: ";
                UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                UTILITY_ELIGIBLE_APPROVED = "Your application for Energy Assistance has been denied ";
                UTILITY_ELIGIBLE_FORTHE = "for the following reason -";

                UTILITY_ELIGIBLE_WEATHER_TEXTA = "* If you provide us with this documentation within 10 days of the postmark date of this letter, not counting state-designated holidays, we will reprocess your application.";
                UTILITY_ELIGIBLE_DONT = "The Energy Assistance Programs are open until May 3rd.  If you choose to reapply, you must do so by that date. If you reapply, you will be asked to provide updated documentation.";


                UTILITY_ELIGIBLE_THEREARE = "These are not entitlement programs.  The State has the right to close the programs early if funding is not available.";
                UTILITY_ELIGIBLE_YOUHAVE = "You have the right to a Desk Review concerning the decision made on this application. Requests must be made in writing, and sent to our Energy Office within 60 days of the discovery of the occurrence, or by September 30th, whichever comes first. ";
                UTILITY_ELIGIBLE_PERSONS = "Persons who misrepresent their household circumstances, income or liquid assets, are required to repay any assistance that was provided. In addition, the household will be suspended from participation in the Energy Assistance Programs for the remainder of the current program year, and for the following 2 program years.";
                UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
                UTILITY_ELIGIBLE_SINCERELY = "Sincerely,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            }
            else
            {
                ELIGIBLE_EASSISTANCE = "Numero de Caso-Asistencia de Combustible# " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Estimado(a) Señor o Señora/Srta.:";
                //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                UTILITY_ELIGIBLE_APPROVED = "Su aplicación para Asistencia con el costo de Combustible se ha negado por la siguiente razón-";
                //UTILITY_ELIGIBLE_FORTHE = "for the following reason -";

                UTILITY_ELIGIBLE_WEATHER_TEXTA = "*Si nos provee la documentación indicada dentro de los próximos diez (10) días de la fecha del matasellos de esta carta,  no contando días feriados designados por el estado, volveremos a  procesar su solicitud.";
                UTILITY_ELIGIBLE_DONT = "Los Programas de Asistencia con el Combustible operan hasta el 03 de Mayo.  Si usted opta a reaplicar, debe de hacerlo para esa fecha.  Si reaplica, esta obligado a someter documentos al corriente.";


                UTILITY_ELIGIBLE_THEREARE = "Estos no son programas de privilegio.  El Estado tiene el derecho de suspender todos los programas temprano si los fondos no están disponibles.";
                UTILITY_ELIGIBLE_YOUHAVE = "Usted tiene el derecho a una Revisión con relación a la decisión tomada en esta solicitud. Peticiones deben ser por escrito, y enviadas a nuestra oficina dentro de sesenta (60) días pasados a la decisión tomada o el 30 de Septiembre,lo que ocurra primero. ";
                UTILITY_ELIGIBLE_PERSONS = "Personas que alteren sus circunstancias, ingresos o activos líquidos se les requerirá pagar por completo cualquier asistencia que haya sido provista.  Al mismo tiempo, la participación en el programa de la unidad familiar será suspendida por el restante del programa actual, y por los próximos dos (2) años del programa.";              //  UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
                UTILITY_ELIGIBLE_IFYOU = "Si tiene preguntas relacionadas con esta carta, favor de comunicarse con nuestra Oficina de Energía.";
                UTILITY_ELIGIBLE_SINCERELY = "Sinceramente,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            }
            Print_DeniedLetter_PDF(Entity, Language);


        }

        private void DeniedRent(TMS81ReportEntity Entity, string LangCode, ProgramDefinitionEntity PrgEntity)
        {
            INELIGIBLE_ASSIST = 0; INELIGIBLE_WEATHER = 0; INELIGIBLE_OTHER = 0;

            int n;
            bool isNumeric = int.TryParse(Entity.LPB_ELIGASSETS.Trim(), out n);

            if (Entity.LPB_ELIGRENT.Trim() == "10")
                INELIGIBLE_WEATHER = 1;
            if (!Entity.LPB_ELIGWTHR.Contains("Y"))
                INELIGIBLE_ASSIST = 1;
            if (Entity.LPB_ELIGINCOME.Contains("Y"))
            {
                if (isNumeric)
                    INELIGIBLE_OTHER = 1;
            }

            if (Entity.LPB_ELIGFUEL == "02")
                INELIGIBLE_ASSIST = 1;

            if (INELIGIBLE_OTHER != 1 && INELIGIBLE_ASSIST != 1 && INELIGIBLE_WEATHER != 1)
                INELIGIBLE_ASSIST = 1;

            if (Entity.MST_LANGUAGE.Trim() == LangCode)
                DeniedRentLetter(Entity, "Spanish");
            else
                DeniedRentLetter(Entity, "English");
        }

        private void DeniedRentReceiptLtr(TMS81ReportEntity Entity, string LangCode)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;

            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;

            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;
            string Language = "English";
            if (Entity.MST_LANGUAGE.Trim() == LangCode)
                Language = "Spanish";


            if (Language == "English")
            {
                ELIGIBLE_EASSISTANCE = "Energy Assistance Case # " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Dear Sir or Madam: ";
                //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                //UTILITY_ELIGIBLE_APPROVED = "Your application for Energy Assistance has been denied ";

                UTILITY_ELIGIBLE_FORTHE = "Your application for Energy Assistance is within the income limits.  ";
                UTILITY_ELIGIBLE_DONT = "In order for us to complete your application we need you to submit a copy of your current utility heating bill.";
                UTILITY_ELIGIBLE_IFYOUAREON = "Please write your Energy Assistance Case # on your utility heating bill, and send it to us as quickly as possible.  ";
                UTILITY_ELIGIBLE_IFYOUUSE = "Once we receive your bill, we will reprocess your application and send you a new letter. ";

                UTILITY_ELIGIBLE_THEREARE = "These are not entitlement programs.  The State has the right to close the programs early if funding is not available.";
                UTILITY_ELIGIBLE_YOUHAVE = "You have the right to a Desk Review concerning the decision made on this application.  Requests must be made in writing, and sent to our Energy Office within 60 days of the discovery of the occurrence, or by September 30th, whichever comes first.";
                UTILITY_ELIGIBLE_PERSONS = "Persons who misrepresent their household circumstances, income or liquid assets, are required to repay any assistance that was provided. In addition, the household will be suspended from participation in the Energy Assistance Programs for the remainder of the current program year, and for the following 2 program years.";
                UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
                UTILITY_ELIGIBLE_SINCERELY = "Sincerely,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            }
            else
            {
                ELIGIBLE_EASSISTANCE = "Numero de Caso-Asistencia de Combustible# " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Estimado(a) Señor o Señora/Srta.:";
                //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                //UTILITY_ELIGIBLE_APPROVED = "Su aplicación para Asistencia con el costo de Combustible se ha negado por la siguiente razón-";


                UTILITY_ELIGIBLE_FORTHE = "Su solicitud para Asistencia con Combustible esta dentro de los limites de ingreso.";
                UTILITY_ELIGIBLE_DONT = "Para poder completar su solicitud debe de en viarnos una copia de la factura de la empresa de  servicio público que usa para calefacción.";
                UTILITY_ELIGIBLE_IFYOUAREON = "Favor de anotar su Numero de Caso en la fact ura de la empresa de servicio público que usa para calefacción y remítalo a nuestra oficina lo mas pronto posible.";
                UTILITY_ELIGIBLE_IFYOUUSE = "Rápido que su factura sea recibida, reproces aremos su solicitud y le enviaremos otro aviso.";

                UTILITY_ELIGIBLE_THEREARE = "Estos no son programas de privilegio.  El Estado tiene el derecho de suspender todos los programas temprano si los fondos no están disponibles.";
                UTILITY_ELIGIBLE_YOUHAVE = "Usted tiene el derecho a una Revisión con relación a la decisión tomada en esta solicitud. Peticiones deben ser por escrito, y enviadas a nuestra oficina dentro de sesenta (60) días pasados a la decisión tomada o el 30 de Septiembre, lo que ocurra primero.";
                UTILITY_ELIGIBLE_PERSONS = "Personas que alteren sus circunstancias, ingresos o activos líquidos se les requerirá pagar por completo cualquier asistencia que haya sido provista. Al mismo tiempo, la participación en el programa de la unidad familiar será suspendida por el restante del programa actual, y por los próximos dos (2) años del programa.";
                UTILITY_ELIGIBLE_IFYOU = "Si tiene preguntas relacionadas con esta carta, favor de comunicarse con nuestra Oficina de Energía.";
                UTILITY_ELIGIBLE_SINCERELY = "Sinceramente,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            }
            Print_Denied_UtilityandRentRecept_PDF(Entity, Language);


        }

        private void DeniedRentLetter(TMS81ReportEntity Entity, string Language)
        {
            ELIGIBLE_EASSISTANCE = string.Empty; UTILITY_ELIGIBLE_DEARSIR = string.Empty;
            UTILITY_ELIGIBLE_YOUR = string.Empty; UTILITY_ELIGIBLE_APPROVED = string.Empty;
            UTILITY_ELIGIBLE_FORTHE = string.Empty; UTILITY_ELIGIBLE_WEATHER_TEXT = string.Empty;
            UTILITY_ELIGIBLE_WEATHER_TEXTA = string.Empty; UTILITY_ELIGIBLE_DONT = string.Empty;
            UTILITY_ELIGIBLE_IFYOUAREON = string.Empty; UTILITY_ELIGIBLE_IFYOUUSE = string.Empty;
            UTILITY_ELIGIBLE_THEREARE = string.Empty; UTILITY_ELIGIBLE_YOURBASIC = string.Empty;
            UTILITY_ELIGIBLE_YOUHAVE = string.Empty;
            UTILITY_ELIGIBLE_PERSONS = string.Empty; UTILITY_ELIGIBLE_IFYOU = string.Empty;
            UTILITY_ELIGIBLE_SINCERELY = string.Empty; UTILITY_ELIGIBLE_DEPARTMENT = string.Empty;

            if (Language == "English")
            {
                ELIGIBLE_EASSISTANCE = "Energy Assistance Case # " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Dear Sir or Madam: ";
                UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                UTILITY_ELIGIBLE_APPROVED = "Your application for Rental Assistance has been denied ";
                UTILITY_ELIGIBLE_FORTHE = "for the following reason -";
                //UTILITY_ELIGIBLE_YOURBASIC = "YOUR BASIC BENEFIT FOR THIS PROGRAM YEAR IS: $" + LTR_C4_2_AMOUNT.ToString("0.00");

                UTILITY_ELIGIBLE_WEATHER_TEXT = "- The Weatherization Assistance Program can help to make your home more energy efficient, ";
                UTILITY_ELIGIBLE_WEATHER_TEXTA = "and to lower your energy costs.  If you are interested, please complete and return the enclosed Weatherization Request Card.";

                //if (Entity.LPB_TYPE == "B1")
                //{
                UTILITY_ELIGIBLE_DONT = "The Energy Assistance Programs are open until May 3rd. If you choose to reapply, you must do so by that date. If you reapply, you will be asked to provide updated documentation.";
                //    UTILITY_ELIGIBLE_IFYOUAREON = "If you are on automatic delivery, let your vendor know that you have been approved for energy assistance.";
                //    UTILITY_ELIGIBLE_IFYOUUSE = "If you use all of your Basic Benefit, you may be eligible to receive Crisis and Safety Net Assistance.  Call our Energy office for more information about these benefits.";
                //}
                //else if (Entity.LPB_TYPE == "U1")
                //{
                //    UTILITY_ELIGIBLE_DONT = "Contact your utility company to let them know that you have been approved for energy assistance.";
                //    UTILITY_ELIGIBLE_IFYOUAREON = "Your Basic Benefit payment will be sent to your utility company.  Look for it on your utility bill.  It should appear as a credit to your account.";
                //    UTILITY_ELIGIBLE_IFYOUUSE = "If you have a past due balance with your utility company, ask them about their Matching Payment Program.  The Matching Payment Program can help you to eliminate your past due utility charges.";
                //}
                UTILITY_ELIGIBLE_THEREARE = "These are not entitlement programs.  The State has the right to close the programs early if funding is not available.";
                UTILITY_ELIGIBLE_YOUHAVE = "You have the right to a Desk Review concerning the decision made on this application. Requests must be made in writing, and sent to our Energy Office within 60 days of the discovery of the occurrence, or by September 30th, whichever comes first. ";
                UTILITY_ELIGIBLE_PERSONS = "Persons who misrepresent their household circumstances, income or liquid assets, are required to repay any assistance that was provided. In addition, the household will be suspended from participation in the Energy Assistance Programs for the remainder of the current program year, and for the following 2 program years.";
                UTILITY_ELIGIBLE_IFYOU = "If you have questions about this letter, please contact our Energy Office.";
                UTILITY_ELIGIBLE_SINCERELY = "Sincerely,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";
            }
            else
            {
                ELIGIBLE_EASSISTANCE = "Numero de Caso-Asistencia de Combustible# " + Entity.APP_NO.Trim();
                UTILITY_ELIGIBLE_DEARSIR = "Estimado(a) Señor o Señora/Srta.:";
                //UTILITY_ELIGIBLE_YOUR = "Your household has been ";
                UTILITY_ELIGIBLE_APPROVED = "Su aplicación para Asistencia con el costo de Combustible se ha negado por la siguiente razón-";
                //UTILITY_ELIGIBLE_FORTHE = "for the following reason -";

                UTILITY_ELIGIBLE_WEATHER_TEXT = "- El Programa de Aclimatación puede ayudarle a que su hogar sea más eficiente ";
                UTILITY_ELIGIBLE_WEATHER_TEXTA = "con el uso de combustible, y le ayude a rebajar el costo de calefacción.  Si esta interesado(a),  favor de llenar y enviar a vuelta de correo la Tarjeta de Aclimatación adjunta lo mas pronto posible.";

                UTILITY_ELIGIBLE_THEREARE = "Estos no son programas de privilegio.  El Estado tiene el derecho de suspender todos los programas temprano si los fondos no están disponibles.";
                UTILITY_ELIGIBLE_YOUHAVE = "Usted tiene el derecho a una Revisión con relación a la decisión tomada en esta solicitud. Peticiones deben ser por escrito, y enviadas a nuestra oficina dentro de sesenta (60) días pasados a la decisión tomada o el 30 de Septiembre, lo que ocurra primero. ";
                UTILITY_ELIGIBLE_PERSONS = "Personas que alteren sus circunstancias, ingresos o activos líquidos se les requerirá pagar por completo cualquier asistencia que haya sido provista.  Al mismo tiempo, la participación en el programa de la unidad familiar será suspendida por el restante del programa actual, y por los próximos dos (2) años del programa.";
                UTILITY_ELIGIBLE_IFYOU = "Si tiene preguntas relacionadas con esta carta, favor de comunicarse con nuestra Oficina de Energía.";
                UTILITY_ELIGIBLE_SINCERELY = "Sinceramente,";
                UTILITY_ELIGIBLE_DEPARTMENT = Dep_Agncy_Name + " Energy Services Department";

                UTILITY_ELIGIBLE_DONT = "Los Programas de Asistencia con el Combustible operan hasta el 03 de Mayo.  Si usted opta a reaplicar, debe de hacerlo para esa fecha.  Si reaplica, esta obligado a someter documentos al corriente.";
            }
            Print_Denied_RentLetter_PDF(Entity, Language);


        }

        // Denied Utility Letter PDF

        private void Print_Denied_UtilityandRentRecept_PDF(TMS81ReportEntity Entity, string Lanuage)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 10, 1);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 10, 1);
            BaseFont bf_helv = TblFontBold.GetCalculatedBaseFont(false);

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            cb.SetFontAndSize(bf_times, 10);
            cb.BeginText();
            X_Pos = 60;
            if (ShortName == "NEON") Y_Pos = 555; else Y_Pos = 570;

            if (Rep_Order == "2")
            {
                //Y_Pos = Y_Pos - 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ELIGIBLE_EASSISTANCE, TableFont), X_Pos, Y_Pos, 0);
                Y_Pos = Y_Pos - 20;
            }


            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEARSIR, TableFont), X_Pos, Y_Pos, 0);


            Y_Pos -= 20;
            if (Lanuage == "English")
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT, TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON, TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE, TblFontBold), X_Pos, Y_Pos, 0);

                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();
                Y_Pos -= 15;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE, TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(120, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 123).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(123, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(243, (UTILITY_ELIGIBLE_PERSONS.Length) - 243).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            else
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 112), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(112, (UTILITY_ELIGIBLE_DONT.Length) - 112).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(0, 110), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUAREON.Substring(110, (UTILITY_ELIGIBLE_IFYOUAREON.Length) - 110).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOUUSE, TblFontBold), X_Pos, Y_Pos, 0);


                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();
                Y_Pos -= 15;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(124, (UTILITY_ELIGIBLE_THEREARE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(124, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 126).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(126, 118).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(244, (UTILITY_ELIGIBLE_PERSONS.Length) - 244).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOU, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_SINCERELY, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEPARTMENT, TableFont), X_Pos, Y_Pos, 0);

            cb.EndText();

        }


        private void Print_Denied_RentLetter_PDF(TMS81ReportEntity Entity, string Lanuage)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 10, 1);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 10, 1);
            BaseFont bf_helv = TblFontBold.GetCalculatedBaseFont(false);

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            cb.SetFontAndSize(bf_times, 10);
            cb.BeginText();
            X_Pos = 60;
            if (ShortName == "NEON") Y_Pos = 555; else Y_Pos = 570;

            //Y_Pos = Y_Pos - 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ELIGIBLE_EASSISTANCE, TableFont), X_Pos, Y_Pos, 0);
            Y_Pos = Y_Pos - 20;


            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEARSIR, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_APPROVED + UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 10;

            //PdfPTable TempTable = new PdfPTable(1);
            //TempTable.TotalWidth = 500f;
            //TempTable.WidthPercentage = 100;
            ////Table.LockedWidth = true;
            ////float[] Lastwidths = new float[] { 100f};
            ////Table.SetWidths(Lastwidths);
            //TempTable.HorizontalAlignment = Element.ALIGN_LEFT;
            //TempTable.SpacingAfter = 300f;

            //PdfPCell R1 = new PdfPCell(new Phrase("", TableFont));
            //R1.HorizontalAlignment = Element.ALIGN_LEFT;
            //R1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //TempTable.AddCell(R1);

            //PdfPTable Table = new PdfPTable(1);
            //Table.TotalWidth = 500f;
            //Table.WidthPercentage = 100;
            ////Table.LockedWidth = true;
            ////float[] Lastwidths = new float[] { 100f};
            ////Table.SetWidths(Lastwidths);
            //Table.HorizontalAlignment = Element.ALIGN_LEFT;
            //Table.SpacingBefore = 40f;

            if (Lanuage == "English")
            {
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_ASSIST == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("YOUR HOUSEHOLD IS OVER INCOME.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("YOUR MONTHLY RENT IS LESS THAN 30% OF YOUR MONTHLY INCOME..", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_OTHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("YOUR HOUSEHOLD IS OVER THE LIQUID ASSETS LIMIT.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Your household has been approved for the Weatherization Assistance Program.", TableFont), X_Pos, Y_Pos, 0);
                if (UTILITY_ELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos - 5, "Y");
                else
                    PrintCheckBox(X_Pos, Y_Pos - 5, "N");
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Weatherization", TblFontBold), X_Pos + 12, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXT, TblFontBold), X_Pos + 90, Y_Pos, 0);

                Y_Pos -= 15;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA, TblFontBold), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 96).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(96, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 96).ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();


                //PdfPCell A1 = new PdfPCell(new Phrase(UTILITY_ELIGIBLE_DONT, TableFont));
                //A1.HorizontalAlignment = Element.ALIGN_LEFT;
                //A1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(A1);

                //PdfPCell A2 = new PdfPCell(new Phrase(UTILITY_ELIGIBLE_THEREARE, TableFont));
                //A2.HorizontalAlignment = Element.ALIGN_LEFT;
                //A2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(A2);

                //PdfPCell S1 = new PdfPCell(new Phrase("", TableFont));
                //S1.HorizontalAlignment = Element.ALIGN_LEFT;
                //S1.FixedHeight = 15f;
                //S1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(S1);

                //PdfPCell A3 = new PdfPCell(new Phrase(UTILITY_ELIGIBLE_YOUHAVE, TableFont));
                //A3.HorizontalAlignment = Element.ALIGN_LEFT;
                //A3.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(A3);

                //PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                //S2.HorizontalAlignment = Element.ALIGN_LEFT;
                //S2.FixedHeight = 15f;
                //S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(S2);

                //PdfPCell A4 = new PdfPCell(new Phrase(UTILITY_ELIGIBLE_PERSONS, TableFont));
                //A4.HorizontalAlignment = Element.ALIGN_LEFT;
                //A4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Table.AddCell(A4);


                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 110).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(110, (UTILITY_ELIGIBLE_DONT.Length) - 110).ToString(), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE, TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(120, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 123).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(123, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(243, (UTILITY_ELIGIBLE_PERSONS.Length) - 243).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            else
            {

                if (INELIGIBLE_ASSIST == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EL HOGAR ESTA SOBRE INGRESOS.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("SU ALQUILER MENSUAL ES MENOS DEL 30% DE SU INGRESO MENSUAL.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_OTHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("LOS ACTIVOS LIQUIDOS DE SU HOGAR EXCEDEN EL LIMITE.", TblFontBold), X_Pos + 12, Y_Pos, 0);


                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();


                if (UTILITY_ELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos - 5, "Y");
                else
                    PrintCheckBox(X_Pos, Y_Pos - 5, "N");
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Aclimatación ", TblFontBold), X_Pos + 12, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXT, TblFontBold), X_Pos + 90, Y_Pos, 0);

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 98).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(98, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 98).ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                cb.EndText();
                Y_Pos -= 8;
                cb.SetLineWidth(0.7f);
                cb.MoveTo(30f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(40f, float.Parse(Y_Pos.ToString()));
                cb.LineTo(580f, float.Parse(Y_Pos.ToString()));
                cb.Stroke();
                cb.BeginText();

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 112).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(112, (UTILITY_ELIGIBLE_DONT.Length) - 112).ToString(), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(124, (UTILITY_ELIGIBLE_THEREARE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 127).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(127, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 127).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 126).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(126, 119).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(244, (UTILITY_ELIGIBLE_PERSONS.Length) - 244).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }

            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOU, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_SINCERELY, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEPARTMENT, TableFont), X_Pos, Y_Pos, 0);

            cb.EndText();

        }

        private void Print_DeniedLetter_PDF(TMS81ReportEntity Entity, string Lanuage)
        {
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 10, 1);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 10, 1);
            BaseFont bf_helv = TblFontBold.GetCalculatedBaseFont(false);

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_UnChecked.ScalePercent(60f);
            _image_Checked.ScalePercent(60f);

            cb.SetFontAndSize(bf_times, 10);
            cb.BeginText();
            X_Pos = 60;
            if (ShortName == "NEON") Y_Pos = 555; else Y_Pos = 570;

            //Y_Pos = Y_Pos - 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ELIGIBLE_EASSISTANCE, TableFont), X_Pos, Y_Pos, 0);
            Y_Pos = Y_Pos - 20;


            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEARSIR, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_APPROVED + UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 10;
            if (Lanuage == "English")
            {

                //Y_Pos -= 20;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_FORTHE, TblFontBold), X_Pos + 12, Y_Pos, 0);
                X_Pos = 70;
                if (INELIGIBLE_ASSIST == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("YOUR HOUSEHOLD IS OVER INCOME.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("YOUR HOUSEHOLD IS OVER THE LIQUID ASSETS LIMIT.", TblFontBold), X_Pos + 12, Y_Pos, 0);


                if (INELIGIBLE_SSN_MISSING == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("THIS APPLICATION HAS BEEN DENIED BECAUSE SSN(s) ARE MISSING", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_OTHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("OTHER*", TblFontBold), X_Pos + 12, Y_Pos, 0);

                int k = 0;
                if (!string.IsNullOrEmpty(Entity.CaseNotes_Data.Trim()))
                {

                    string Text = string.Empty;
                    string[] Text1 = Regex.Split(Entity.CaseNotes_Data.Trim(), "\r\n");

                    for (int i = 0; i < Text1.Length; i++)
                    {
                        if (k < 8)
                        {
                            if (Text1[i].Length > 75)
                            {
                                Text = Text1[i].Substring(0, 75);
                                string[] Rec = Regex.Split(Text, " ");

                                Y_Pos -= 15;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec[Rec.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                k++;

                                if (Text1[i].Length > 150)
                                {
                                    Text = Rec[Rec.Length - 1] + Text1[i].Substring(75, 75);
                                    string[] Rec1 = Regex.Split(Text, " ");
                                    if (k < 8)
                                    {
                                        Y_Pos -= 15;
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec1[Rec1.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                        k++;
                                    }
                                    if (Text1[i].Length > 225)
                                    {
                                        Text = Rec1[Rec1.Length - 1] + Text1[i].Substring(150, 75);
                                        string[] Rec2 = Regex.Split(Text, " ");

                                        if (k < 8)
                                        {
                                            Y_Pos -= 15;
                                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec2[Rec2.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                            k++;
                                        }

                                        if (Text1[i].Length > 300)
                                        {
                                            if (k < 8)
                                            {
                                                Text = Rec2[Rec2.Length - 1] + Text1[i].Substring(225, 75);
                                                string[] Rec3 = Regex.Split(Text, " ");

                                                Y_Pos -= 15;
                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec3[Rec3.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                k++;

                                                if (Text1[i].Length > 375)
                                                {
                                                    if (k < 8)
                                                    {
                                                        Text = Rec3[Rec3.Length - 1] + Text1[i].Substring(300, 75);
                                                        string[] Rec4 = Regex.Split(Text, " ");

                                                        Y_Pos -= 15;
                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec4[Rec4.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                        k++;

                                                        if (Text1[i].Length > 450)
                                                        {
                                                            if (k < 8)
                                                            {
                                                                Text = Rec4[Rec4.Length - 1] + Text1[i].Substring(375, 75);
                                                                string[] Rec5 = Regex.Split(Text, " ");

                                                                Y_Pos -= 15;
                                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec5[Rec5.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                                k++;

                                                                if (Text1[i].Length > 525)
                                                                {
                                                                    Text = Rec5[Rec5.Length - 1] + Text1[i].Substring(450, 75);
                                                                    string[] Rec6 = Regex.Split(Text, " ");

                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec6[Rec6.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }

                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec6[Rec6.Length - 1] + Text1[i].Substring(525, Text1[i].Length - 525), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec5[Rec5.Length - 1] + Text1[i].Substring(450, Text1[i].Length - 450), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (k < 8)
                                                            {
                                                                Y_Pos -= 15;
                                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec4[Rec4.Length - 1] + Text1[i].Substring(375, Text1[i].Length - 375), TableFont), X_Pos, Y_Pos, 0);
                                                                k++;
                                                            }
                                                        }

                                                    }


                                                }
                                                else
                                                {
                                                    if (k < 8)
                                                    {
                                                        Y_Pos -= 15;
                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec3[Rec3.Length - 1] + Text1[i].Substring(300, Text1[i].Length - 300), TableFont), X_Pos, Y_Pos, 0);
                                                        k++;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (k < 8)
                                            {
                                                Y_Pos -= 15;
                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec2[Rec2.Length - 1] + Text1[i].Substring(225, Text1[i].Length - 225), TableFont), X_Pos, Y_Pos, 0);
                                                k++;
                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (k < 8)
                                        {
                                            Y_Pos -= 15;
                                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec1[Rec1.Length - 1] + Text1[i].Substring(150, Text1[i].Length - 150), TableFont), X_Pos, Y_Pos, 0);
                                            k++;
                                        }
                                    }
                                }
                                else
                                {
                                    if (k < 8)
                                    {
                                        Y_Pos -= 15;
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec[Rec.Length - 1] + Text1[i].Substring(75, Text1[i].Length - 75), TableFont), X_Pos, Y_Pos, 0);
                                        k++;
                                    }
                                }

                            }
                            else
                            {
                                if (k < 8)
                                {
                                    Y_Pos -= 15;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i], TableFont), X_Pos, Y_Pos, 0);
                                    k++;
                                }
                            }
                        }

                        //if (k < 6)
                        //{
                        //    if (Text1[i].Length > 90)
                        //    {
                        //        Y_Pos -= 15;
                        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(0, 89).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //        k++;
                        //        if (Text1[i].Length > 180)
                        //        {
                        //            Y_Pos -= 15;
                        //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(89, 178).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //            k++;
                        //            if (Text1[i].Length > 270)
                        //            {
                        //                Y_Pos -= 15;
                        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(178, 267).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //                k++;

                        //                if (Text1[i].Length > 360)
                        //                {
                        //                    Y_Pos -= 15;
                        //                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(267, 356).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //                    k++;

                        //                    Y_Pos -= 15;
                        //                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(356, (Text1[i].Length) - 356).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //                    k++;
                        //                }
                        //                else
                        //                {
                        //                    Y_Pos -= 15;
                        //                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(267, (Text1[i].Length) - 267).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //                    k++;
                        //                }
                        //            }
                        //            else
                        //            {
                        //                Y_Pos -= 15;
                        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(178, (Text1[i].Length) - 178).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //                k++;
                        //            }
                        //        }
                        //        else
                        //        {
                        //            Y_Pos -= 15;
                        //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i].Substring(89, (Text1[i].Length) - 89).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        //            k++;
                        //        }
                        //    }
                        //    else
                        //    {
                        //        Y_Pos -= 15;
                        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i], TblFontBold), X_Pos, Y_Pos, 0);
                        //        k++;
                        //    }
                        //}

                    }


                }

                if (k < 8)
                {
                    for (int z = k; z < 8; z++)
                        Y_Pos -= 15;
                }

                Y_Pos -= 25; X_Pos = 60;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 109), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(109, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 109), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 113), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(113, (UTILITY_ELIGIBLE_DONT.Length) - 113), TableFont), X_Pos, Y_Pos, 0);


                Y_Pos -= 25;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE, TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(120, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 123).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(123, 120).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(243, (UTILITY_ELIGIBLE_PERSONS.Length) - 243).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            else
            {
                X_Pos = 70;
                if (INELIGIBLE_ASSIST == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("EL HOGAR ESTA SOBRE INGRESOS.", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_WEATHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("LOS ACTIVOS LIQUIDOS DE SU HOGAR EXCEDEN EL LIMITE.", TblFontBold), X_Pos + 12, Y_Pos, 0);


                if (INELIGIBLE_SSN_MISSING == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("ESTA APLICACIÓN A SIDO DENEGADA DEBIDO A QUE LOS NÚMEROS DE SEGURO SOCIAL NO HAN ", TblFontBold), X_Pos + 12, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("SIDO PROVISTOS", TblFontBold), X_Pos + 12, Y_Pos, 0);

                if (INELIGIBLE_OTHER == 1)
                    PrintCheckBox(X_Pos, Y_Pos, "Y");
                else PrintCheckBox(X_Pos, Y_Pos, "N");
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("OTROS*", TblFontBold), X_Pos + 12, Y_Pos, 0);
                int k = 0;
                if (!string.IsNullOrEmpty(Entity.CaseNotes_Data.Trim()))
                {

                    string Text = string.Empty;
                    string[] Text1 = Regex.Split(Entity.CaseNotes_Data.Trim(), "\r\n");

                    for (int i = 0; i < Text1.Length; i++)
                    {
                        if (k < 8)
                        {
                            if (Text1[i].Length > 75)
                            {
                                Text = Text1[i].Substring(0, 75);
                                string[] Rec = Regex.Split(Text, " ");

                                Y_Pos -= 15;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec[Rec.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                k++;

                                if (Text1[i].Length > 150)
                                {
                                    Text = Rec[Rec.Length - 1] + Text1[i].Substring(75, 75);
                                    string[] Rec1 = Regex.Split(Text, " ");
                                    if (k < 8)
                                    {
                                        Y_Pos -= 15;
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec1[Rec1.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                        k++;
                                    }
                                    if (Text1[i].Length > 225)
                                    {
                                        Text = Rec1[Rec1.Length - 1] + Text1[i].Substring(150, 75);
                                        string[] Rec2 = Regex.Split(Text, " ");

                                        if (k < 8)
                                        {
                                            Y_Pos -= 15;
                                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec2[Rec2.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                            k++;
                                        }

                                        if (Text1[i].Length > 300)
                                        {
                                            if (k < 8)
                                            {
                                                Text = Rec2[Rec2.Length - 1] + Text1[i].Substring(225, 75);
                                                string[] Rec3 = Regex.Split(Text, " ");

                                                Y_Pos -= 15;
                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec3[Rec3.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                k++;

                                                if (Text1[i].Length > 375)
                                                {
                                                    if (k < 8)
                                                    {
                                                        Text = Rec3[Rec3.Length - 1] + Text1[i].Substring(300, 75);
                                                        string[] Rec4 = Regex.Split(Text, " ");

                                                        Y_Pos -= 15;
                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec4[Rec4.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                        k++;

                                                        if (Text1[i].Length > 450)
                                                        {
                                                            if (k < 8)
                                                            {
                                                                Text = Rec4[Rec4.Length - 1] + Text1[i].Substring(375, 75);
                                                                string[] Rec5 = Regex.Split(Text, " ");

                                                                Y_Pos -= 15;
                                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec5[Rec5.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                                k++;

                                                                if (Text1[i].Length > 525)
                                                                {
                                                                    Text = Rec5[Rec5.Length - 1] + Text1[i].Substring(450, 75);
                                                                    string[] Rec6 = Regex.Split(Text, " ");

                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text.Substring(0, Text.Length - Rec6[Rec6.Length - 1].Length), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }

                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec6[Rec6.Length - 1] + Text1[i].Substring(525, Text1[i].Length - 525), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (k < 8)
                                                                    {
                                                                        Y_Pos -= 15;
                                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec5[Rec5.Length - 1] + Text1[i].Substring(450, Text1[i].Length - 450), TableFont), X_Pos, Y_Pos, 0);
                                                                        k++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (k < 8)
                                                            {
                                                                Y_Pos -= 15;
                                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec4[Rec4.Length - 1] + Text1[i].Substring(375, Text1[i].Length - 375), TableFont), X_Pos, Y_Pos, 0);
                                                                k++;
                                                            }
                                                        }

                                                    }


                                                }
                                                else
                                                {
                                                    if (k < 8)
                                                    {
                                                        Y_Pos -= 15;
                                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec3[Rec3.Length - 1] + Text1[i].Substring(300, Text1[i].Length - 300), TableFont), X_Pos, Y_Pos, 0);
                                                        k++;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (k < 8)
                                            {
                                                Y_Pos -= 15;
                                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec2[Rec2.Length - 1] + Text1[i].Substring(225, Text1[i].Length - 225), TableFont), X_Pos, Y_Pos, 0);
                                                k++;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (k < 8)
                                        {
                                            Y_Pos -= 15;
                                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec1[Rec1.Length - 1] + Text1[i].Substring(150, Text1[i].Length - 150), TableFont), X_Pos, Y_Pos, 0);
                                            k++;
                                        }
                                    }
                                }
                                else
                                {
                                    if (k < 8)
                                    {
                                        Y_Pos -= 15;
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Rec[Rec.Length - 1] + Text1[i].Substring(75, Text1[i].Length - 75), TableFont), X_Pos, Y_Pos, 0);
                                        k++;
                                    }
                                }

                            }
                            else
                            {
                                if (k < 8)
                                {
                                    Y_Pos -= 15;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Text1[i], TableFont), X_Pos, Y_Pos, 0);
                                    k++;
                                }
                            }
                        }
                    }
                }

                if (k < 8)
                {
                    for (int z = k; z < 8; z++)
                        Y_Pos -= 15;
                }

                Y_Pos -= 25; X_Pos = 60;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(0, 121), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_WEATHER_TEXTA.Substring(121, (UTILITY_ELIGIBLE_WEATHER_TEXTA.Length) - 121), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(0, 113), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DONT.Substring(113, (UTILITY_ELIGIBLE_DONT.Length) - 113), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos -= 25;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_THEREARE.Substring(124, (UTILITY_ELIGIBLE_THEREARE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(0, 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_YOUHAVE.Substring(124, (UTILITY_ELIGIBLE_YOUHAVE.Length) - 124).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(0, 126).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(126, 119).ToString(), TableFont), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_PERSONS.Substring(245, (UTILITY_ELIGIBLE_PERSONS.Length) - 245).ToString(), TableFont), X_Pos, Y_Pos, 0);
            }
            Y_Pos -= 20;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_IFYOU, TblFontBold), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_SINCERELY, TableFont), X_Pos, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(UTILITY_ELIGIBLE_DEPARTMENT, TableFont), X_Pos, Y_Pos, 0);

            cb.EndText();

        }

        #endregion


        #region Prinnt Energy App

        private void On_PrintCTApp()
        {
            Random_Filename = null;

            PdfName = BaseForm.BaseApplicationNo.ToString() + "Report";//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }


            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            Document document = new Document();
            document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            BaseFont bf_timesBold = BaseFont.CreateFont("c:/windows/fonts/TIMESBD.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontBoldS = new iTextSharp.text.Font(1, 8, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
            cb = writer.DirectContent;


            string Attention = string.Empty, Roma_Switch = string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                Attention = ds.Tables[0].Rows[0]["ACR_03_ATTESTATION"].ToString().Trim();
                Roma_Switch = ds.Tables[0].Rows[0]["ACR_ROMA_SWITCH"].ToString().Trim();
            }

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            //Casesite Table
            List<CaseSiteEntity> SiteList = new List<CaseSiteEntity>();
            CaseSiteEntity Search_Site = new CaseSiteEntity(true);
            Search_Site.SiteAGENCY = BaseForm.BaseAgency; Search_Site.SiteNUMBER = BaseForm.BaseCaseMstListEntity[0].Site;
            Search_Site.SiteROOM = "0000";
            SiteList = _model.CaseMstData.Browse_CASESITE(Search_Site, "Browse");


            //CaseHie Table
            DataSet dsCaseHie = DatabaseLayer.ADMNB001DB.ADMNB001_GetCashie("**-**-**");
            DataTable dtCaseHie = dsCaseHie.Tables[0];

            //Getting CaseWorker
            DataSet dsVerifier = DatabaseLayer.CaseMst.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            DataTable dtVerifier = dsVerifier.Tables[0];

            //CaseIncome Table
            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];
            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);

            DataSet dsCaseDiff = DatabaseLayer.CaseMst.GetCASEDiffadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCasediff = dsCaseDiff.Tables[0];

            DataSet dsLandlord = DatabaseLayer.CaseMst.GetLandlordadpya(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtLandlorddet = dsLandlord.Tables[0];

            ////CHLDMST Table
            //ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ////CHLDEMER TABLE
            //List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            //CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            //DataTable dtrelation = Relations.Tables[0];
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }

            List<CommonEntity> lookInsuranceCategory = _model.lookupDataAccess.GetInsuranceCategory();

            DataSet dsFUND = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.CASEMNGMTFUNDSRC, "A");
            DataTable dtFUND = dsFUND.Tables[0];

            LIHEAPBEntity Search_Entity = new LIHEAPBEntity(true);
            Search_Entity.Agency = BaseForm.BaseAgency; Search_Entity.Dept = BaseForm.BaseDept; Search_Entity.Prog = BaseForm.BaseProg;
            Search_Entity.Year = BaseForm.BaseYear; Search_Entity.AppNo = BaseForm.BaseApplicationNo;
            List<LIHEAPBEntity> LiheapBDet = _model.LiheAllData.Browse_LIHEAPB(Search_Entity, "Browse");

            List<LiheApvEntity> LiheapVDet = _model.LiheAllData.GetLiheAppvadpyas(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null, null, null);

            CASEVDDEntity Search_VddEntity = new CASEVDDEntity(true);
            Search_Entity.Agency = BaseForm.BaseAgency;
            List<CASEVDDEntity> CasevddList = _model.SPAdminData.Browse_CASEVDD(Search_VddEntity, "Browse");

            cb.BeginText();
            X_Pos = 300; Y_Pos = 580;
            cb.SetFontAndSize(bf_helv, 13);
            string Header_Desc = string.Empty; string Form_Selection = string.Empty;

            //if (Privileges.ModuleCode == "03")
            //{
            string ShortName = string.Empty;

            if (dtCaseHie.Rows.Count > 0)
            {
                foreach (DataRow drCasehie in dtCaseHie.Rows)
                {
                    if (drCasehie["Code"].ToString().Trim() == BaseForm.BaseAgency)
                    {
                        ShortName = drCasehie["HIE_NAME"].ToString().Trim(); break;
                    }
                }
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "STATE OF CONNECTICUT -- DEPARTMENT OF SOCIAL SERVICES", X_Pos, Y_Pos, 0);

                Header_Desc = ShortName;
                Form_Selection = "ENERGY ASSISTANCE APPLICATION";
                cb.SetFontAndSize(bf_helv, 10);
                cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Applicant I.D. No: ", 650, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 690, Y_Pos, 0);

                Y_Pos -= 20;
                cb.SetFontAndSize(bf_timesBold, 13);
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos, 0);
            }

            //cb.SetFontAndSize(bf_helv, 9);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant I.D. No: ", 650, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 690, Y_Pos, 0);
            cb.SetFontAndSize(bf_helv, 10);
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 650, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()))
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 695, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("__________", Times), 700, Y_Pos, 0);

            cb.SetFontAndSize(bf_helv, 13);
            Barcode128 bc39 = new Barcode128();
            bc39.Code = BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + BaseForm.BaseYear + BaseForm.BaseApplicationNo.Trim();
            // comment next line to show barcode text
            //bc39.Font = null;
            bc39.StartStopText = false;
            bc39.CodeType = iTextSharp.text.pdf.Barcode128.CODE128;
            bc39.Extended = true;
            System.Drawing.Bitmap bm = new System.Drawing.Bitmap(bc39.CreateDrawingImage(System.Drawing.Color.Black, System.Drawing.Color.White));
            iTextSharp.text.Image barCodeImage = bc39.CreateImageWithBarcode(cb, null, null);

            //cb.SetTextMatrix(720,560);
            //barCodeImage.ScaleToFit(30,600);
            barCodeImage.SetAbsolutePosition(730, 490);
            barCodeImage.RotationDegrees = 90;
            barCodeImage.Rotate();
            cb.AddImage(barCodeImage);


            Y_Pos -= 15; X_Pos = 15;
            cb.SetFontAndSize(bf_helv, 10);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you have a disability and need an accommodation or special help to complete this application?", X_Pos, Y_Pos, 0);

            ///************************************CheckBoxes****************************/
            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            RadioCheckField checkbox;
            PdfFormField SField;
            //if (Privileges.ModuleCode == "08")
            //{
            rect = new iTextSharp.text.Rectangle(440, Y_Pos + 8, 448, Y_Pos);
            //rect.Rotate();
            checkbox = new RadioCheckField(writer, rect, "Yes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 450, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(470, Y_Pos + 8, 478, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "No", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 480, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            string Language = null;
            DataSet dsLang = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.LANGUAGECODES);
            DataTable dtLang = dsLang.Tables[0];
            foreach (DataRow drLang in dtLang.Rows)
            {
                if (drCaseMST["MST_LANGUAGE"].ToString().Trim() == drLang["Code"].ToString().Trim())
                {
                    Language = drLang["LookUpDesc"].ToString().Trim(); break;
                }
            }

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Primary Language ", 380, Y_Pos, 0); 
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Language, Timesline), 460, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "DSS Client I.D. #   __________", 640, Y_Pos, 0);
            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Site_Name, Timesline), 650, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Mailing Address", X_Pos, Y_Pos, 0);
            string House_NO = null, Street = null, city = null, state = null, zip = null, DApt = null; string DSuffix = string.Empty;
            if (dtCasediff.Rows.Count > 0)
            {
                foreach (DataRow drCaseDiff in dtCasediff.Rows)
                {
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_HN"].ToString().Trim()))
                        House_NO = drCaseDiff["DIFF_HN"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_APT"].ToString().Trim()))
                        DApt = drCaseDiff["DIFF_APT"].ToString().Trim() + " ";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_SUFFIX"].ToString().Trim()))
                        DSuffix = " " + drCaseDiff["DIFF_SUFFIX"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STREET"].ToString().Trim()))
                        Street = drCaseDiff["DIFF_STREET"].ToString().Trim() + DSuffix + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_CITY"].ToString().Trim()))
                        city = drCaseDiff["DIFF_CITY"].ToString().Trim() + ",";
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_STATE"].ToString().Trim()))
                        state = drCaseDiff["DIFF_STATE"].ToString().Trim();
                    if (!string.IsNullOrEmpty(drCaseDiff["DIFF_ZIP"].ToString().Trim()))
                        zip = "00000".Substring(0, 5 - drCaseDiff["DIFF_ZIP"].ToString().Trim().Length) + drCaseDiff["DIFF_ZIP"].ToString().Trim();
                    if (zip == "00000") zip = ""; else zip = ", " + zip;
                }
                if (!string.IsNullOrEmpty((House_NO + Street + city + state + zip).Trim()))
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(House_NO + Street+DApt + city + state + zip, Timesline), X_Pos + 72, Y_Pos, 0);
                else
                {
                    cb.SetLineWidth(0.5f);
                    //cb.SetLineCap(5);
                    cb.MoveTo(X_Pos + 72, Y_Pos);
                    cb.LineTo(210, Y_Pos);
                    cb.Stroke();
                }
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(X_Pos + 72, Y_Pos);
                cb.LineTo(210, Y_Pos);
                cb.Stroke();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "," + drCaseMST["MST_CITY"].ToString().Trim() + "," + drCaseMST["MST_STATE"].ToString().Trim() + "," + drCaseMST["MST_ZIP"].ToString().Trim(), Timesline), X_Pos + 72, Y_Pos, 0);
            }

            if (!string.IsNullOrEmpty(drCaseMST["MST_EMAIL"].ToString().Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Email :", Times), 380, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_EMAIL"].ToString().Trim(), Timesline), 410, Y_Pos, 0);
            }
            else
            {
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Email", 380, Y_Pos, 0);
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(410, Y_Pos);
                cb.LineTo(520, Y_Pos);
                cb.Stroke();
            }


            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Home Telephone ", 640, Y_Pos, 0);
            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Timesline), 650, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Service Address", X_Pos, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_STATE"].ToString().Trim()))
            {
                string Apt = string.Empty; string Suffix = string.Empty; string Zip = string.Empty; string Floor = string.Empty; string Addr = string.Empty;
                if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                    Apt = " Apt:" + drCaseMST["MST_APT"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_FLR"].ToString().Trim()))
                    Floor = "Flr: " + drCaseMST["MST_FLR"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                    Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
                if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()))
                    Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();
                Addr = Apt + Floor;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drCaseMST["MST_HN"].ToString().Trim() + " " + drCaseMST["MST_STREET"].ToString().Trim() + "  " + Suffix + Addr + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + ", " + Zip, Timesline), X_Pos + 72, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("_________________________________________________", Times), X_Pos + 72, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Cell Number", 640, Y_Pos, 0);
            if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
            {
                MaskedTextBox mskCell = new MaskedTextBox();
                mskCell.Mask = "(000)000-0000";
                mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 650, Y_Pos, 0);
            }
            else
            {
                cb.SetLineWidth(0.5f);
                //cb.SetLineCap(5);
                cb.MoveTo(650, Y_Pos - 3);
                cb.LineTo(705, Y_Pos - 3);
                cb.Stroke();
            }
            //cb.EndText();

            Y_Pos -= 15;
            int Count = dtCaseSNP.Rows.Count;
            int disable = 0, FoodStamps = 0, under5 = 0;
            foreach (DataRow drsnp in dtCaseSNP.Rows)
            {
                if (drsnp["SNP_DISABLE"].ToString().Trim() == "Y")
                    disable++;
                if (drsnp["SNP_FOOD_STAMPS"].ToString().Trim() == "Y")
                    FoodStamps++;
                //if (!string.IsNullOrEmpty(drsnp["SNP_AGE"].ToString()))
                //{
                //    if (int.Parse(drsnp["SNP_AGE"].ToString()) >= 18)
                //        Adults++;
                //    else
                //        Child++;
                //    if (int.Parse(drsnp["SNP_AGE"].ToString()) < 5)
                //        under5++;
                //}
            }
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Total No of Household Members: ", X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Count.ToString(), Timesline), X_Pos + 138, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Number of Persons Disabled: ", 220, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(disable.ToString(), Timesline), 340, Y_Pos, 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Does anyone in the household receive SNAP benefits?", 400, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(630, Y_Pos + 8, 638, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SecondYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (FoodStamps > 0)
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 640, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(660, Y_Pos + 8, 668, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SecondNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (FoodStamps == 0)
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 670, Y_Pos, 0);

            cb.EndText();

            ////Temp table not displayed on the screen
            PdfPTable head = new PdfPTable(1);
            head.HorizontalAlignment = Element.ALIGN_CENTER;
            head.TotalWidth = 50f;
            PdfPCell headcell = new PdfPCell(new Phrase(""));
            headcell.HorizontalAlignment = Element.ALIGN_CENTER;
            headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            head.AddCell(headcell);


            #region To Print SNP Details in the Table
            PdfPTable Snp_Table = new PdfPTable(13);
                Snp_Table.TotalWidth = 750f;
                Snp_Table.WidthPercentage = 100;
                Snp_Table.LockedWidth = true;
                float[] widths = new float[] { 65f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 25f };// 55f, 45f, 25f, 25f, 11f, 13f, 31f, 28f, 40f, 19f, 18f, 22f, 35f;
            Snp_Table.SetWidths(widths);
                Snp_Table.HorizontalAlignment = Element.ALIGN_CENTER;
                Snp_Table.SpacingBefore = 100f;

            PdfPCell Header = new PdfPCell(new Phrase("Listing yourself first, complete all spaces below for ALL persons living in the home. Use a separate sheet of paper if necessary.", TblFontBold));
            Header.Colspan = 13;
            Header.FixedHeight = 15f;
            Header.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(Header);


            //PdfPCell Header = new PdfPCell(new Phrase("HOUSEHOLD MEMBERS Listing yourself first, complete all spaces below for ALL persons living in the home.", TblFontBold));
            //Header.Colspan = 15;
            //Header.FixedHeight = 15f;
            //Header.BackgroundColor = BaseColor.LIGHT_GRAY;
            //Header.Border = iTextSharp.text.Rectangle.BOX;
            //Snp_Table.AddCell(Header);

            PdfPCell row2 = new PdfPCell(new Phrase(""));
            row2.Colspan = 9;
            row2.FixedHeight = 15f;
            row2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2);

            PdfPCell row2_Health = new PdfPCell(new Phrase("Health", TableFontBoldItalic));
            row2_Health.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Health.FixedHeight = 15f;
            row2_Health.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Health);

            PdfPCell row2_Emp = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row2_Emp.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Emp.FixedHeight = 15f;
            row2_Emp.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Emp);

            PdfPCell row2_Rece = new PdfPCell(new Phrase("Receive", TableFontBoldItalic));
            row2_Rece.HorizontalAlignment = Element.ALIGN_CENTER;
            row2_Rece.FixedHeight = 15f;
            row2_Rece.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row2_Rece);

            PdfPCell row2_Space = new PdfPCell(new Phrase(""));
            //row2_Space.Colspan = 3;
            row2_Space.FixedHeight = 15f;
            row2_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row2_Space);

            //PdfPCell row3 = new PdfPCell(new Phrase(""));
            //row3.Colspan = 3;
            //row3.FixedHeight = 15f;
            //row3.Border = iTextSharp.text.Rectangle.BOX;
            //Snp_Table.AddCell(row3);

            PdfPCell row3 = new PdfPCell(new Phrase(""));
            row3.Colspan = 2;
            row3.FixedHeight = 15f;
            row3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3);

            PdfPCell row3_SSN = new PdfPCell(new Phrase("Social", TableFontBoldItalic));
            row3_SSN.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_SSN.FixedHeight = 15f;
            row3_SSN.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_SSN);

            PdfPCell row3_Birth = new PdfPCell(new Phrase("BirthDate", TableFontBoldItalic));
            row3_Birth.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Birth.FixedHeight = 15f;
            row3_Birth.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Birth);

            PdfPCell row3_Space = new PdfPCell(new Phrase(""));
            //row3_Space.Colspan = 2;
            row3_Space.FixedHeight = 15f;
            row3_Space.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space);

            PdfPCell row3_Sex = new PdfPCell(new Phrase("Sex", TableFontBoldItalic));
            row3_Sex.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Sex.FixedHeight = 15f;
            row3_Sex.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Sex);

            PdfPCell row3_Space2 = new PdfPCell(new Phrase(""));
            row3_Space2.Colspan = 3;
            row3_Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space2.FixedHeight = 15f;
            row3_Space2.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space2);

            PdfPCell row3_Insurance = new PdfPCell(new Phrase("Insurance ", TableFontBoldItalic));
            row3_Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Insurance.FixedHeight = 15f;
            row3_Insurance.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Insurance);

            PdfPCell row3_Veteran = new PdfPCell(new Phrase("Veteran", TableFontBoldItalic));
            row3_Veteran.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Veteran.FixedHeight = 15f;
            row3_Veteran.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Veteran);

            PdfPCell row3_Receive_FS = new PdfPCell(new Phrase("SNAP", TableFontBoldItalic));
            row3_Receive_FS.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Receive_FS.FixedHeight = 15f;
            row3_Receive_FS.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            Snp_Table.AddCell(row3_Receive_FS);

            PdfPCell row3_Space3 = new PdfPCell(new Phrase("", TableFontBoldItalic));
            row3_Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            row3_Space3.FixedHeight = 15f;
            row3_Space3.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(row3_Space3);

            string[] col = { "Name (last, first, MI)", "Relationship to Applicant", "Security", "mm/dd/yy", "Age", "M/F", "Ethnicity", "Race", "Education", "Y/N", "Y/N", "Y/N", "Disabled" };
            for (int i = 0; i < col.Length; ++i)
            {
                PdfPCell cell = new PdfPCell(new Phrase(col[i], TableFontBoldItalic));
                cell.HorizontalAlignment = Element.ALIGN_CENTER;
                cell.FixedHeight = 15f;
                if (i == 2) cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER + iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                else cell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(cell);
            }

            int Tbl_Count = 0; string FamSeq = string.Empty;
            List<CaseSnpEntity> snplist = new List<CaseSnpEntity>();
            foreach (CaseSnpEntity entity in BaseForm.BaseCaseSnpEntity)
            {
                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq == entity.FamilySeq)
                {
                    FamSeq = entity.FamilySeq.Trim();
                    string ApplicantName = entity.NameixLast + " " + entity.NameixFi + " " + entity.NameixMi;//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (entity.MemberCode.Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(entity.Ssno.Trim()))
                    {
                        if (entity.Ssno.Trim().Length < 9)
                            entity.Ssno = SetLeadingZeros(entity.Ssno.Trim());

                        //SSNNum = drCaseSNP["SNP_SSNO"].ToString().Trim();
                        SSNNum = "xxx" + "-" + "xx" + "-" + entity.Ssno.Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(entity.AltBdate))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(entity.AltBdate.Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(entity.AltBdate.Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (entity.Age.Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(entity.Age.Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(entity.Sex.Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (entity.Ethnic.Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (entity.Race.Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (entity.Education.Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(entity.HealthIns.Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (entity.MilitaryStatus.Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(entity.MilitaryStatus.Trim().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(entity.Vet.Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(entity.FootStamps.Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);


                        string AGYDisable = null;
                        DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                        DataTable dtDisable = dsDisable.Tables[0];
                        foreach (DataRow drDisable in dtDisable.Rows)
                        {
                            if (entity.Disable.Trim() == drDisable["Code"].ToString().Trim())
                                AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                        }
                        PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                        Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                        Disabled.FixedHeight = 15f;
                        Disabled.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Disabled);
                }
            }

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {
                if (FamSeq != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "F";
                            else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "F";
                                else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                    F_FullPart = "P";
                                break;
                            }
                        }
                    }

                    string ApplicantName = drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim() + " " + drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim();//snpEntity.NameixFi.Trim() + " " + snpEntity.NameixLast.Trim();
                    PdfPCell Name = new PdfPCell(new Phrase(ApplicantName, TableFont));
                    Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Name.FixedHeight = 15f;
                    Name.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Name);

                    string Relation = null;
                    DataSet dsRelation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RELATIONSHIP);
                    DataTable dtRelation = dsRelation.Tables[0];
                    foreach (DataRow drRelation in dtRelation.Rows)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString().Trim() == drRelation["Code"].ToString().Trim())
                        {
                            Relation = drRelation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell RelationShip = new PdfPCell(new Phrase(Relation, TableFont));
                    RelationShip.HorizontalAlignment = Element.ALIGN_LEFT;
                    RelationShip.FixedHeight = 15f;
                    RelationShip.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(RelationShip);
                    string SSNNum = null;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_SSNO"].ToString().Trim()))
                    {
                        if (drCaseSNP["SNP_SSNO"].ToString().Trim().Length < 9)
                            drCaseSNP["SNP_SSNO"] = SetLeadingZeros(drCaseSNP["SNP_SSNO"].ToString().Trim());

                        SSNNum = "xxx" + "-" + "xx" + "-" + drCaseSNP["SNP_SSNO"].ToString().Trim().Substring(5, 4);
                    }
                    PdfPCell SSN = new PdfPCell(new Phrase(SSNNum, TableFont));
                    SSN.HorizontalAlignment = Element.ALIGN_CENTER;
                    SSN.FixedHeight = 15f;
                    SSN.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(SSN);

                    string DOB = string.Empty;
                    if (!string.IsNullOrEmpty(drCaseSNP["SNP_ALT_BDATE"].ToString()))
                    {
                        DOB = CommonFunctions.ChangeDateFormat(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(), Consts.DateTimeFormats.DateSaveFormat, Consts.DateTimeFormats.DateDisplayFormat);
                    }
                    PdfPCell BirthDate = new PdfPCell(new Phrase(LookupDataAccess.Getdate(drCaseSNP["SNP_ALT_BDATE"].ToString().Trim()), TableFont));
                    BirthDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    BirthDate.FixedHeight = 15f;
                    BirthDate.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(BirthDate);

                    if (drCaseSNP["SNP_AGE"].ToString().Trim() != "0")
                    {
                        PdfPCell Age = new PdfPCell(new Phrase(drCaseSNP["SNP_AGE"].ToString().Trim(), TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }
                    else
                    {
                        PdfPCell Age = new PdfPCell(new Phrase("", TableFont));
                        Age.HorizontalAlignment = Element.ALIGN_CENTER;
                        Age.FixedHeight = 15f;
                        Age.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Age);
                    }

                    PdfPCell Sex = new PdfPCell(new Phrase(drCaseSNP["SNP_SEX"].ToString().Trim(), TableFont));
                    Sex.HorizontalAlignment = Element.ALIGN_CENTER;
                    Sex.FixedHeight = 15f;
                    Sex.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Sex);

                    string Etinic = null;
                    DataSet dsEtinic = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.ETHNICODES);
                    DataTable dtEtinic = dsEtinic.Tables[0];
                    foreach (DataRow drEtinic in dtEtinic.Rows)
                    {
                        if (drCaseSNP["SNP_ETHNIC"].ToString().Trim() == drEtinic["Code"].ToString().Trim())
                        {
                            Etinic = drEtinic["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Ethnic = new PdfPCell(new Phrase(Etinic, TableFont));
                    Snp_Ethnic.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Ethnic.FixedHeight = 15f;
                    Snp_Ethnic.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Ethnic);

                    string Race = null;
                    DataSet dsRace = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.RACE);
                    DataTable dtRace = dsRace.Tables[0];
                    foreach (DataRow drRace in dtRace.Rows)
                    {
                        if (drCaseSNP["SNP_RACE"].ToString().Trim() == drRace["Code"].ToString().Trim())
                        {
                            Race = drRace["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Race = new PdfPCell(new Phrase(Race, TableFont));
                    Snp_Race.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Race.FixedHeight = 15f;
                    Snp_Race.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Race);

                    string Education = null;
                    DataSet dsEducation = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.EDUCATIONCODES);
                    DataTable dtEducation = dsEducation.Tables[0];
                    foreach (DataRow drEducation in dtEducation.Rows)
                    {
                        if (drCaseSNP["SNP_EDUCATION"].ToString().Trim() == drEducation["Code"].ToString().Trim())
                        {
                            Education = drEducation["LookUpDesc"].ToString().Trim(); break;
                        }
                    }
                    PdfPCell Snp_Education = new PdfPCell(new Phrase(Education, TableFont));
                    Snp_Education.HorizontalAlignment = Element.ALIGN_LEFT;
                    Snp_Education.FixedHeight = 15f;
                    Snp_Education.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Snp_Education);

                    PdfPCell Insurance = new PdfPCell(new Phrase(drCaseSNP["SNP_HEALTH_INS"].ToString().Trim(), TableFont));
                    Insurance.HorizontalAlignment = Element.ALIGN_CENTER;
                    Insurance.FixedHeight = 15f;
                    Insurance.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Insurance);

                    if (Roma_Switch == "Y")
                    {
                        string Vet = string.Empty;
                        if (drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim() == "V") Vet = "Y"; else if (!string.IsNullOrEmpty(drCaseSNP["SNP_MILITARY_STATUS"].ToString().Trim())) Vet = "N";
                        PdfPCell Vetran = new PdfPCell(new Phrase(Vet, TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }
                    else
                    {
                        PdfPCell Vetran = new PdfPCell(new Phrase(drCaseSNP["SNP_VET"].ToString().Trim(), TableFont));
                        Vetran.HorizontalAlignment = Element.ALIGN_CENTER;
                        Vetran.FixedHeight = 15f;
                        Vetran.Border = iTextSharp.text.Rectangle.BOX;
                        Snp_Table.AddCell(Vetran);
                    }

                    PdfPCell FoodStamps1 = new PdfPCell(new Phrase(drCaseSNP["SNP_FOOD_STAMPS"].ToString().Trim(), TableFont));
                    FoodStamps1.HorizontalAlignment = Element.ALIGN_CENTER;
                    FoodStamps1.FixedHeight = 15f;
                    FoodStamps1.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(FoodStamps1);

                    string AGYDisable = null;
                    DataSet dsDisable = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DISABLED);
                    DataTable dtDisable = dsDisable.Tables[0];
                    foreach (DataRow drDisable in dtDisable.Rows)
                    {
                        if (drCaseSNP["SNP_DISABLE"].ToString().Trim() == drDisable["Code"].ToString().Trim())
                            AGYDisable = drDisable["LookUpDesc"].ToString().Trim();
                    }
                    PdfPCell Disabled = new PdfPCell(new Phrase(AGYDisable, TableFont));
                    Disabled.HorizontalAlignment = Element.ALIGN_LEFT;
                    Disabled.FixedHeight = 15f;
                    Disabled.Border = iTextSharp.text.Rectangle.BOX;
                    Snp_Table.AddCell(Disabled);

                    Tbl_Count++;
                    if (Tbl_Count >= 7)
                        break;
                }
            }

            int Len_Var = 77 - Tbl_Count * 13;
            for (int j = 0; j <= Len_Var; ++j)  //120
            {
                PdfPCell SpaceCell = new PdfPCell(new Phrase(" ", TableFont));
                SpaceCell.HorizontalAlignment = Element.ALIGN_CENTER;
                SpaceCell.FixedHeight = 15f;
                SpaceCell.Border = iTextSharp.text.Rectangle.BOX;
                Snp_Table.AddCell(SpaceCell);
            }

            PdfPCell HSSnp = new PdfPCell(new Phrase("HOUSING/ENERGY DATA ", TblFontBoldS));
            HSSnp.HorizontalAlignment = Element.ALIGN_LEFT;
            HSSnp.FixedHeight = 15f;
            HSSnp.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(HSSnp);

            PdfPCell HSSnp1 = new PdfPCell(new Phrase("Note: Verification of rent or mortgage payment (if applicable) may be required.  Verification of your current bill is needed if you heat with electricity or natural gas.", TblFontBoldS));
            HSSnp1.HorizontalAlignment = Element.ALIGN_LEFT;
            HSSnp1.FixedHeight = 15f;
            HSSnp1.Colspan = 12;
            HSSnp1.Border = iTextSharp.text.Rectangle.BOX;
            Snp_Table.AddCell(HSSnp1);



            document.Add(head);
            document.Add(Snp_Table);
            //document.NewPage();

            ////End Of SNP details Table
            #endregion

            X_Pos = 15; Y_Pos = 260;//Y_Pos = 270;
            cb.BeginText();
            cb.SetFontAndSize(bf_helv, 10);
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you own a home ?", X_Pos, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(120, Y_Pos + 8, 128, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "ThirdYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (drCaseMST["MST_HOUSING"].ToString().Trim() == "A")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 130, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(150, Y_Pos + 8, 158, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "ThirdNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (drCaseMST["MST_HOUSING"].ToString().Trim() != "A")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 160, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you pay a mortgage?", 220, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "FourthYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (float.Parse(drCaseMST["MST_EXP_RENT"].ToString().Trim()) > 0 && drCaseMST["MST_HOUSING"].ToString().Trim() == "A")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "FourthNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (float.Parse(drCaseMST["MST_EXP_RENT"].ToString().Trim()) <= 0 && drCaseMST["MST_HOUSING"].ToString().Trim() == "A")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);


            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If Yes, what is your monthly mortgage payment?", 490, Y_Pos, 0);
            if (drCaseMST["MST_HOUSING"].ToString().Trim() == "A")
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(drCaseMST["MST_EXP_RENT"].ToString().Trim(), Timesline), 700, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("____________", Times), 700, Y_Pos, 0);


            X_Pos = 15; Y_Pos -= 15;

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you rent ?", X_Pos, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(120, Y_Pos + 8, 128, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "FifthYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (drCaseMST["MST_HOUSING"].ToString().Trim() == "B")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 130, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(150, Y_Pos + 8, 158, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "FifthNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            if (drCaseMST["MST_HOUSING"].ToString().Trim() != "B")
                checkbox.Checked = true;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 160, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you live in subsidized rental housing?", 220, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(390, Y_Pos + 8, 398, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SixthYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 400, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(420, Y_Pos + 8, 428, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SixthNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 430, Y_Pos, 0);


            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Monthly Rent Payment (your portion)", 490, Y_Pos, 0);
            if (drCaseMST["MST_HOUSING"].ToString().Trim() == "B")
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(drCaseMST["MST_EXP_RENT"].ToString().Trim(), Timesline), 660, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("____________", Times), 660, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Landlord or Agent Name or Company Name", X_Pos, Y_Pos, 0);
            if (dtLandlorddet.Rows.Count > 0)
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(dtLandlorddet.Rows[0]["LLR_FIRST_NAME"].ToString().Trim() + "  " + dtLandlorddet.Rows[0]["LLR_LAST_NAME"].ToString().Trim(), Timesline), 220, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("_________________________________________________", Times), 220, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Landlord Address", X_Pos, Y_Pos, 0);
            if (dtLandlorddet.Rows.Count > 0)
            {
                string Zip = string.Empty; string Apart = string.Empty; string Suffix = string.Empty;
                if (!string.IsNullOrEmpty(dtLandlorddet.Rows[0]["LLR_APT"].ToString().Trim()))
                    Apart = dtLandlorddet.Rows[0]["LLR_APT"].ToString().Trim() + ",";
                if (!string.IsNullOrEmpty(dtLandlorddet.Rows[0]["LLR_SUFFIX"].ToString().Trim()))
                    Suffix = dtLandlorddet.Rows[0]["LLR_SUFFIX"].ToString().Trim();
                if (dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim() != "0" || !string.IsNullOrEmpty(dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim()))
                    Zip = "00000".Substring(0, 5 - dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim().Length) + dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim();
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(dtLandlorddet.Rows[0]["LLR_HN"].ToString().Trim() + "  " + dtLandlorddet.Rows[0]["LLR_STREET"].ToString().Trim() + " " + Suffix + ", " + Apart + dtLandlorddet.Rows[0]["LLR_CITY"].ToString().Trim() + ", " + dtLandlorddet.Rows[0]["LLR_STATE"].ToString().Trim() + "  " + Zip, Timesline), 100, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("_________________________________________________", Times), 100, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Landlord Telephone", 490, Y_Pos, 0);
            if (dtLandlorddet.Rows.Count > 0)
            {
                if (!string.IsNullOrEmpty(dtLandlorddet.Rows[0]["LLR_PHONE"].ToString().Trim()))
                {
                    MaskedTextBox mskCell = new MaskedTextBox();
                    mskCell.Mask = "(000)000-0000";
                    mskCell.Text = dtLandlorddet.Rows[0]["LLR_PHONE"].ToString().Trim();
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskCell.Text, Timesline), 600, Y_Pos, 0);
                }
                else
                    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("_______________", Times), 600, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("_______________", Times), 600, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Are you a roomer in someone else's home?", X_Pos, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(200, Y_Pos + 8, 208, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SeventhYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 210, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(230, Y_Pos + 8, 238, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "SeventhNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 240, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Do you live rent-free in someone else's home?", 300, Y_Pos, 0);

            rect = new iTextSharp.text.Rectangle(520, Y_Pos + 8, 528, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "EigthYes", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 530, Y_Pos, 0);
            rect = new iTextSharp.text.Rectangle(550, Y_Pos + 8, 558, Y_Pos);
            checkbox = new RadioCheckField(writer, rect, "EigthNo", "On");
            checkbox.BorderColor = new GrayColor(0.3f);
            checkbox.Rotation = 90;
            SField = checkbox.CheckField;
            writer.AddAnnotation(SField);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 560, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "If you answer yes to either of these 2 questions,STOP, because the head of the household must complete the application", X_Pos, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Type of Dwelling:", X_Pos, Y_Pos, 0);
            //DataSet dsdwelling = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DWELLINGTYPE);
            //DataTable dtswelling = dsdwelling.Tables[0];
            PdfFormField Field;
            X_Pos = 100;
            string CheckTitle = string.Empty;
            List<CommonEntity> DwellingList = new List<CommonEntity>();
            DwellingList.Add(new CommonEntity("2", "Single Family"));
            DwellingList.Add(new CommonEntity("3", "Two Family"));
            DwellingList.Add(new CommonEntity("4", "3-5 Units"));
            DwellingList.Add(new CommonEntity("5", "6+ Units"));
            DwellingList.Add(new CommonEntity("1", "Mobile Home"));
            DwellingList.Add(new CommonEntity("0", "In-Law Apt."));
            DwellingList.Add(new CommonEntity("0", "Other(Specify)"));
            if (DwellingList.Count > 0)
            {
                foreach (CommonEntity drdwelling in DwellingList)
                {
                    //if (drdwelling["Active"].ToString() == "Y" ||
                    //    (drdwelling["Active"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_DWELLING"].ToString().Trim()) && drCaseMST["MST_DWELLING"].ToString().Trim() == drdwelling["Code"].ToString().Trim()))
                    //{
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drdwelling.Desc.ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_DWELLING"].ToString().Trim() == drdwelling.Code.ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drdwelling.Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 100;
                        Y_Pos -= 13;
                    }
                    //}
                }
            }



            Y_Pos -= 15; X_Pos = 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Method of Paying Heat:", X_Pos, Y_Pos, 0);
            //DataSet dsdwelling = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DWELLINGTYPE);
            //DataTable dtswelling = dsdwelling.Tables[0];
            X_Pos = 130;
            List<CommonEntity> PayingHeat = new List<CommonEntity>();
            PayingHeat.Add(new CommonEntity("2", "Heat Included in rent"));
            PayingHeat.Add(new CommonEntity("1", "Payment to vendor"));
            if (PayingHeat.Count > 0)
            {
                bool IsFalse = false;
                if (drCaseMST["MST_HEAT_INC_RENT"].ToString().Trim() == "2")
                    IsFalse = true;
                foreach (CommonEntity drPayingHeat in PayingHeat)
                {
                    //if (drdwelling["Active"].ToString() == "Y" ||
                    //    (drdwelling["Active"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_DWELLING"].ToString().Trim()) && drCaseMST["MST_DWELLING"].ToString().Trim() == drdwelling["Code"].ToString().Trim()))
                    //{

                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drPayingHeat.Desc.ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (IsFalse && drPayingHeat.Code.ToString().Trim() == "2")
                        checkbox.Checked = true;
                    else if ((!IsFalse) && drPayingHeat.Code.ToString().Trim() == "1")
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drPayingHeat.Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 100;
                        Y_Pos -= 13;
                    }
                    //}
                }

                //Y_Pos -= 15;
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Is your fuel tank shared with another household?", 350, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(580, Y_Pos + 8, 588, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "NinthYes", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), 590, Y_Pos, 0);
                rect = new iTextSharp.text.Rectangle(610, Y_Pos + 8, 618, Y_Pos);
                checkbox = new RadioCheckField(writer, rect, "NinthNo", "On");
                checkbox.BorderColor = new GrayColor(0.3f);
                checkbox.Rotation = 90;
                SField = checkbox.CheckField;
                writer.AddAnnotation(SField);
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), 620, Y_Pos, 0);

            }


            Y_Pos -= 15; X_Pos = 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "What is your primary heating source?", X_Pos, Y_Pos, 0);
            //DataSet dsdwelling = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.DWELLINGTYPE);
            //DataTable dtswelling = dsdwelling.Tables[0];
            X_Pos = 180;
            List<CommonEntity> HeatofSource = new List<CommonEntity>();
            HeatofSource.Add(new CommonEntity("01", "Oil"));
            HeatofSource.Add(new CommonEntity("02", "Natural Gas"));
            HeatofSource.Add(new CommonEntity("03", "Propane"));
            HeatofSource.Add(new CommonEntity("04", "Electric"));
            HeatofSource.Add(new CommonEntity("05", "Coal"));
            HeatofSource.Add(new CommonEntity("06", "Wood"));
            HeatofSource.Add(new CommonEntity("07", "Kerosene"));
            HeatofSource.Add(new CommonEntity("09", "Other( Specify) __________"));
            if (HeatofSource.Count > 0)
            {
                foreach (CommonEntity drHeat in HeatofSource)
                {
                    //if (drdwelling["Active"].ToString() == "Y" ||
                    //    (drdwelling["Active"].ToString() == "N" && !string.IsNullOrEmpty(drCaseMST["MST_DWELLING"].ToString().Trim()) && drCaseMST["MST_DWELLING"].ToString().Trim() == drdwelling["Code"].ToString().Trim()))
                    //{
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drHeat.Desc.ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    checkbox.Rotation = 90;
                    if (drCaseMST["MST_SOURCE"].ToString().Trim() == drHeat.Code.ToString().Trim())
                        checkbox.Checked = true;
                    Field = checkbox.CheckField;
                    writer.AddAnnotation(Field);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drHeat.Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 600)
                    {
                        X_Pos = 180;
                        Y_Pos -= 13;
                    }
                    //}
                }
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other( Specify) __________", Times), X_Pos + 10, Y_Pos, 0);
            }

            string Primary_vendor = string.Empty; string Primary_Account = string.Empty; string Primary_VAddress = string.Empty;
            string Electri_Vendor = string.Empty; string Elec_acc = string.Empty; string Elec_Acc_Name = string.Empty;string Primary_acc_Name = string.Empty;
            if (LiheapVDet.Count > 0)
            {
                foreach (LiheApvEntity Entity in LiheapVDet)
                {
                    if (Entity.LPV_PRIMARY_CODE == "P")
                    {
                        CASEVDDEntity VddList = CasevddList.Find(u => u.Code.Equals(Entity.LPV_VENDOR));
                        if (VddList != null)
                        {
                            Primary_vendor = VddList.Name.Trim(); Primary_Account = Entity.LPV_ACCOUNT_NO.Trim();
                            Primary_VAddress = VddList.Addr1.Trim() + "  " + VddList.City.Trim() + "  " + VddList.State.Trim() + "  " + VddList.Zip.Trim();
                            Primary_acc_Name = LookupDataAccess.GetMemberName(Entity.LPV_BILL_FNAME, string.Empty, Entity.LPV_BILL_LNAME, BaseForm.BaseHierarchyCnFormat);
                        }
                    }
                    if (Entity.LPV_PRIMARY_CODE == "S" && Entity.LPV_PAYMENT_FOR == "04")
                    {
                        CASEVDDEntity VddList = CasevddList.Find(u => u.Code.Equals(Entity.LPV_VENDOR));
                        if (VddList != null)
                        {
                            Electri_Vendor = VddList.Name.Trim(); Elec_acc = Entity.LPV_ACCOUNT_NO.Trim();
                            //Elec_Acc_Name = VddList.Name_On_Checks.Trim();  commented on 01/28/2020 by sudheer
                            Elec_Acc_Name = LookupDataAccess.GetMemberName(Entity.LPV_BILL_FNAME, string.Empty, Entity.LPV_BILL_LNAME, BaseForm.BaseHierarchyCnFormat);
                        }
                    }
                }
            }


            Y_Pos -= 15; X_Pos = 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "What is the name of your primary heating source fuel dealer or utility company?", X_Pos, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Primary_vendor.Trim()))
            {
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Primary_vendor, Timesline), 350, Y_Pos, 0);
            }
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("_________________________________________________", Times), 350, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Address:", X_Pos, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Primary_VAddress.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Primary_VAddress, Timesline), 60, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("__________________________________________", Times), 60, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Name on the Account:", 330, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Elec_Acc_Name.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Primary_acc_Name, Timesline), 420, Y_Pos, 0);
            //if (dtLandlorddet.Rows.Count > 0)
            //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(dtLandlorddet.Rows[0]["LLR_HN"].ToString().Trim() + dtLandlorddet.Rows[0]["LLR_STREET"].ToString().Trim() + "," + dtLandlorddet.Rows[0]["LLR_APT"].ToString().Trim() + "," + dtLandlorddet.Rows[0]["LLR_CITY"].ToString().Trim() + "," + dtLandlorddet.Rows[0]["LLR_STATE"].ToString().Trim() + "00000".Substring(0, 5 - dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim().Length) + dtLandlorddet.Rows[0]["LLR_ZIP"].ToString().Trim(), Timesline), 100, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("________________________________", Times), 420, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Acct. No. :", 580, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Primary_Account.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Primary_Account, Timesline), 640, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("____________________", Times), 640, Y_Pos, 0);

            Y_Pos -= 15;
            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Electric Company Name:", X_Pos, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Electri_Vendor.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Electri_Vendor, Timesline), 120, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("__________________________________________", Times), 120, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Name on the Account:", 330, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Elec_Acc_Name.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Elec_Acc_Name, Timesline), 420, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("________________________________", Times), 420, Y_Pos, 0);

            cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Acct. No. :", 580, Y_Pos, 0);
            if (!string.IsNullOrEmpty(Elec_acc.Trim()))
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase(Elec_acc, Timesline), 640, Y_Pos, 0);
            else
                ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("____________________", Times), 640, Y_Pos, 0);

            X_Pos = 750; Y_Pos = 12;
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Page 1", TblFontItalic), X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TblFontItalic), 15, Y_Pos, 0);
            //"Date Printed: " + DateTime.Now.ToString()

            cb.EndText();

            document.NewPage();

            List<CommonEntity> IncomeTypes = new List<CommonEntity>();
            IncomeTypes.Add(new CommonEntity("1", "Employment Wages"));
            IncomeTypes.Add(new CommonEntity("2", "Public Asst.(TANF,SAGA,State Supp.,etc.)"));
            IncomeTypes.Add(new CommonEntity("3", "Child Support/Alimony"));
            IncomeTypes.Add(new CommonEntity("4", "Veterans Benefits"));
            IncomeTypes.Add(new CommonEntity("5", "Unemployment Compensation"));
            IncomeTypes.Add(new CommonEntity("6", "SSI"));
            IncomeTypes.Add(new CommonEntity("7", "Social Security Benefits"));
            IncomeTypes.Add(new CommonEntity("8", "Worker's Comp./Dis. Insurance"));
            IncomeTypes.Add(new CommonEntity("9", "Retirement/Pensions/Annuities"));
            IncomeTypes.Add(new CommonEntity("10", "Rental Income"));
            IncomeTypes.Add(new CommonEntity("11", "Self-Employment"));
            IncomeTypes.Add(new CommonEntity("12", "Cont. from Friends/Relatives"));
            IncomeTypes.Add(new CommonEntity("13", "Zero Income"));
            IncomeTypes.Add(new CommonEntity("14", "Other"));

            ////cb.BeginText();
            ////X_Pos = 400; Y_Pos = 580;
            ////cb.SetFontAndSize(bf_helv, 13);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Header_Desc, X_Pos, Y_Pos, 0);

            ////cb.SetFontAndSize(bf_helv, 9);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant No: ", 30, Y_Pos - 15, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, Timesline), 30 + 72, Y_Pos - 15, 0);

            ////cb.SetFontAndSize(bf_helv, 13);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, Form_Selection, X_Pos, Y_Pos - 15, 0);
            ////cb.SetFontAndSize(bf_helv, 9);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Date Printed: ", 740, Y_Pos - 15, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.ToShortDateString()), Times), 780, Y_Pos - 15, 0);

            ////X_Pos = 30; Y_Pos -= 30;
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Applicant Name   ", X_Pos, Y_Pos, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Timesline), X_Pos + 72, Y_Pos, 0);

            ////cb.ShowTextAligned(PdfContentByte.ALIGN_RIGHT, "Application Date: ", 740, Y_Pos, 0);
            ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(LookupDataAccess.Getdate(drCaseMST["MST_INTAKE_DATE"].ToString().Trim()), Timesline), 780, Y_Pos, 0);

            ////cb.EndText();

            //iTextSharp.text.Font HeaderFontBold = new iTextSharp.text.Font(bf_helv, 13);
            ////start the Income details of a Family to the table

            ////PdfPTable SpaceTable = new PdfPTable(1);
            ////SpaceTable.TotalWidth = 750f;
            ////SpaceTable.WidthPercentage = 100;
            ////SpaceTable.LockedWidth = true;
            ////float[] SpaceTablewidths = new float[] { 80f };
            ////SpaceTable.SetWidths(SpaceTablewidths);
            ////SpaceTable.HorizontalAlignment = Element.ALIGN_CENTER;
            ////SpaceTable.SpacingAfter = 70f;

            #region Income Table

            PdfPTable IncomeTable = new PdfPTable(3);
            IncomeTable.TotalWidth = 750f;
            IncomeTable.WidthPercentage = 100;
            IncomeTable.LockedWidth = true;
            float[] Incomewidths = new float[] { 80f, 100f, 120f };
            IncomeTable.SetWidths(Incomewidths);
            IncomeTable.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeTable.SpacingBefore = 100f;

            PdfPTable nestedTable = new PdfPTable(2);
            nestedTable.WidthPercentage = 100;
            //table.LockedWidth = true;
            float[] Nestedwidths = new float[] { 25f, 100f };
            nestedTable.SetWidths(Nestedwidths);
            nestedTable.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPCell nestedHeader = new PdfPCell(new Phrase("Financial Data", TblFontBold));
            nestedHeader.HorizontalAlignment = Element.ALIGN_LEFT;
            nestedHeader.Border = iTextSharp.text.Rectangle.BOX;
            nestedTable.AddCell(nestedHeader);

            PdfPCell nestedHeader1 = new PdfPCell(new Phrase("Note: Verification of Income (including benefits) is required", TblFontBold));
            nestedHeader1.HorizontalAlignment = Element.ALIGN_LEFT;
            nestedHeader1.Border = iTextSharp.text.Rectangle.BOX;
            nestedTable.AddCell(nestedHeader1);


            PdfPCell IncomeCell = new PdfPCell(nestedTable);
            IncomeCell.Colspan = 2;
            IncomeCell.HorizontalAlignment = Element.ALIGN_CENTER;
            IncomeCell.FixedHeight = 15f;
            IncomeCell.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeCell);

            PdfPCell IncomeCell1 = new PdfPCell(new Phrase("      APPLICANT'S NAME: " + BaseForm.BaseApplicationName.Trim(), Times));
            //IncomeCell1.Colspan = 2;
            IncomeCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell1.FixedHeight = 15f;
            IncomeCell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(IncomeCell1);

            PdfPCell IncomeCell2 = new PdfPCell(new Phrase("INCOME SOURCES", TblFontBold));
            //IncomeCell1.Colspan = 2;
            IncomeCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell2.FixedHeight = 15f;
            IncomeCell2.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeCell2);

            PdfPCell IncomeCell3 = new PdfPCell(new Phrase("INCOME FREQUENCY(weekly, bi-weekly, monthly, etc.)", TblFontBold));
            //IncomeCell1.Colspan = 2;
            IncomeCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell3.FixedHeight = 15f;
            IncomeCell3.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeCell3);

            PdfPCell IncomeCell4 = new PdfPCell(new Phrase("HOUSEHOLD MEMBER(S) RECEIVING INCOME", TblFontBold));
            //IncomeCell1.Colspan = 2;
            IncomeCell4.HorizontalAlignment = Element.ALIGN_LEFT;
            IncomeCell4.FixedHeight = 15f;
            IncomeCell4.Border = iTextSharp.text.Rectangle.BOX;
            IncomeTable.AddCell(IncomeCell4);

            if (IncomeTypes.Count > 0)
            {
                foreach (CommonEntity Entity in IncomeTypes)
                {
                    string IncType = string.Empty;
                    switch (Entity.Code.Trim())
                    {
                        case "1": IncType = "B"; break;
                        case "2": IncType = "I AA"; break;
                        case "3": IncType = "Z Y A"; break;
                        case "4": IncType = "O EE FF"; break;
                        case "5": IncType = "N"; break;
                        case "6": IncType = "M"; break;
                        case "7": IncType = "L"; break;
                        case "8": IncType = "P CC"; break;
                        case "9": IncType = "H DD" ; break;
                        case "10": IncType = "J"; break;
                        case "11": IncType = "S"; break;
                        case "12": IncType = "T"; break;
                        case "13": IncType = "R"; break;
                        case "14": IncType = "W V U C D E F Q G K X BB"; break;

                    }

                    PdfPCell IncomeSource = new PdfPCell(new Phrase(Entity.Desc.Trim(), TableFont));
                    IncomeSource.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeSource.FixedHeight = 15f;
                    IncomeSource.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeSource);

                    string IncFreq = string.Empty; string MemName = string.Empty;
                    if (dtCaseIncome.Rows.Count > 0)
                    {
                        string[] strIncomeTypes = IncType.Split(' ');
                        foreach (DataRow dr in dtCaseIncome.Rows)
                        {
                            //if (IncType.Length > 1)
                            //{
                            if (!string.IsNullOrEmpty(dr["INCOME_TYPE"].ToString().Trim()))
                            {
                                foreach (string incomeType in strIncomeTypes)
                                {
                                    if (dr["INCOME_TYPE"].ToString().Trim() == incomeType)
                                    {
                                        IncFreq += LookupDataAccess.ShowIncomeInterval(dr["INCOME_INTERVAL"].ToString().Trim()) + ",";
                                        if (!string.IsNullOrEmpty(dr["INCOME_FAMILY_SEQ"].ToString().Trim()))
                                            MemName += Get_Member_Name(dr["INCOME_FAMILY_SEQ"].ToString().Trim(), "First") + ",";
                                        break;
                                    }
                                }

                                //if (IncType.Trim().Contains(dr["INCOME_TYPE"].ToString()))
                                //{
                                //    IncFreq += LookupDataAccess.ShowIncomeInterval(dr["INCOME_INTERVAL"].ToString().Trim()) + ",";
                                //    if (!string.IsNullOrEmpty(dr["INCOME_FAMILY_SEQ"].ToString().Trim()))
                                //        MemName += Get_Member_Name(dr["INCOME_FAMILY_SEQ"].ToString().Trim(), "First") + ",";
                                //}
                            }
                            else if (string.IsNullOrEmpty(dr["INCOME_TYPE"].ToString().Trim()) && Entity.Code == "14")
                            {
                                IncFreq += LookupDataAccess.ShowIncomeInterval(dr["INCOME_INTERVAL"].ToString().Trim()) + ",";
                                if (!string.IsNullOrEmpty(dr["INCOME_FAMILY_SEQ"].ToString().Trim()))
                                    MemName += Get_Member_Name(dr["INCOME_FAMILY_SEQ"].ToString().Trim(), "First") + ",";
                            }
                            //}
                            //else
                            //{
                            //    if (IncType.Trim()== dr["INCOME_TYPE"].ToString().Trim())
                            //    {
                            //        IncFreq += LookupDataAccess.ShowIncomeInterval(dr["INCOME_INTERVAL"].ToString().Trim()) + ",";
                            //        if (!string.IsNullOrEmpty(dr["INCOME_FAMILY_SEQ"].ToString().Trim()))
                            //            MemName += Get_Member_Name(dr["INCOME_FAMILY_SEQ"].ToString().Trim(), "First") + ",";
                            //    }
                            //}

                        }
                    }
                    if (!string.IsNullOrEmpty(IncFreq.Trim()))
                        IncFreq = IncFreq.Substring(0, IncFreq.Trim().Length - 1);
                    if (!string.IsNullOrEmpty(MemName.Trim()))
                        MemName = MemName.Substring(0, MemName.Trim().Length - 1);
                    if (IncFreq.ToString().Trim() == ",") IncFreq = "";

                    PdfPCell IncomeFreq = new PdfPCell(new Phrase(IncFreq, TableFont));
                    IncomeFreq.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeFreq.FixedHeight = 15f;
                    IncomeFreq.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeFreq);

                    PdfPCell IncomeMem = new PdfPCell(new Phrase(MemName, TableFont));
                    IncomeMem.HorizontalAlignment = Element.ALIGN_LEFT;
                    IncomeMem.FixedHeight = 15f;
                    IncomeMem.Border = iTextSharp.text.Rectangle.BOX;
                    IncomeTable.AddCell(IncomeMem);

                }
                PdfPCell Last = new PdfPCell(new Phrase("Application Certification", TblFontBold));
                Last.Colspan = 3;
                Last.HorizontalAlignment = Element.ALIGN_CENTER;
                Last.FixedHeight = 15f;
                Last.Border = iTextSharp.text.Rectangle.BOX;
                IncomeTable.AddCell(Last);
            }
            PdfPCell Space = new PdfPCell(new Phrase("", TblFontBold));
            Space.Colspan = 3;
            Space.HorizontalAlignment = Element.ALIGN_CENTER;
            Space.FixedHeight = 10f;
            Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space);

            PdfPCell Para1 = new PdfPCell(new Phrase("I have read this form, or it has been read to me in a language that I understand. I understand what is in the form. As the applicant for my household, I swear that all statements made by me on this application are true, correct and complete to the best of my knowledge. I understand that only United Stated citizens or qualified aliens may be eligible to receive federal energy assistance benefits.", TableFont));
            Para1.Colspan = 3;
            Para1.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Para1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Para1);

            PdfPCell Space1 = new PdfPCell(new Phrase("", Times));
            Space1.Colspan = 3;
            Space1.HorizontalAlignment = Element.ALIGN_CENTER;
            Space1.FixedHeight = 10f;
            Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space1);

            PdfPCell Para2 = new PdfPCell(new Phrase("I agree to provide to the Department of Social Services, or to its energy assistance contractor, the community action energy, any information including wages, asset information and bills in my name as the head of household or of a household member of majority status, which is necessary to determine my household's eligibility. I also agree that information included in this application may be provided to the State Department of Energy and Environmental Protection for the purpose of determining eligibility for weatherization services. I further understand that the community action agency or the State of Connecticut may verify or confirm any information required to determine my eligibility for this program. I agree that the information in this application may be provided to my energy vendors, and to any programs operated by the community action agency or the State of Connecticut for which I may be eligible. I also give consent for this information to be provided to any authorized government agency. I agree for my energy vendors to provide the community action agency or the State of Connecticut information about my energy account and/or usage. I agree to hold my energy vendors harmless and release them from and against loss, demands, damages, or liabilities caused by such disclosure. I also understand that information in this application may be used for evaluations and surveys by the community action agency, State of Connecticut, authorized government agency or its contractors.", TableFont));
            Para2.Colspan = 3;
            Para2.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Para2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Para2);

            PdfPCell Space2 = new PdfPCell(new Phrase("", TblFontBold));
            Space2.Colspan = 3;
            Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            Space2.FixedHeight = 10f;
            Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space2);

            PdfPCell Para3 = new PdfPCell(new Phrase("I understand that if I am granted assistance as a result of an intentional error, misrepresentation or fraud, I must repay, in full, the amount of the assistance provided, and I will not be eligible for assistance for the rest of the program year and for the following two (2) years. I also understand that if I have knowingly given any false or incorrect information, I may be subject to prosecution and penalties for false statements and larceny, as specified in sections 53a-122, 53a-123, and 53a-157b of the Connecticut General Statutes. These penalties may include imprisonment. I may also be subject to prosecution and penalties provided under federal law.", TableFont));
            Para3.Colspan = 3;
            Para3.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Para3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Para3);

            PdfPCell Space3 = new PdfPCell(new Phrase("", TblFontBold));
            Space3.Colspan = 3;
            Space3.HorizontalAlignment = Element.ALIGN_CENTER;
            Space3.FixedHeight = 10f;
            Space3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space3);

            PdfPCell Para4 = new PdfPCell(new Phrase("I have received a copy of the Notice of Applicant Rights and Service Availability form.", TableFont));
            Para4.Colspan = 3;
            Para4.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Para4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Para4);

            PdfPCell Space4 = new PdfPCell(new Phrase("", TblFontBold));
            Space4.Colspan = 3;
            Space4.HorizontalAlignment = Element.ALIGN_CENTER;
            Space4.FixedHeight = 10f;
            Space4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space4);

            PdfPCell decl = new PdfPCell(new Phrase("_________________________________________", TableFont));
            decl.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl);

            PdfPCell decl1 = new PdfPCell(new Phrase("________________________________________________", TableFont));
            decl1.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl1);

            PdfPCell decl2 = new PdfPCell(new Phrase("_______________", TableFont));
            decl2.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl2);

            PdfPCell decl3 = new PdfPCell(new Phrase("     Applicant's Signature", TableFont));
            decl3.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl3);

            PdfPCell decl4 = new PdfPCell(new Phrase("   Witness/Interpreter/Legal Representative", TableFont));
            decl4.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl4);

            PdfPCell decl5 = new PdfPCell(new Phrase("   Date", TableFont));
            decl5.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            decl5.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(decl5);

            PdfPCell Space5 = new PdfPCell(new Phrase("", TblFontBold));
            Space5.Colspan = 3;
            Space5.HorizontalAlignment = Element.ALIGN_CENTER;
            Space5.FixedHeight = 10f;
            Space5.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space5);

            PdfPCell Intake1 = new PdfPCell(new Phrase("_________________________________________", TableFont));
            Intake1.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake1);

            PdfPCell Intake2 = new PdfPCell(new Phrase("________________________________________________", TableFont));
            Intake2.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake2);

            PdfPCell Intake3 = new PdfPCell(new Phrase("_______________", TableFont));
            Intake3.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake3);

            PdfPCell Intake4 = new PdfPCell(new Phrase("     Intake Worker's Signature", TableFont));
            Intake4.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake4);

            PdfPCell Intake5 = new PdfPCell(new Phrase("   Intake Site", TableFont));
            Intake5.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake5.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake5);

            PdfPCell Intake6 = new PdfPCell(new Phrase("   Date", TableFont));
            Intake6.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Intake6.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Intake6);

            PdfPCell Space6 = new PdfPCell(new Phrase("", TblFontBold));
            Space6.Colspan = 3;
            Space6.HorizontalAlignment = Element.ALIGN_CENTER;
            Space6.FixedHeight = 10f;
            Space6.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space6);

            //PdfPTable nestedTable1 = new PdfPTable(3);
            //nestedTable1.WidthPercentage = 100;
            ////table.LockedWidth = true;
            //float[] Nestedwidths1 = new float[] { 30f, 13f,  };
            //nestedTable1.SetWidths(Nestedwidths1);
            //nestedTable1.HorizontalAlignment = Element.ALIGN_LEFT;

            //PdfPCell BG2 = new PdfPCell(new Phrase(""I swear or affirm that the certifications given are true, correct and accurate", TableFont));
            //BG2.HorizontalAlignment = Element.ALIGN_LEFT;
            //BG2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //nestedTable.AddCell(BG2);

            //PdfPCell BG3 = new PdfPCell(new Phrase(Entity.BDA_OLD_BUDGET.Trim(), TableFont));
            //BG3.HorizontalAlignment = Element.ALIGN_RIGHT;
            //BG3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //nestedTable.AddCell(BG3);

            //PdfPCell BG4 = new PdfPCell(new Phrase(" After:", TableFont));
            //BG4.HorizontalAlignment = Element.ALIGN_LEFT;
            //BG4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //nestedTable.AddCell(BG4);

            //PdfPCell BG5 = new PdfPCell(new Phrase(Entity.BDA_NEW_BUDGET.Trim(), TableFont));
            //BG5.HorizontalAlignment = Element.ALIGN_RIGHT;
            //BG5.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //nestedTable.AddCell(BG5);

            //PdfPCell NestedLoop = new PdfPCell(nestedTable);
            //NestedLoop.Colspan = 3;
            //NestedLoop.Padding = 0f;
            //NestedLoop.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            //IncomeTable.AddCell(NestedLoop);

            var phrase = new Phrase();
            phrase.Add(new Chunk("I swear or affirm that the certifications given are true, correct and accurate ", TableFont));
            phrase.Add(new Chunk("as stated and/or supplied by the applicant", TblFontBoldS));
            phrase.Add(new Chunk(" and understand that the provision of false, fraudulent or misleading information is punishable by state law.", TableFont));

            PdfPCell ss = new PdfPCell(phrase);
            ss.HorizontalAlignment = Element.ALIGN_LEFT;
            ss.Colspan = 3;
            ss.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(ss);

            //PdfPCell ss = new PdfPCell(new Phrase("I swear or affirm that the certifications given are true, correct and accurate as stated and/or supplied by the applicant and understand that the provision of false, fraudulent or misleading information is punishable by state law.", TableFont));
            //ss.HorizontalAlignment = Element.ALIGN_LEFT;
            //ss.Colspan = 3;
            //ss.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //IncomeTable.AddCell(ss);

            PdfPCell Space7 = new PdfPCell(new Phrase("", TblFontBold));
            Space7.Colspan = 3;
            Space7.HorizontalAlignment = Element.ALIGN_CENTER;
            Space7.FixedHeight = 8f;
            Space7.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space7);

            PdfPCell Cert1 = new PdfPCell(new Phrase("_________________________________________", TableFont));
            Cert1.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Cert1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Cert1);

            PdfPCell Cert2 = new PdfPCell(new Phrase("_______________", TableFont));
            Cert2.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Cert2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Cert2);

            PdfPCell Space8 = new PdfPCell(new Phrase("", TblFontBold));
            //Space7.Colspan = 3;
            Space8.HorizontalAlignment = Element.ALIGN_CENTER;
            //Space8.FixedHeight = 10f;
            Space8.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space8);

            PdfPCell Cert3 = new PdfPCell(new Phrase("     Certifier's Signature", TableFont));
            Cert3.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Cert3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Cert3);

            PdfPCell Cert4 = new PdfPCell(new Phrase("   Date", TableFont));
            Cert4.HorizontalAlignment = Element.ALIGN_LEFT;
            //Para1.FixedHeight = 15f;
            Cert4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Cert4);

            PdfPCell Space9 = new PdfPCell(new Phrase("", TblFontBold));
            //Space7.Colspan = 3;
            Space9.HorizontalAlignment = Element.ALIGN_CENTER;
            //Space9.FixedHeight = 10f;
            Space9.Border = iTextSharp.text.Rectangle.NO_BORDER;
            IncomeTable.AddCell(Space9);



            document.Add(IncomeTable);

            #endregion

            cb.BeginText();
            X_Pos = 750; Y_Pos = 12;
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Page 2", TblFontItalic), X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Date Printed: " + DateTime.Now.ToString("g"), TblFontItalic), 15, Y_Pos, 0);
            cb.EndText();

            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }



        #endregion


        #region Pre-Assessment Form

        //private void On_PreAssApp()
        //{
        //    Random_Filename = null;

        //    PdfName = "PRASSAPP_" + BaseForm.BaseApplicationNo.ToString();//form.GetFileName();
        //    PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
        //    try
        //    {
        //        if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
        //        { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
        //    }
        //    catch (Exception ex)
        //    {
        //        CommonFunctions.MessageBoxDisplay("Error");
        //    }


        //    try
        //    {
        //        string Tmpstr = PdfName + ".pdf";
        //        if (File.Exists(Tmpstr))
        //            File.Delete(Tmpstr);
        //    }
        //    catch (Exception ex)
        //    {
        //        int length = 8;
        //        string newFileName = System.Guid.NewGuid().ToString();
        //        newFileName = newFileName.Replace("-", string.Empty);

        //        Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
        //    }

        //    if (!string.IsNullOrEmpty(Random_Filename))
        //        PdfName = Random_Filename;
        //    else
        //        PdfName += ".pdf";

        //    FileStream fs = new FileStream(PdfName, FileMode.Create);

        //    //Document document = new Document();
        //    Document document = new Document(PageSize.A4, 25, 25, 30, 30);
        //    //document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
        //    PdfWriter writer = PdfWriter.GetInstance(document, fs);
        //    document.Open();
        //    BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    BaseFont bf_timesBold = BaseFont.CreateFont("c:/windows/fonts/TIMESBD.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
        //    BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
        //    iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 10, 4);
        //    BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

        //    iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
        //    iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
        //    iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
        //    iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
        //    iTextSharp.text.Font TblFontBoldS = new iTextSharp.text.Font(1, 8, 1);
        //    iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
        //    iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 11, 4);
        //    iTextSharp.text.Font TimesBoldline = new iTextSharp.text.Font(bf_times, 11, 5);
        //    iTextSharp.text.Font TimesBoldlineHead = new iTextSharp.text.Font(bf_times, 13, 5);
        //    iTextSharp.text.Font TimesBold = new iTextSharp.text.Font(bf_times, 10, 1);
        //    cb = writer.DirectContent;

        //    //Mst Details Table
        //    DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
        //    DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

        //    //Snp details Table
        //    DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
        //    if (dsCaseSNP.Tables.Count > 0)
        //        dtCaseSNP = dsCaseSNP.Tables[0];

        //    DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
        //    DataTable dtCaseIncome = dsCaseIncome.Tables[0];

        //    DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);
        //    dtIncome = dsIncome.Tables[0];

        //    //ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

        //    string ShortName = string.Empty;
        //    DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
        //    if (ds != null && ds.Tables[0].Rows.Count > 0)
        //        ShortName = ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();

        //    AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
        //    //searchAgytabs.Tabs_Type = "00432";
        //    List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);

        //    cb.BeginText();
        //    X_Pos = 300; Y_Pos = 790;
        //    cb.SetFontAndSize(bf_timesBold, 15);
        //    cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Pre-Assessment Form", X_Pos, Y_Pos, 0);
        //    cb.EndText();
        //    X_Pos = 30; Y_Pos -= 20;
        //    //cb.SetFontAndSize(bf_timesBold, 10);
        //    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Client Name :", X_Pos, Y_Pos, 0);


        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Client Name : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Times), 105, Y_Pos, 0);

        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Phone : ", TimesBoldlineHead), 500, Y_Pos, 0);

        //    MaskedTextBox mskPhn = new MaskedTextBox();
        //    mskPhn.Mask = "(000)000-0000";
        //    mskPhn.Text = drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Times), 510, Y_Pos, 0);

        //    Y_Pos -= 25;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Income : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you receive income from any of the following sources? (Check all that apply)", Times), 80, Y_Pos, 0);

        //    Y_Pos -= 20;

        //    iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
        //    PdfAppearance[] onOff = new PdfAppearance[2];
        //    onOff[0] = cb.CreateAppearance(20, 20);
        //    onOff[0].Rectangle(1, 20, 1, 20);
        //    onOff[0].Rectangle(18, 18, 1, 1);
        //    onOff[0].Stroke();
        //    onOff[1] = cb.CreateAppearance(20, 20);
        //    onOff[1].SetRGBColorFill(255, 128, 128);
        //    onOff[1].Rectangle(18, 18, 1, 1);
        //    onOff[1].FillStroke();
        //    onOff[1].MoveTo(1, 1);
        //    onOff[1].LineTo(19, 19);
        //    onOff[1].MoveTo(1, 19);
        //    onOff[1].LineTo(19, 1);

        //    string Income_Types = string.Empty;
        //    if (dtCaseIncome.Rows.Count > 0)
        //    {
        //        foreach (DataRow dr in dtCaseIncome.Rows)
        //        {
        //            if (dr["INCOME_FAMILY_SEQ"].ToString().Trim() == drCaseMST["MST_FAMILY_SEQ"].ToString().Trim())
        //                Income_Types += dr["INCOME_TYPE"].ToString().Trim();
        //        }
        //    }

        //    RadioCheckField checkbox;
        //    PdfFormField SField; ;
        //    string CheckTitle = string.Empty;
        //    foreach (DataRow drIncome in dtIncome.Rows)
        //    {
        //        if (drIncome["Active"].ToString() == "Y")
        //        {
        //            rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //            checkbox = new RadioCheckField(writer, rect, drIncome["LookUpDesc"].ToString().Trim(), "On");
        //            checkbox.BorderColor = new GrayColor(0.3f);
        //            //checkbox.Rotation = 90;
        //            if (Income_Types.Contains(drIncome["Code"].ToString().Trim()))
        //                checkbox.Checked = true;
        //            SField = checkbox.CheckField;
        //            writer.AddAnnotation(SField);
        //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drIncome["LookUpDesc"].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //            X_Pos += 90;
        //            if (X_Pos > 560)
        //            {
        //                X_Pos = 30;
        //                Y_Pos -= 13;
        //            }
        //        }
        //    }

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Employment : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you have a Full-Time Job ?", Times), 105, Y_Pos, 0);
        //    X_Pos = 250;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "EmpYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_JOB"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "EmpNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_JOB"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);
        //    //if (ShortName == "ABCD")
        //    //{
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 60, Y_Pos + 8, X_Pos + 68, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "EmpNot", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_JOB"].ToString().Trim() == "U")//&& drCaseMST["MST_PRESS_JOB"].ToString().Trim() != "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Not Employed", Times), X_Pos + 70, Y_Pos, 0);
        //    //}
        //    //else if (ShortName != "ABCD")
        //    //{
        //    //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Employment : ", TimesBoldline), X_Pos, Y_Pos, 0);
        //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("If you have a job, is it a part-time job?", Times), 280, Y_Pos, 0);
        //    //    X_Pos = 460;
        //    //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //    //rect.Rotate();
        //    //    checkbox = new RadioCheckField(writer, rect, "PartYes", "On");
        //    //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //    //checkbox.Rotation = 90;
        //    //    if (drCaseMST["MST_PRESS_PTJOB"].ToString().Trim() == "Y")
        //    //        checkbox.Checked = true;
        //    //    SField = checkbox.CheckField;
        //    //    writer.AddAnnotation(SField);
        //    //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    //    checkbox = new RadioCheckField(writer, rect, "PartNo", "On");
        //    //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //    //checkbox.Rotation = 90;
        //    //    if (drCaseMST["MST_PRESS_PTJOB"].ToString().Trim() == "N")
        //    //        checkbox.Checked = true;
        //    //    SField = checkbox.CheckField;
        //    //    writer.AddAnnotation(SField);
        //    //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);
        //    //}

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Education : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Have you earned a High School Diploma or G.E.D.?", Times), 105, Y_Pos, 0);
        //    X_Pos = 350;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "EdYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_HSD"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "EdNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_HSD"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);

        //    //if (ShortName == "ABCD")
        //    //{
        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Can you read/write English?", Times), X_Pos, Y_Pos, 0);
        //    X_Pos = 210;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "RWYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_PRESS_RW_ENG"].ToString().Trim()))
        //        if (drCaseMST["MST_PRESS_RW_ENG"].ToString().Trim() == "Y")
        //            checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "RWNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (!string.IsNullOrEmpty(drCaseMST["MST_PRESS_RW_ENG"].ToString().Trim()))
        //        if (drCaseMST["MST_PRESS_RW_ENG"].ToString().Trim() == "N")
        //            checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);
        //    //}

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Training : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you have any skills that can get you a job?", Times), 105, Y_Pos, 0);
        //    X_Pos = 320;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "TYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_SKILLS"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "TNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_SKILLS"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Housing : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you live in affordable, safe housing?", Times), 105, Y_Pos, 0);
        //    X_Pos = 320;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "HOYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_HOUSING"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "HONo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_HOUSING"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Transportation : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("(Whichbest describes your transportation situation)", Times), 115, Y_Pos, 0);
        //    Y_Pos -= 15; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you have access to a car, public transportation or a regular ride?", Times), X_Pos, Y_Pos, 0);

        //    Y_Pos -= 15;
        //    if (AgyTabs_List.Count > 0)
        //    {
        //        List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
        //        if (TransportList.Count > 0)
        //        {
        //            foreach (AGYTABSEntity Trans in TransportList)
        //            {
        //                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //                checkbox = new RadioCheckField(writer, rect, Trans.Code_Desc.ToString().Trim(), "On");
        //                checkbox.BorderColor = new GrayColor(0.3f);
        //                //checkbox.Rotation = 90;
        //                if (drCaseMST["MST_PRESS_TRANSPORT"].ToString().Trim() == Trans.Table_Code.ToString().Trim())
        //                    checkbox.Checked = true;
        //                SField = checkbox.CheckField;
        //                writer.AddAnnotation(SField);
        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Trans.Code_Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //                X_Pos += 90;
        //                if (X_Pos > 560)
        //                {
        //                    X_Pos = 30;
        //                    Y_Pos -= 13;
        //                }
        //            }
        //        }
        //    }

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("ChildCare : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("(Check all that apply)", Times), 95, Y_Pos, 0);
        //    Y_Pos -= 15;
        //    if (AgyTabs_List.Count > 0)
        //    {
        //        List<AGYTABSEntity> Childcare = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0042"));
        //        if (Childcare.Count > 0)
        //        {
        //            foreach (AGYTABSEntity Trans in Childcare)
        //            {
        //                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //                checkbox = new RadioCheckField(writer, rect, Trans.Code_Desc.ToString().Trim(), "On");
        //                checkbox.BorderColor = new GrayColor(0.3f);
        //                //checkbox.Rotation = 90;
        //                if (drCaseMST["MST_PRESS_CHLDCARE"].ToString().Trim() == Trans.Table_Code.ToString().Trim())
        //                    checkbox.Checked = true;
        //                SField = checkbox.CheckField;
        //                writer.AddAnnotation(SField);
        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Trans.Code_Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //                X_Pos += 105;
        //                if (X_Pos > 560)
        //                {
        //                    X_Pos = 30;
        //                    Y_Pos -= 13;
        //                }
        //            }
        //        }
        //    }

        //    Y_Pos -= 20; X_Pos = 33;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("My child is enrolled in a licensed childcare of my choice that is ", Times), X_Pos, Y_Pos, 0);
        //    X_Pos = 320;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "UNSUBSIDIZED", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CCENRL"].ToString().Trim() == "A")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("UNSUBSIDIZED", Times), X_Pos + 10, Y_Pos, 0);
        //    X_Pos = 390;
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "SUBSIDIZED", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CCENRL"].ToString().Trim() == "B")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("SUBSIDIZED", Times), X_Pos + 40, Y_Pos, 0);


        //    X_Pos = 30; Y_Pos -= 20;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "A1", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CCENRL"].ToString().Trim() == "C")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("My child gets childcare from a family member or friend", Times), X_Pos + 10, Y_Pos, 0);
        //    X_Pos = 270;
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "A2", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CCENRL"].ToString().Trim() == "D")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("My child is on a waiting list for childcare", Times), X_Pos + 40, Y_Pos, 0);

        //    X_Pos = 30; Y_Pos -= 20;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "A3", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CCENRL"].ToString().Trim() == "E")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("My child is not enrolled in a childcare facility", Times), X_Pos + 10, Y_Pos, 0);

        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Eldercare : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    Y_Pos -= 20;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you care for an elderly person?", Times), X_Pos, Y_Pos, 0);
        //    X_Pos = 188;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "ELDYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_ELDRCARE"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    //X_Pos = 350;
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "ELDNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_ELDRCARE"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);

        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("If yes, do you need elder care but cannot afford it?", Times), 250, Y_Pos, 0);
        //    X_Pos = 480;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "ECYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_ECNEED"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    //X_Pos = 350;
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "ECNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_ECNEED"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);


        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Health Insurance: ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Check the box that best describes your children's health insurance.", Times), 125, Y_Pos, 0);
        //    //Y_Pos -= 20;
        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Check the box that best describes your children's health insurance.", Times), X_Pos, Y_Pos, 0);
        //    Y_Pos -= 20;
        //    if (AgyTabs_List.Count > 0)
        //    {
        //        List<AGYTABSEntity> ChldIns = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0044"));
        //        if (ChldIns.Count > 0)
        //        {
        //            foreach (AGYTABSEntity Trans in ChldIns)
        //            {
        //                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //                checkbox = new RadioCheckField(writer, rect, Trans.Code_Desc.ToString().Trim(), "On");
        //                checkbox.BorderColor = new GrayColor(0.3f);
        //                //checkbox.Rotation = 90;
        //                if (drCaseMST["MST_PRESS_CHINS"].ToString().Trim() == Trans.Table_Code.ToString().Trim())
        //                    checkbox.Checked = true;
        //                SField = checkbox.CheckField;
        //                writer.AddAnnotation(SField);
        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Trans.Code_Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //                X_Pos += 140;
        //                //if (X_Pos > 560)
        //                //{
        //                //    X_Pos = 30;
        //                //    Y_Pos -= 13;
        //                //}
        //            }
        //        }
        //    }


        //    Y_Pos -= 20; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Check the box that best describes your health insurance.", Times), 120, Y_Pos, 0);
        //    Y_Pos -= 20;
        //    if (AgyTabs_List.Count > 0)
        //    {
        //        List<AGYTABSEntity> ChldIns = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0045"));
        //        if (ChldIns.Count > 0)
        //        {
        //            foreach (AGYTABSEntity Trans in ChldIns)
        //            {
        //                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //                checkbox = new RadioCheckField(writer, rect, Trans.Code_Desc.ToString().Trim(), "On");
        //                checkbox.BorderColor = new GrayColor(0.3f);
        //                //checkbox.Rotation = 90;
        //                if (drCaseMST["MST_PRESS_AHINS"].ToString().Trim() == Trans.Table_Code.ToString().Trim())
        //                    checkbox.Checked = true;
        //                SField = checkbox.CheckField;
        //                writer.AddAnnotation(SField);
        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Trans.Code_Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //                X_Pos += 175;
        //                if (X_Pos > 560)
        //                {
        //                    X_Pos = 30;
        //                    Y_Pos -= 13;
        //                }
        //            }
        //        }
        //    }

        //    string DssorDHS = "DSS";
        //    if (ShortName == "UETHDA") DssorDHS = "DHS";

        //    //if (ShortName == "ABCD")
        //    //{
        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DssorDHS + " Programs: ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Are you currently receiving " + DssorDHS + " Services?", Times), 120, Y_Pos, 0);
        //    X_Pos = 320;
        //    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //    //rect.Rotate();
        //    checkbox = new RadioCheckField(writer, rect, "DSSYes", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CURR_DSS"].ToString().Trim() == "Y")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("Yes", Times), X_Pos + 10, Y_Pos, 0);
        //    //X_Pos = 350;
        //    rect = new iTextSharp.text.Rectangle(X_Pos + 30, Y_Pos + 8, X_Pos + 38, Y_Pos);
        //    checkbox = new RadioCheckField(writer, rect, "DSSNo", "On");
        //    checkbox.BorderColor = new GrayColor(0.3f);
        //    //checkbox.Rotation = 90;
        //    if (drCaseMST["MST_PRESS_CURR_DSS"].ToString().Trim() == "N")
        //        checkbox.Checked = true;
        //    SField = checkbox.CheckField;
        //    writer.AddAnnotation(SField);
        //    ColumnText.ShowTextAligned(cb, Element.ALIGN_LEFT, new Phrase("No", Times), X_Pos + 40, Y_Pos, 0);

        //    Y_Pos -= 20; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("If yes, what services are you receiving?", Times), X_Pos, Y_Pos, 0);
        //    X_Pos = 220;
        //    if (AgyTabs_List.Count > 0)
        //    {
        //        List<AGYTABSEntity> ChldIns = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0054"));
        //        if (ChldIns.Count > 0)
        //        {
        //            int i = 0;
        //            foreach (AGYTABSEntity Trans in ChldIns)
        //            {
        //                i++;
        //                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
        //                checkbox = new RadioCheckField(writer, rect, Trans.Code_Desc.ToString().Trim(), "On");
        //                checkbox.BorderColor = new GrayColor(0.3f);
        //                //checkbox.Rotation = 90;
        //                if (drCaseMST["MST_PRESS_RECV_DSS"].ToString().Trim().Contains(Trans.Table_Code.ToString().Trim()))
        //                    checkbox.Checked = true;
        //                SField = checkbox.CheckField;
        //                writer.AddAnnotation(SField);
        //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Trans.Code_Desc.ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
        //                if (i <= 2 || i == 4)
        //                    X_Pos += 50;
        //                else X_Pos += 75;
        //                if (X_Pos > 560)
        //                {
        //                    X_Pos = 30;
        //                    Y_Pos -= 13;
        //                }
        //            }
        //        }
        //    }

        //    //}

        //    //if (ShortName == "ABCD") Y_Pos -= 40; else 
        //    Y_Pos -= 70;
        //    X_Pos = 300;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("- - - - - - - - - - - - - Do not write below this line, staff use only - - - - - - - - - - - - -", TimesBold), X_Pos, Y_Pos, 0);
        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Case Management Referral: Y/N  " + ShortName + " Programs Referral: Y/N  " + DssorDHS + " Referral: Y/N  Declined Screening/Referrals: Y/N", TimesBold), X_Pos, Y_Pos, 0);
        //    Y_Pos -= 25; X_Pos = 30;
        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Program Entry: ___________________________   Action Plan: ____________________________      Date: ____________", TimesBold), X_Pos, Y_Pos, 0);




        //    document.Close();
        //    fs.Close();
        //    fs.Dispose();
        //    FrmViewer objfrm = new FrmViewer(PdfName);
        //    objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
        //    objfrm.ShowDialog();

        //}


        private void On_PreAssAppNew()
        {
            Random_Filename = null;

            PdfName = "PRASSAPP_" + BaseForm.BaseApplicationNo.ToString();//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }


            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            //Document document = new Document();
            Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            //document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            BaseFont bf_timesBold = BaseFont.CreateFont("c:/windows/fonts/TIMESBD.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 10, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontBoldS = new iTextSharp.text.Font(1, 8, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 11, 4);
            iTextSharp.text.Font TimesBoldline = new iTextSharp.text.Font(bf_times, 11, 5);
            iTextSharp.text.Font TimesBoldlineHead = new iTextSharp.text.Font(bf_times, 13, 5);
            iTextSharp.text.Font TimesBold = new iTextSharp.text.Font(bf_times, 10, 1);
            cb = writer.DirectContent;

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            DataSet dsCaseIncome = DatabaseLayer.CaseMst.GetCASEINCOME(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataTable dtCaseIncome = dsCaseIncome.Tables[0];

            DataSet dsIncome = DatabaseLayer.Lookups.GetLookUpFromAGYTAB(Consts.AgyTab.INCOMETYPES);
            dtIncome = dsIncome.Tables[0];

            //ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

            string ShortName = string.Empty;
            DataSet ds = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL("00", null, null, null, null, null, null);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
                ShortName = AGYShortName;//ds.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            //searchAgytabs.Tabs_Type = "00432";
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);

            List<CommonEntity> preassessMasterEntity = _model.lookupDataAccess.GetDimension();
            preassessMasterEntity = preassessMasterEntity.FindAll(u => u.Active.Equals("Y"));
            //preassessMasterEntity = preassessMasterEntity.OrderBy(u => u.Extension).ToList();
            //List<PreassessQuesEntity> preassessMasterEntity = _model.FieldControls.GetPreassessData("MASTER");
            List<PreassessQuesEntity> preassessChildEntity = _model.FieldControls.GetPreassessData(string.Empty);

            List<CustomQuestionsEntity> custQuestions = _model.FieldControls.GetPreassesQuestions("PREASSES", "A", BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg, "Sequence", "ACTIVE", "P");
            custQuestions = custQuestions.FindAll(u => u.CUSTACTIVECUST.Equals("A"));

            CaseSnpEntity CaseSNP = BaseForm.BaseCaseSnpEntity[0];
            List<CustomQuestionsEntity> custResponses = _model.CaseMstData.GetPreassesQuestionAnswers(CaseSNP, "PRESRESP");

            //List<CustfldsEntity> custQues_List = new List<CustfldsEntity>();
            //CustfldsEntity Search_CustQues = new CustfldsEntity(true);
            //Search_CustQues.ScrCode = "PREASSES";
            //custQues_List = _model.SPAdminData.Browse_CUSTFLDS(Search_CustQues, "Browse");

            List<CustRespEntity> custResp_List = new List<CustRespEntity>();
            CustRespEntity Search_CustResp = new CustRespEntity(true);
            Search_CustResp.ScrCode = "PREASSES";
            custResp_List = _model.FieldControls.Browse_CUSTRESP(Search_CustResp, "Browse");

            cb.BeginText();
            X_Pos = 300; Y_Pos = 790;
            cb.SetFontAndSize(bf_timesBold, 15);
            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Pre-Assessment Form", X_Pos, Y_Pos, 0);
            cb.EndText();
            X_Pos = 30; Y_Pos -= 20;
            //cb.SetFontAndSize(bf_timesBold, 10);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Client Name :", X_Pos, Y_Pos, 0);
            cb.BeginText();

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Client Name : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, Times), 105, Y_Pos, 0);

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Phone : ", TimesBoldlineHead), 500, Y_Pos, 0);

            MaskedTextBox mskPhn = new MaskedTextBox();
            mskPhn.Mask = "(000)000-0000";
            mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.ToString().Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.ToString().Trim();//drCaseMST["MST_AREA"].ToString() + drCaseMST["MST_PHONE"].ToString();   //"(" + drCaseMST["MST_AREA"].ToString() + ")" + drCaseMST["MST_PHONE"].ToString()
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, Times), 510, Y_Pos, 0);

            Y_Pos -= 25;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Income : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Do you receive income from any of the following sources? (Check all that apply)", Times), 80, Y_Pos, 0);

            Y_Pos -= 20;

            iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(806, 40, 788, 60);
            PdfAppearance[] onOff = new PdfAppearance[2];
            onOff[0] = cb.CreateAppearance(20, 20);
            onOff[0].Rectangle(1, 20, 1, 20);
            onOff[0].Rectangle(18, 18, 1, 1);
            onOff[0].Stroke();
            onOff[1] = cb.CreateAppearance(20, 20);
            onOff[1].SetRGBColorFill(255, 128, 128);
            onOff[1].Rectangle(18, 18, 1, 1);
            onOff[1].FillStroke();
            onOff[1].MoveTo(1, 1);
            onOff[1].LineTo(19, 19);
            onOff[1].MoveTo(1, 19);
            onOff[1].LineTo(19, 1);

            string Income_Types = string.Empty;
            if (dtCaseIncome.Rows.Count > 0)
            {
                foreach (DataRow dr in dtCaseIncome.Rows)
                {
                    if (dr["INCOME_FAMILY_SEQ"].ToString().Trim() == drCaseMST["MST_FAMILY_SEQ"].ToString().Trim())
                        Income_Types += dr["INCOME_TYPE"].ToString().Trim();
                }
            }

            RadioCheckField checkbox;
            PdfFormField SField; ;
            string CheckTitle = string.Empty;
            foreach (DataRow drIncome in dtIncome.Rows)
            {
                if (drIncome["Active"].ToString() == "Y")
                {
                    rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                    checkbox = new RadioCheckField(writer, rect, drIncome["LookUpDesc"].ToString().Trim(), "On");
                    checkbox.BorderColor = new GrayColor(0.3f);
                    //checkbox.Rotation = 90;
                    if (Income_Types.Contains(drIncome["Code"].ToString().Trim()))
                        checkbox.Checked = true;
                    SField = checkbox.CheckField;
                    writer.AddAnnotation(SField);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(drIncome["LookUpDesc"].ToString().Trim(), Times), X_Pos + 10, Y_Pos, 0);
                    X_Pos += 90;
                    if (X_Pos > 560)
                    {
                        X_Pos = 30;
                        Y_Pos -= 13;
                    }
                }
            }

            X_Pos = 30; int Pos = 110;
            bool First = true; string PrevQues = string.Empty; string PrevResp = string.Empty; bool IsDisable=false;
            foreach (CommonEntity preassesdata in preassessMasterEntity)
            {
                First = true;
                X_Pos = 30;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(preassesdata.Desc.Trim() + " : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
                List<PreassessQuesEntity> preassessChildList = preassessChildEntity.FindAll(u => u.PRECHILD_DID == preassesdata.Code);
                foreach (PreassessQuesEntity preasschilddata in preassessChildList)
                {
                    CustomQuestionsEntity dr = custQuestions.Find(u => u.CUSTCODE == preasschilddata.PRECHILD_QID);
                    if (First)
                    {
                        Y_Pos -= 25; 
                        CheckBottomBorderReached(document, writer);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(preassesdata.Desc.Trim() + " : ", TimesBoldlineHead), X_Pos, Y_Pos, 0);
                        First = false;
                    }

                    if (PrevQues == preasschilddata.PRECHILD_QID && IsDisable == true) { dr = null; PrevQues = string.Empty; IsDisable = false; }


                    if (dr != null)
                    {
                        string custCode = dr.CUSTCODE.ToString();
                        List<CustRespEntity> RespList = custResp_List.FindAll(u => u.ResoCode.Equals(custCode));
                        List<CustomQuestionsEntity> response = custResponses.FindAll(u => u.ACTCODE.Equals(custCode)).ToList();
                        Y_Pos -= 20; X_Pos = 30;
                        CheckBottomBorderReached(document, writer);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dr.CUSTDESC.Trim(), Times), X_Pos, Y_Pos, 0);
                        //X_Pos = 250;
                        //if (dr.CUSTDESC.Length + preassesdata.PREDIMENTION_DESC.Length > 30 && dr.CUSTDESC.Length + preassesdata.PREDIMENTION_DESC.Length < 45) X_Pos = 250;
                        //else if (dr.CUSTDESC.Length + preassesdata.PREDIMENTION_DESC.Length >= 45) X_Pos = 350;
                        //if (dr.CUSTDESC.Length + preassesdata.PREDIMENTION_DESC.Length <= 30) X_Pos = 200;
                        if (!string.IsNullOrEmpty(preasschilddata.PRECHILD_DISABLE.Trim())) 
                        { PrevQues = preasschilddata.PRECHILD_DQID.Trim();}
                        

                        if (RespList.Count > 0)
                        {
                            Y_Pos -= 18;
                            CheckBottomBorderReached(document, writer);
                            //string Respans = string.Empty;
                            CustRespEntity Respans = RespList.Find(u => u.RespDesc.Equals("Yes"));
                            //if (Respans != null) { if (RespList.Count > 2) Respans = null; }
                            CustomQuestionsEntity PresResp;
                            CustomQuestionsEntity Prescheck;
                            string CheckAns = string.Empty;
                            if (dr.CUSTRESPTYPE == "C")
                            {
                                Prescheck = response.Find(u => u.ACTCODE.Equals(custCode));
                                if (Prescheck != null)
                                    CheckAns = Prescheck.ACTMULTRESP.ToString();
                            }
                            int i = 1;
                            foreach (CustRespEntity RespEntity in RespList)
                            {
                                //if (RespEntity.RespDesc.Length > 40)
                                //{
                                //    X_Pos = 30;
                                //    Y_Pos -= 25;
                                //    CheckBottomBorderReached(document, writer);
                                //}

                                rect = new iTextSharp.text.Rectangle(X_Pos, Y_Pos + 8, X_Pos + 8, Y_Pos);
                                checkbox = new RadioCheckField(writer, rect, RespEntity.RespDesc.Trim() + dr.CUSTCODE.Trim(), "On");
                                checkbox.BorderColor = new GrayColor(0.3f);
                                //checkbox.Rotation = 90;
                                PresResp = null;
                                //
                                if (dr.CUSTRESPTYPE == "D") PresResp = response.Find(u => u.ACTCODE.Equals(custCode) && u.ACTMULTRESP.Equals(RespEntity.DescCode));
                                if (dr.CUSTRESPTYPE == "N") PresResp = response.Find(u => u.ACTCODE.Equals(custCode) && u.ACTNUMRESP.Equals(RespEntity.DescCode));
                                if (dr.CUSTRESPTYPE == "T") PresResp = response.Find(u => u.ACTCODE.Equals(custCode) && u.ACTDATERESP.Equals(RespEntity.DescCode));
                                if (PresResp != null || (dr.CUSTRESPTYPE == "C" && CheckAns.Contains(RespEntity.DescCode)))
                                {
                                    if (dr.CUSTRESPTYPE != "C" && preasschilddata.PRECHILD_DISABLE.Contains(PresResp.ACTMULTRESP.Trim())) IsDisable = true;
                                    else if (dr.CUSTRESPTYPE == "C" && CheckAns.Contains(preasschilddata.PRECHILD_DISABLE.Trim())) IsDisable = true;

                                    checkbox.Checked = true;
                                }
                                SField = checkbox.CheckField;
                                writer.AddAnnotation(SField);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(RespEntity.RespDesc.Trim(), Times), X_Pos + 10, Y_Pos, 0);
                                if (Respans != null)
                                {
                                    X_Pos += 80;
                                    //if (X_Pos > 560)
                                    //{
                                    //    X_Pos = 30;
                                    //    Y_Pos -= 13;
                                    //}
                                    if (i > 2) Respans = null;
                                }

                                if (X_Pos > 530 || Respans == null)
                                {
                                    Y_Pos -= 13; CheckBottomBorderReached(document, writer);
                                    X_Pos = 30;
                                }

                                i++;
                            }
                        }
                        else
                        {
                            CustomQuestionsEntity PresResp = new CustomQuestionsEntity();
                            if (dr.CUSTRESPTYPE == "C") ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(response[0].ACTMULTRESP, Times), X_Pos + 10, Y_Pos, 0);
                            if (dr.CUSTRESPTYPE == "N") ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(response[0].ACTNUMRESP, Times), X_Pos + 10, Y_Pos, 0);
                            if (dr.CUSTRESPTYPE == "T") ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(response[0].ACTDATERESP, Times), X_Pos + 10, Y_Pos, 0);
                            //if(PresResp!=null)
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(PresResp.ACTDATERESP, Times), X_Pos + 10, Y_Pos, 0);
                            Y_Pos -= 25; CheckBottomBorderReached(document, writer);
                            X_Pos = 30;
                        }

                    }
                    //Y_Pos -= 25; CheckBottomBorderReached(document, writer);
                    //X_Pos = 30;

                }
            }

            string DssorDHS = "DSS";
            if (ShortName == "UETHDA") DssorDHS = "DHS";
            //if (ShortName == "ABCD") Y_Pos -= 40; else 
            Y_Pos -= 70;
            CheckBottomBorderReached(document, writer);
            X_Pos = 300;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("- - - - - - - - - - - - - Do not write below this line, staff use only - - - - - - - - - - - - -", TimesBold), X_Pos, Y_Pos, 0);
            Y_Pos -= 25; CheckBottomBorderReached(document, writer);
            X_Pos = 30;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Case Management Referral: Y/N  " + ShortName + " Programs Referral: Y/N  " + DssorDHS + " Referral: Y/N  Declined Screening/Referrals: Y/N", TimesBold), X_Pos, Y_Pos, 0);
            Y_Pos -= 25; CheckBottomBorderReached(document, writer);
            X_Pos = 30;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Program Entry: ___________________________   Action Plan: ____________________________      Date: ____________", TimesBold), X_Pos, Y_Pos, 0);



            cb.EndText();
            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion


        #region Emergency Sheet

        private void On_EmergencySheet()
        {
            Random_Filename = null;

            PdfName = "EMERGAPP_" + BaseForm.BaseApplicationNo.ToString();//form.GetFileName();
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }


            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            FileStream fs = new FileStream(PdfName, FileMode.Create);

            //Document document = new Document();
            Document document = new Document(PageSize.A4, 25, 25, 30, 30);
            //document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            BaseFont bf_timesBold = BaseFont.CreateFont("c:/windows/fonts/TIMESBD.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 10, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 11);
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
            iTextSharp.text.Font TblFontBoldS = new iTextSharp.text.Font(1, 8, 1);
            iTextSharp.text.Font TblFontSmall = new iTextSharp.text.Font(bf_times, 9);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 11, 4);
            iTextSharp.text.Font TimesBoldline = new iTextSharp.text.Font(bf_times, 11, 5);
            iTextSharp.text.Font TimesBoldlineHead = new iTextSharp.text.Font(bf_times, 13, 5);
            iTextSharp.text.Font TimesBold = new iTextSharp.text.Font(bf_times, 15, 1);
            cb = writer.DirectContent;

            //Mst Details Table
            DataSet dsCaseMST = DatabaseLayer.CaseSnpData.GetCaseMST(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo);
            DataRow drCaseMST = dsCaseMST.Tables[0].Rows[0];

            //Snp details Table
            DataSet dsCaseSNP = DatabaseLayer.CaseSnpData.GetCaseSnpDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, null);
            if (dsCaseSNP.Tables.Count > 0)
            {
                dtCaseSNP = dsCaseSNP.Tables[0];
                DataView dvSNP = new DataView(dtCaseSNP);
                dvSNP.RowFilter = "SNP_STATUS<>'I'";
                dtCaseSNP = dvSNP.ToTable();
            }

            ChldMstEntity chldMstDetails = _model.ChldMstData.GetChldMstDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            List<ChldMstEMEMEntitty> chldEmemDetails = _model.ChldMstData.GetChldEmemList(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
            CaseCondEntitty caseconddet = _model.ChldMstData.GetCaseCondDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            AGYTABSEntity searchAgytabs = new AGYTABSEntity(true);
            searchAgytabs.Tabs_Type = "S0060";  //List<AGYTABSEntity> TransportList = AgyTabs_List.FindAll(u => u.Tabs_Type.ToString().Trim().Equals("S0041"));
            List<AGYTABSEntity> AgyTabs_List = _model.AdhocData.Browse_AGYTABS(searchAgytabs);
            List<CommonEntity> commonEntity = new List<CommonEntity>();
            DataSet Relations = DatabaseLayer.AgyTab.GetAgyTabDetails(Consts.AgyTab.RELATIONSHIP);
            if (Relations != null && Relations.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in Relations.Tables[0].Rows)
                    commonEntity.Add(new CommonEntity(dr["AGY_1"].ToString(), dr["Agy_8"].ToString(), dr["AGY_2"].ToString()));
            }

            CommonEntity MotherEntity = new CommonEntity(); List<CommonEntity> FatherEntity = new List<CommonEntity>();
            if (commonEntity.Count > 0)
            {
                MotherEntity = commonEntity.Find(u => u.Hierarchy.Equals("G1"));
                FatherEntity = commonEntity.FindAll(u => u.Hierarchy.Equals("G2"));
            }
            //cb.BeginText();
            //X_Pos = 300; Y_Pos = 790;
            //cb.SetFontAndSize(bf_timesBold, 15);
            //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Classroom Pick Up and Emergency Contact Sheet", X_Pos, Y_Pos, 0);
            //cb.EndText();
            //X_Pos = 30; Y_Pos -= 20;
            ////cb.SetFontAndSize(bf_timesBold, 10);
            ////cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Client Name :", X_Pos, Y_Pos, 0);

            PdfPTable Headertable = new PdfPTable(2);
            Headertable.TotalWidth = 550f;
            Headertable.WidthPercentage = 100;
            Headertable.LockedWidth = true;
            float[] Headertablewidths = new float[] { 60f, 40f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
            Headertable.SetWidths(Headertablewidths);
            Headertable.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPTable table = new PdfPTable(6);
            table.TotalWidth = 550f;
            table.WidthPercentage = 100;
            table.LockedWidth = true;
            float[] widths = new float[] { 35f, 40f, 20f, 23f, 18f, 23f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
            table.SetWidths(widths);
            table.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPTable Parents = new PdfPTable(4);
            Parents.TotalWidth = 550f;
            Parents.WidthPercentage = 100;
            Parents.LockedWidth = true;
            float[] Parentswidths = new float[] { 20f, 40f, 20f, 40f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
            Parents.SetWidths(Parentswidths);
            Parents.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPTable TwoColumnTable = new PdfPTable(2);
            TwoColumnTable.TotalWidth = 550f;
            TwoColumnTable.WidthPercentage = 100;
            TwoColumnTable.LockedWidth = true;
            float[] TwoColumnTableswidths = new float[] { 35f, 70f };// 30f, 25f, 18f, 18f, 20f, 25f, 30f, 20f, 25f, 18f, 18f, 22f };
            TwoColumnTable.SetWidths(TwoColumnTableswidths);
            TwoColumnTable.HorizontalAlignment = Element.ALIGN_CENTER;

            string strAttnDate = DatabaseLayer.ChldAttnDB.GetChldAttnDate(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

            PdfPCell Header = new PdfPCell(new Phrase("Classroom Pick Up and Emergency Contact Sheet", TimesBold));
            Header.HorizontalAlignment = Element.ALIGN_RIGHT;
            //Header.Colspan = 3;
            Header.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Headertable.AddCell(Header);

            PdfPCell Header1 = new PdfPCell(new Phrase("(To be updated every three months)", TblFontBold));
            Header1.HorizontalAlignment = Element.ALIGN_LEFT;
            //Header1.Colspan = 3;
            Header1.VerticalAlignment = Element.ALIGN_BOTTOM;
            Header1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Headertable.AddCell(Header1);

            document.Add(Headertable);

            PdfPCell Space = new PdfPCell(new Phrase("", TimesBold));
            Space.HorizontalAlignment = Element.ALIGN_CENTER;
            Space.Colspan = 6;
            Space.FixedHeight = 10f;
            Space.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Space);

            List<ChldAttnEntity> App_Attn_List = new List<ChldAttnEntity>();
            App_Attn_List = _model.ChldAttnData.GetChldAttnDetails(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty, string.Empty, string.Empty, string.Empty, "Browse");
            App_Attn_List = App_Attn_List.FindAll(u => u.DATE != "");
            App_Attn_List = App_Attn_List.OrderBy(u => Convert.ToDateTime(u.DATE.Trim())).ToList();

            //PdfPTable nestedTable = new PdfPTable(2);
            //nestedTable.WidthPercentage = 100;
            ////table.LockedWidth = true;
            //float[] Nestedwidths = new float[] { 30f, 30f };
            //nestedTable.SetWidths(Nestedwidths);
            //nestedTable.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPCell NR1 = new PdfPCell(new Phrase("First Day of Attendance : ", TableFont));
            NR1.HorizontalAlignment = Element.ALIGN_LEFT;
            NR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(NR1);

            if (App_Attn_List.Count > 0)
            {
                if (!string.IsNullOrEmpty(App_Attn_List[0].DATE.Trim()))
                {
                    PdfPCell NR2 = new PdfPCell(new Phrase(LookupDataAccess.Getdate(App_Attn_List[0].DATE.Trim()), Timesline));
                    NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(NR2);
                }
                else
                {
                    PdfPCell NR2 = new PdfPCell(new Phrase("______________________", TableFont));
                    NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(NR2);
                }
            }
            else
            {
                PdfPCell NR2 = new PdfPCell(new Phrase("______________________", TableFont));
                NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(NR2);
            }
            //PdfPCell NestedLoop = new PdfPCell(nestedTable);
            //NestedLoop.Colspan = 2;
            //NestedLoop.Padding = 0f;
            //NestedLoop.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            //table.AddCell(NestedLoop);

            if (chldMstDetails != null)
            {
                if (!string.IsNullOrEmpty(chldMstDetails.DropOff.Trim()))
                {
                    PdfPCell SR2 = new PdfPCell(new Phrase("Drop off time : " + chldMstDetails.DropOff.Trim(), TableFont));
                    SR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    SR2.Colspan = 2;
                    SR2.Border = iTextSharp.text.Rectangle.BOX;
                    table.AddCell(SR2);
                }
                else
                {
                    PdfPCell R2 = new PdfPCell(new Phrase("Drop off time : ", TableFont));
                    R2.HorizontalAlignment = Element.ALIGN_LEFT;
                    R2.Colspan = 2;
                    R2.Border = iTextSharp.text.Rectangle.BOX;
                    table.AddCell(R2);
                }



                if (!string.IsNullOrEmpty(chldMstDetails.PickOff.Trim()))
                {
                    PdfPCell SR3 = new PdfPCell(new Phrase("Pick up time : " + chldMstDetails.PickOff.Trim(), TableFont));
                    SR3.HorizontalAlignment = Element.ALIGN_LEFT;
                    SR3.Colspan = 2;
                    SR3.Border = iTextSharp.text.Rectangle.BOX;
                    table.AddCell(SR3);
                }
                else
                {
                    PdfPCell R3 = new PdfPCell(new Phrase("Pick up time : ", TableFont));
                    R3.HorizontalAlignment = Element.ALIGN_LEFT;
                    R3.Colspan = 2;
                    R3.Border = iTextSharp.text.Rectangle.BOX;
                    table.AddCell(R3);
                }

            }
            else
            {
                PdfPCell R2 = new PdfPCell(new Phrase("Drop off time : ", TableFont));
                R2.HorizontalAlignment = Element.ALIGN_LEFT;
                R2.Colspan = 2;
                R2.Border = iTextSharp.text.Rectangle.BOX;
                table.AddCell(R2);

                PdfPCell R3 = new PdfPCell(new Phrase("Pick up time : ", TableFont));
                R3.HorizontalAlignment = Element.ALIGN_LEFT;
                R3.Colspan = 2;
                R3.Border = iTextSharp.text.Rectangle.BOX;
                table.AddCell(R3);
            }
            //PdfPTable nestedTable1 = new PdfPTable(2);
            //nestedTable1.WidthPercentage = 100;
            ////table.LockedWidth = true;
            //float[] Nestedwidths1 = new float[] { 20f, 30f };
            //nestedTable1.SetWidths(Nestedwidths1);
            //nestedTable1.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPCell DR1 = new PdfPCell(new Phrase("Child's Name : ", TableFont));
            DR1.HorizontalAlignment = Element.ALIGN_LEFT;
            DR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(DR1);

            PdfPCell NR3 = new PdfPCell(new Phrase(BaseForm.BaseApplicationName.Trim(), Timesline));
            NR3.HorizontalAlignment = Element.ALIGN_LEFT;
            NR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(NR3);

            //    PdfPCell NestedLoop1 = new PdfPCell(nestedTable1);
            //NestedLoop1.Colspan = 2;
            //NestedLoop1.Padding = 0f;
            //NestedLoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            //table.AddCell(NestedLoop1);

            string BirthDate = string.Empty;
            if (dtCaseSNP.Rows.Count > 0)
            {
                foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
                {
                    if (drCaseMST["MST_FAMILY_SEQ"].ToString().Trim() == drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                    {
                        BirthDate = drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(); break;
                    }
                }
            }

            //PdfPTable nestedTableBirth = new PdfPTable(2);
            //nestedTableBirth.WidthPercentage = 100;
            ////table.LockedWidth = true;
            //float[] nestedTableBirthwidths1 = new float[] { 15f, 15f };
            //nestedTableBirth.SetWidths(nestedTableBirthwidths1);
            //nestedTableBirth.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPCell BirthR1 = new PdfPCell(new Phrase("Birth Date : ", TableFont));
            BirthR1.HorizontalAlignment = Element.ALIGN_LEFT;
            BirthR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(BirthR1);

            if (!string.IsNullOrEmpty(BirthDate.Trim()))
            {
                PdfPCell NR4 = new PdfPCell(new Phrase(LookupDataAccess.Getdate(BirthDate.Trim()), Timesline));
                NR4.HorizontalAlignment = Element.ALIGN_LEFT;
                NR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(NR4);
            }
            else
            {
                PdfPCell NR4 = new PdfPCell(new Phrase("__________", TableFont));
                NR4.HorizontalAlignment = Element.ALIGN_LEFT;
                NR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(NR4);
            }

            //PdfPCell NestedBirthLoop1 = new PdfPCell(nestedTableBirth);
            ////NestedLoop1.Colspan = 2;
            //NestedBirthLoop1.Padding = 0f;
            //NestedBirthLoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            //table.AddCell(NestedBirthLoop1);


            //PdfPTable nestedTableRoom = new PdfPTable(2);
            //nestedTableRoom.WidthPercentage = 100;
            ////table.LockedWidth = true;
            //float[] nestedTableRoomwidths1 = new float[] { 15f, 15f };
            //nestedTableRoom.SetWidths(nestedTableRoomwidths1);
            //nestedTableRoom.HorizontalAlignment = Element.ALIGN_CENTER;

            PdfPCell RoomR1 = new PdfPCell(new Phrase("Room : ", TableFont));
            RoomR1.HorizontalAlignment = Element.ALIGN_RIGHT;
            RoomR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(RoomR1);
            if (App_Attn_List.Count > 0)
            {
                if (!string.IsNullOrEmpty(App_Attn_List[0].ROOM.Trim()))
                {
                    string AMPM = string.Empty;
                    if (App_Attn_List[0].ROOM.ToString().Trim() == "A") AMPM = "AM";
                    else if (App_Attn_List[0].ROOM.ToString().Trim() == "P") AMPM = "PM";
                    else if (App_Attn_List[0].ROOM.ToString().Trim() == "E") AMPM = "Extended Day"; else if (App_Attn_List[0].ROOM.ToString().Trim() == "F") AMPM = "FullDay";

                    PdfPCell NR2 = new PdfPCell(new Phrase(App_Attn_List[0].ROOM.Trim() + " " + AMPM, Timesline));
                    NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(NR2);
                }
                else
                {
                    PdfPCell NR2 = new PdfPCell(new Phrase("____________", TableFont));
                    NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(NR2);
                }
            }
            else
            {
                PdfPCell NR2 = new PdfPCell(new Phrase("____________", TableFont));
                NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(NR2);
            }

            //PdfPCell NestedRoomLoop1 = new PdfPCell(nestedTableRoom);
            ////NestedLoop1.Colspan = 2;
            //NestedRoomLoop1.Padding = 0f;
            //NestedRoomLoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
            //table.AddCell(NestedRoomLoop1);

            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty;
            string Zip = string.Empty;
            if (!string.IsNullOrEmpty(drCaseMST["MST_APT"].ToString().Trim()))
                Apt = "Apt  " + drCaseMST["MST_APT"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_Flr"].ToString().Trim()))
                Floor = "Flr  " + drCaseMST["MST_Flr"].ToString().Trim() + "   ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_STREET"].ToString().Trim()))
                Street = drCaseMST["MST_STREET"].ToString().Trim() + "  ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_SUFFIX"].ToString().Trim()))
                Suffix = drCaseMST["MST_SUFFIX"].ToString().Trim() + ", ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_HN"].ToString().Trim()))
                HN = drCaseMST["MST_HN"].ToString().Trim() + " ";
            if (!string.IsNullOrEmpty(drCaseMST["MST_ZIP"].ToString().Trim()) && drCaseMST["MST_ZIP"].ToString() != "0")
                Zip = "00000".Substring(0, 5 - drCaseMST["MST_ZIP"].ToString().Trim().Length) + drCaseMST["MST_ZIP"].ToString().Trim();

            string Address = HN + Street + Suffix + Apt + Floor + ", " + drCaseMST["MST_CITY"].ToString().Trim() + ", " + drCaseMST["MST_STATE"].ToString().Trim() + " " + Zip;

            PdfPCell R7 = new PdfPCell(new Phrase("Address:", TableFont));
            R7.HorizontalAlignment = Element.ALIGN_LEFT;
            R7.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(R7);


            if (!string.IsNullOrEmpty(Address))
            {
                PdfPCell R1 = new PdfPCell(new Phrase(Address, Timesline));
                R1.HorizontalAlignment = Element.ALIGN_LEFT;
                R1.Colspan = 6;
                R1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(R1);
            }
            else
            {
                PdfPCell R1 = new PdfPCell(new Phrase(" ____________________________________________", TableFont));
                R1.HorizontalAlignment = Element.ALIGN_LEFT;
                R1.Colspan = 6;
                R1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(R1);
            }

            PdfPCell Space1 = new PdfPCell(new Phrase("", TimesBold));
            Space1.HorizontalAlignment = Element.ALIGN_CENTER;
            Space1.Colspan = 6;
            Space1.FixedHeight = 15f;
            Space1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Space1);

            document.Add(table);
            table.DeleteBodyRows();



            PdfPCell SubHead = new PdfPCell(new Phrase("Parents Telephone Numbers :", TimesBoldline));
            SubHead.HorizontalAlignment = Element.ALIGN_CENTER;
            SubHead.Colspan = 4;
            SubHead.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(SubHead);

            PdfPCell SpaceP = new PdfPCell(new Phrase("", TableFont));
            SpaceP.HorizontalAlignment = Element.ALIGN_CENTER;
            SpaceP.Colspan = 4;
            SpaceP.FixedHeight = 12f;
            SpaceP.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(SpaceP);

            string MotherName = string.Empty; string FatherName = string.Empty;
            string M_Address = string.Empty; string F_Address = string.Empty;
            string M_Phone = string.Empty; string F_Phone = string.Empty;
            //string M_FullPart = string.Empty; string F_FullPart = string.Empty;
            string M_Emp_Name = string.Empty; string F_Emp_Name = string.Empty;

            foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            {

                if (BaseForm.BaseCaseMstListEntity[0].FamilySeq.Trim() != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
                {
                    if (MotherEntity != null)
                    {
                        if (drCaseSNP["SNP_MEMBER_CODE"].ToString() == MotherEntity.Code)
                        {
                            MotherName = LookupDataAccess.GetMemberName(drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim(), drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim(), drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim(), BaseForm.BaseHierarchyCnFormat);
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                M_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                M_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                            if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim()))
                                M_Emp_Name = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                            //if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                            //    M_FullPart = "F";
                            //else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                            //    M_FullPart = "P";
                        }
                    }

                    if (FatherEntity.Count > 0)
                    {
                        foreach (CommonEntity cm in FatherEntity)
                        {
                            if (cm.Code == drCaseSNP["SNP_MEMBER_CODE"].ToString())
                            {
                                FatherName = LookupDataAccess.GetMemberName(drCaseSNP["SNP_NAME_IX_FI"].ToString().Trim(), drCaseSNP["SNP_NAME_IX_MI"].ToString().Trim(), drCaseSNP["SNP_NAME_IX_LAST"].ToString().Trim(), BaseForm.BaseHierarchyCnFormat);// drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_STREET"].ToString().Trim() + ",";
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim()))
                                    F_Address = drCaseSNP["SNP_EMPLOYER_CITY"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim()))
                                    F_Phone = drCaseSNP["SNP_EMPL_PHONE"].ToString().Trim();
                                if (!string.IsNullOrEmpty(drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim()))
                                    F_Emp_Name = drCaseSNP["SNP_EMPLOYER_NAME"].ToString().Trim();
                                //if (drCaseSNP["SNP_FULL_TIME_HOURS"].ToString().Trim() != "0")
                                //    F_FullPart = "F";
                                //else if (drCaseSNP["SNP_PART_TIME_HOURS"].ToString().Trim() != "0")
                                //    F_FullPart = "P";
                                break;
                            }
                        }
                    }
                }
            }

            PdfPCell MR1 = new PdfPCell(new Phrase("Mother's Name : ", TableFont));
            MR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //R1.Colspan = 2;
            //MR1.FixedHeight = 10f;
            MR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(MR1);

            if (!string.IsNullOrEmpty(MotherName.Trim()))
            {
                PdfPCell VR2 = new PdfPCell(new Phrase(MotherName.Trim(), Timesline));
                VR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //R1.Colspan = 2;
                //VR2.FixedHeight = 10f;
                VR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(VR2);
            }
            else
            {
                PdfPCell VR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                VR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //R1.Colspan = 2;
                //VR2.FixedHeight = 10f;
                VR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(VR2);
            }

            PdfPCell FR3 = new PdfPCell(new Phrase("Father's Name : ", TableFont));
            FR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //R1.Colspan = 2;
            //FR3.FixedHeight = 10f;
            FR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(FR3);

            if (!string.IsNullOrEmpty(FatherName.Trim()))
            {
                PdfPCell VR2 = new PdfPCell(new Phrase(FatherName.Trim(), Timesline));
                VR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //R1.Colspan = 2;
                //VR2.FixedHeight = 10f;
                VR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(VR2);
            }
            else
            {
                PdfPCell VR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                VR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //R1.Colspan = 2;
                //VR2.FixedHeight = 10f;
                VR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(VR2);
            }

            MaskedComboBox mskphn = new MaskedComboBox();
            mskphn.Mask = "(000)000-0000";
            mskphn.Text = drCaseMST["MST_AREA"].ToString().Trim() + drCaseMST["MST_PHONE"].ToString().Trim();

            //Home Phone

            PdfPCell PR1 = new PdfPCell(new Phrase("Home Number : ", TableFont));
            PR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //PR1.FixedHeight = 10f;
            PR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PR1);

            if (!string.IsNullOrEmpty(MotherName.Trim()))
            {
                PdfPCell PR2 = new PdfPCell(new Phrase(mskphn.Text, Timesline));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }
            else
            {
                PdfPCell PR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }

            PdfPCell PR3 = new PdfPCell(new Phrase("Home Number : ", TableFont));
            PR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //PR3.FixedHeight = 10f;
            PR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PR3);

            if (!string.IsNullOrEmpty(FatherName.Trim()))
            {
                PdfPCell PR4 = new PdfPCell(new Phrase(mskphn.Text, Timesline));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }

            //Work Phone

            PdfPCell WR1 = new PdfPCell(new Phrase("Work Number : ", TableFont));
            WR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //WR1.FixedHeight = 10f;
            WR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(WR1);

            if (!string.IsNullOrEmpty(M_Phone.Trim()))
            {
                MaskedComboBox mskMphn = new MaskedComboBox();
                mskMphn.Mask = "(000)000-0000";
                mskMphn.Text = M_Phone;

                PdfPCell PR2 = new PdfPCell(new Phrase(mskMphn.Text, Timesline));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }
            else
            {
                PdfPCell PR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }

            PdfPCell WR3 = new PdfPCell(new Phrase("Work Number : ", TableFont));
            WR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //WR3.FixedHeight = 10f;
            WR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(WR3);

            if (!string.IsNullOrEmpty(F_Phone.Trim()))
            {
                MaskedComboBox mskMphn = new MaskedComboBox();
                mskMphn.Mask = "(000)0000-000";
                mskMphn.Text = F_Phone;
                PdfPCell PR4 = new PdfPCell(new Phrase(mskMphn.Text, Timesline));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }

            //Address

            PdfPCell AR1 = new PdfPCell(new Phrase("Work Address : ", TableFont));
            AR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //AR1.FixedHeight = 10f;
            AR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(AR1);

            if (!string.IsNullOrEmpty(M_Emp_Name.Trim()))
            {
                PdfPCell PR2 = new PdfPCell(new Phrase(M_Emp_Name, Timesline));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }
            else
            {
                PdfPCell PR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }

            PdfPCell AR3 = new PdfPCell(new Phrase("Work Address : ", TableFont));
            AR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //AR3.FixedHeight = 10f;
            AR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(AR3);

            if (!string.IsNullOrEmpty(F_Emp_Name.Trim()))
            {
                PdfPCell PR4 = new PdfPCell(new Phrase(F_Emp_Name, Timesline));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }



            if (!string.IsNullOrEmpty(M_Address.Trim()))
            {
                PdfPCell PR5 = new PdfPCell(new Phrase(M_Address, Timesline));
                PR5.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR5.Colspan = 2;
                PR5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR5);
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Colspan = 2;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }

            if (!string.IsNullOrEmpty(F_Address.Trim()))
            {
                PdfPCell PR5 = new PdfPCell(new Phrase(F_Address, Timesline));
                PR5.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR5.Colspan = 2;
                PR5.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR5);
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Colspan = 2;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }

            //Work Hours

            PdfPCell HR1 = new PdfPCell(new Phrase("Work Hours : ", TableFont));
            HR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //HR1.FixedHeight = 10f;
            HR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(HR1);

            PdfPCell HR2 = new PdfPCell(new Phrase("________________________________", TableFont));
            HR2.HorizontalAlignment = Element.ALIGN_LEFT;
            //HR2.FixedHeight = 10f;
            HR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(HR2);

            PdfPCell HR3 = new PdfPCell(new Phrase("Work Hours : ", TableFont));
            HR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //HR3.FixedHeight = 10f;
            HR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(HR3);

            PdfPCell HR4 = new PdfPCell(new Phrase("________________________________", TableFont));
            HR4.HorizontalAlignment = Element.ALIGN_LEFT;
            //HR4.FixedHeight = 10f;
            HR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(HR4);

            //Pager Number

            PdfPCell PN1 = new PdfPCell(new Phrase("Pager Number: ", TableFont));
            PN1.HorizontalAlignment = Element.ALIGN_LEFT;
            //PN1.FixedHeight = 10f;
            PN1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PN1);

            PdfPCell PN2 = new PdfPCell(new Phrase("________________________________", TableFont));
            PN2.HorizontalAlignment = Element.ALIGN_LEFT;
            //PN2.FixedHeight = 10f;
            PN2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PN2);

            PdfPCell PN3 = new PdfPCell(new Phrase("Pager Number : ", TableFont));
            PN3.HorizontalAlignment = Element.ALIGN_LEFT;
            //PN3.FixedHeight = 10f;
            PN3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PN3);

            PdfPCell PN4 = new PdfPCell(new Phrase("________________________________", TableFont));
            PN4.HorizontalAlignment = Element.ALIGN_LEFT;
            //PN4.FixedHeight = 10f;
            PN4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(PN4);

            //Celluar Phone

            MaskedComboBox mskCell = new MaskedComboBox();
            mskCell.Mask = "(000)000-0000";
            mskCell.Text = drCaseMST["MST_CELL_PHONE"].ToString().Trim();


            PdfPCell CR1 = new PdfPCell(new Phrase("Cellular Number : ", TableFont));
            CR1.HorizontalAlignment = Element.ALIGN_LEFT;
            //CR1.FixedHeight = 10f;
            CR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(CR1);

            if (!string.IsNullOrEmpty(MotherName.Trim()))
            {
                if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
                {
                    PdfPCell PR2 = new PdfPCell(new Phrase(mskCell.Text, Timesline));
                    PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //PR2.FixedHeight = 10f;
                    PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Parents.AddCell(PR2);
                }
                else
                {
                    PdfPCell PR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                    PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    //PR2.FixedHeight = 10f;
                    PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Parents.AddCell(PR2);
                }
            }
            else
            {
                PdfPCell PR2 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR2.FixedHeight = 10f;
                PR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR2);
            }

            PdfPCell CR3 = new PdfPCell(new Phrase("Cellular Number : ", TableFont));
            CR3.HorizontalAlignment = Element.ALIGN_LEFT;
            //CR3.FixedHeight = 10f;
            CR3.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(CR3);

            if (!string.IsNullOrEmpty(FatherName.Trim()))
            {
                if (!string.IsNullOrEmpty(drCaseMST["MST_CELL_PHONE"].ToString().Trim()))
                {
                    PdfPCell PR4 = new PdfPCell(new Phrase(mskCell.Text, Timesline));
                    PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                    //PR4.FixedHeight = 10f;
                    PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Parents.AddCell(PR4);
                }
                else
                {
                    PdfPCell PR4 = new PdfPCell(new Phrase("________________________________", TableFont));
                    PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                    //PR4.FixedHeight = 10f;
                    PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Parents.AddCell(PR4);
                }
            }
            else
            {
                PdfPCell PR4 = new PdfPCell(new Phrase("________________________________", TableFont));
                PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                //PR4.FixedHeight = 10f;
                PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                Parents.AddCell(PR4);
            }

            PdfPCell Space2 = new PdfPCell(new Phrase("", TimesBold));
            Space2.HorizontalAlignment = Element.ALIGN_CENTER;
            Space2.Colspan = 4;
            Space2.FixedHeight = 12f;
            Space2.Border = iTextSharp.text.Rectangle.NO_BORDER;
            Parents.AddCell(Space2);

            document.Add(Parents);
            Parents.DeleteBodyRows();

            PdfPCell SubHead1 = new PdfPCell(new Phrase("Persons Authorized Pick Up & Contact In Case of Emergency", TimesBoldline));
            SubHead1.HorizontalAlignment = Element.ALIGN_CENTER;
            SubHead1.Colspan = 6;
            SubHead1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(SubHead1);

            PdfPCell SubHeadH1 = new PdfPCell(new Phrase("(Required Minimum of 2 Other Contact Persons)", TblFontSmall));
            SubHeadH1.HorizontalAlignment = Element.ALIGN_CENTER;
            SubHeadH1.Colspan = 6;
            SubHeadH1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(SubHeadH1);

            PdfPCell SpaceR = new PdfPCell(new Phrase("", TimesBold));
            SpaceR.HorizontalAlignment = Element.ALIGN_CENTER;
            SpaceR.Colspan = 6;
            SpaceR.FixedHeight = 12f;
            SpaceR.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(SpaceR);

            //First Contact Person
            int i = 0;
            if (chldEmemDetails.Count > 0)
            {
                foreach (ChldMstEMEMEntitty item in chldEmemDetails)
                {
                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name :", TableFont));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Name);

                    if (!string.IsNullOrEmpty(item.EMERName.Trim()))
                    {
                        PdfPCell Emer_Name1 = new PdfPCell(new Phrase(item.EMERName, Timesline));
                        Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(Emer_Name1);
                    }
                    else
                    {
                        PdfPCell PR4 = new PdfPCell(new Phrase("_______________________", TableFont));
                        PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                        PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(PR4);
                    }

                    //PdfPTable nestedTableEMERPHN1 = new PdfPTable(2);
                    //nestedTableEMERPHN1.WidthPercentage = 100;
                    ////table.LockedWidth = true;
                    //float[] nestedTableEMERPHN1widths1 = new float[] { 15f, 15f };
                    //nestedTableBirth.SetWidths(nestedTableEMERPHN1widths1);
                    //nestedTableEMERPHN1.HorizontalAlignment = Element.ALIGN_CENTER;

                    PdfPCell EmerPhnR1 = new PdfPCell(new Phrase("Phone (W) : ", TableFont));
                    EmerPhnR1.HorizontalAlignment = Element.ALIGN_LEFT;
                    EmerPhnR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(EmerPhnR1);

                    if (!string.IsNullOrEmpty(item.EmerPhone1.Trim()))
                    {
                        MaskedComboBox mskemerphn = new MaskedComboBox();
                        mskemerphn.Mask = "(000)000-0000";
                        mskemerphn.Text = item.EmerPhone1;

                        PdfPCell EmerPhnR2 = new PdfPCell(new Phrase(mskemerphn.Text, Timesline));
                        EmerPhnR2.HorizontalAlignment = Element.ALIGN_LEFT;
                        EmerPhnR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(EmerPhnR2);
                    }
                    else
                    {
                        PdfPCell EmerPhnR2 = new PdfPCell(new Phrase("____________", TableFont));
                        EmerPhnR2.HorizontalAlignment = Element.ALIGN_LEFT;
                        EmerPhnR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(EmerPhnR2);
                    }

                    //PdfPCell NestedELoop1 = new PdfPCell(nestedTableEMERPHN1);
                    ////NestedLoop1.Colspan = 2;
                    //NestedELoop1.Padding = 0f;
                    //NestedELoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    //table.AddCell(NestedELoop1);


                    //PdfPTable nestedTableEmerHm1 = new PdfPTable(2);
                    //nestedTableEmerHm1.WidthPercentage = 100;
                    ////table.LockedWidth = true;
                    //float[] nestedTableEmerHm1widths1 = new float[] { 10f, 15f };
                    //nestedTableEmerHm1.SetWidths(nestedTableEmerHm1widths1);
                    //nestedTableEmerHm1.HorizontalAlignment = Element.ALIGN_CENTER;

                    PdfPCell Home1 = new PdfPCell(new Phrase("(H) : ", TableFont));
                    Home1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Home1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Home1);
                    if (!string.IsNullOrEmpty(item.EmerPhone2.Trim()))
                    {
                        MaskedComboBox mskemerphn = new MaskedComboBox();
                        mskemerphn.Mask = "(000)000-0000";
                        mskemerphn.Text = item.EmerPhone2;

                        PdfPCell NR2 = new PdfPCell(new Phrase(mskemerphn.Text, Timesline));
                        NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                        NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(NR2);
                    }
                    else
                    {
                        PdfPCell NR2 = new PdfPCell(new Phrase("____________", TableFont));
                        NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                        NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(NR2);
                    }

                    //PdfPCell NestedHomeLoop1 = new PdfPCell(nestedTableEmerHm1);
                    //NestedHomeLoop1.Padding = 0f;
                    //NestedHomeLoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    //table.AddCell(NestedHomeLoop1);

                    PdfPCell Emer_Address = new PdfPCell(new Phrase("Address : ", TableFont));
                    Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Address);

                    if (!string.IsNullOrEmpty(item.EmerAddress1.Trim()))
                    {
                        PdfPCell Emer_Name1 = new PdfPCell(new Phrase(item.EmerAddress1, Timesline));
                        Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(Emer_Name1);
                    }
                    else
                    {
                        PdfPCell PR4 = new PdfPCell(new Phrase("_______________________", TableFont));
                        PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                        PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(PR4);
                    }

                    PdfPCell Emer_Rela = new PdfPCell(new Phrase("Relationship : ", TableFont));
                    Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Rela);

                    if (!string.IsNullOrEmpty(item.EmerRel.Trim()))
                    {
                        string Rel_Desc = string.Empty;
                        if (AgyTabs_List.Count > 0)
                        {
                            AGYTABSEntity Rela = AgyTabs_List.Find(u => u.Table_Code.Equals(item.EmerRel));
                            Rel_Desc = Rela.Code_Desc.Trim();
                        }

                        PdfPCell Emer_Name1 = new PdfPCell(new Phrase(Rel_Desc, Timesline));
                        Emer_Name1.HorizontalAlignment = Element.ALIGN_LEFT;
                        Emer_Name1.Colspan = 3;
                        Emer_Name1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(Emer_Name1);
                    }
                    else
                    {
                        PdfPCell PR4 = new PdfPCell(new Phrase("_________________________", TableFont));
                        PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                        PR4.Colspan = 3;
                        PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(PR4);
                    }

                    PrintSpaceCell(table, 6, TableFont, 10f);

                    i++;

                }
            }

            if (i < 5)
            {
                for (int j = i; j < 5; j++)
                {
                    PdfPCell Emer_Name = new PdfPCell(new Phrase("Name :", TableFont));
                    Emer_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Name);

                    PdfPCell PR4 = new PdfPCell(new Phrase("_______________________", TableFont));
                    PR4.HorizontalAlignment = Element.ALIGN_LEFT;
                    PR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(PR4);

                    //PdfPTable nestedTableEMERPHN1 = new PdfPTable(2);
                    //nestedTableEMERPHN1.WidthPercentage = 100;
                    ////table.LockedWidth = true;
                    //float[] nestedTableEMERPHN1widths1 = new float[] { 15f, 15f };
                    //nestedTableBirth.SetWidths(nestedTableEMERPHN1widths1);
                    //nestedTableEMERPHN1.HorizontalAlignment = Element.ALIGN_CENTER;

                    PdfPCell EmerPhnR1 = new PdfPCell(new Phrase("Phone (W) : ", TableFont));
                    EmerPhnR1.HorizontalAlignment = Element.ALIGN_LEFT;
                    EmerPhnR1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(EmerPhnR1);

                    PdfPCell EmerPhnR2 = new PdfPCell(new Phrase("____________", TableFont));
                    EmerPhnR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    EmerPhnR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(EmerPhnR2);

                    //PdfPCell NestedELoop1 = new PdfPCell(nestedTableEMERPHN1);
                    //NestedELoop1.Padding = 0f;
                    //NestedELoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    //table.AddCell(NestedELoop1);

                    //PdfPTable nestedTableEmerHm1 = new PdfPTable(2);
                    //nestedTableEmerHm1.WidthPercentage = 100;
                    //float[] nestedTableEmerHm1widths1 = new float[] { 10f, 15f };
                    //nestedTableEmerHm1.SetWidths(nestedTableEmerHm1widths1);
                    //nestedTableEmerHm1.HorizontalAlignment = Element.ALIGN_CENTER;

                    PdfPCell Home1 = new PdfPCell(new Phrase("(H) : ", TableFont));
                    Home1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Home1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Home1);

                    PdfPCell NR2 = new PdfPCell(new Phrase("____________", TableFont));
                    NR2.HorizontalAlignment = Element.ALIGN_LEFT;
                    NR2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(NR2);

                    //PdfPCell NestedHomeLoop1 = new PdfPCell(nestedTableEmerHm1);
                    //NestedHomeLoop1.Padding = 0f;
                    //NestedHomeLoop1.Border = iTextSharp.text.Rectangle.NO_BORDER;//iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    //table.AddCell(NestedHomeLoop1);

                    PdfPCell Emer_Address = new PdfPCell(new Phrase("Address : ", TableFont));
                    Emer_Address.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Address.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Address);

                    PdfPCell PRA4 = new PdfPCell(new Phrase("_______________________", TableFont));
                    PRA4.HorizontalAlignment = Element.ALIGN_LEFT;
                    PRA4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(PRA4);

                    PdfPCell Emer_Rela = new PdfPCell(new Phrase("Relationship : ", TableFont));
                    Emer_Rela.HorizontalAlignment = Element.ALIGN_LEFT;
                    Emer_Rela.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Emer_Rela);

                    PdfPCell PRR4 = new PdfPCell(new Phrase("_________________________", TableFont));
                    PRR4.HorizontalAlignment = Element.ALIGN_LEFT;
                    PRR4.Colspan = 3;
                    PRR4.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(PRR4);

                    PrintSpaceCell(table, 6, TableFont, 10f);

                }
            }

            //Medical Data

            if (chldMstDetails != null)
            {
                PdfPCell Doctor = new PdfPCell(new Phrase("Child's Physician : ", TableFont));
                Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doctor);


                if (!string.IsNullOrEmpty(chldMstDetails.DoctorName.Trim()))
                {
                    PdfPCell Doc_Name = new PdfPCell(new Phrase(chldMstDetails.DoctorName.Trim(), Timesline));
                    Doc_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Name);
                }
                else
                {
                    PdfPCell Doc_Name = new PdfPCell(new Phrase("_______________________", TableFont));
                    Doc_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Name);
                }

                PdfPCell Doc_ph = new PdfPCell(new Phrase("Phone : ", TableFont));
                Doc_ph.HorizontalAlignment = Element.ALIGN_LEFT;
                Doc_ph.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doc_ph);


                if (!string.IsNullOrEmpty(chldMstDetails.DoctorPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DoctorPhone.Trim();

                    PdfPCell Doc_Num = new PdfPCell(new Phrase(mskdocphn.Text, Timesline));
                    Doc_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Num.Colspan = 3;
                    Doc_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Num);
                }
                else
                {
                    PdfPCell Doc_Num = new PdfPCell(new Phrase("_________________________", TableFont));
                    Doc_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Num.Colspan = 3;
                    Doc_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Num);
                }

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Dental = new PdfPCell(new Phrase("Child's Dentist : ", TableFont));
                Dental.HorizontalAlignment = Element.ALIGN_LEFT;
                Dental.FixedHeight = 15f;
                Dental.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dental);

                if (!string.IsNullOrEmpty(chldMstDetails.DentistName.Trim()))
                {
                    PdfPCell Doc_Name = new PdfPCell(new Phrase(chldMstDetails.DentistName.Trim(), Timesline));
                    Doc_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Name);
                }
                else
                {
                    PdfPCell Doc_Name = new PdfPCell(new Phrase("_______________________", TableFont));
                    Doc_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                    Doc_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Doc_Name);
                }


                PdfPCell Dent_ph = new PdfPCell(new Phrase("Phone: ", TableFont));
                Dent_ph.HorizontalAlignment = Element.ALIGN_LEFT;
                Dent_ph.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dent_ph);

                if (!string.IsNullOrEmpty(chldMstDetails.DentistPhone.Trim()))
                {
                    MaskedTextBox mskdocphn = new MaskedTextBox();
                    mskdocphn.Mask = "(000)000-0000";
                    mskdocphn.Text = chldMstDetails.DentistPhone.Trim();

                    PdfPCell Dent_Num = new PdfPCell(new Phrase(mskdocphn.Text, Timesline));
                    Dent_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                    Dent_Num.Colspan = 3;
                    Dent_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Dent_Num);
                }
                else
                {
                    PdfPCell Dent_Num = new PdfPCell(new Phrase("_________________________", TableFont));
                    Dent_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                    Dent_Num.Colspan = 3;
                    Dent_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Dent_Num);
                }

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Dtp = new PdfPCell(new Phrase("Latest DTP: ", TableFont));
                Dtp.HorizontalAlignment = Element.ALIGN_LEFT;
                Dtp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dtp);

                PdfPCell Dtp_ans = new PdfPCell(new Phrase("______________________", TableFont));
                Dtp_ans.HorizontalAlignment = Element.ALIGN_LEFT;
                Dtp_ans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dtp_ans);

                PdfPCell SpaceSub = new PdfPCell(new Phrase(" ", TableFont));
                SpaceSub.HorizontalAlignment = Element.ALIGN_LEFT;
                SpaceSub.Colspan = 4;
                SpaceSub.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(SpaceSub);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                document.Add(table);
                table.DeleteBodyRows();

                if (caseconddet != null)
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("Allergies or Food Restrictions :", TableFont));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(ALLERGIES);

                    if (!string.IsNullOrEmpty(caseconddet.Allergy.Trim()))
                    {
                        string Allergy_desc = caseconddet.Allergy.Replace("\r\n", " ");
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase(Allergy_desc.Trim(), Timesline));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        //ALLERGIESLine.Colspan = 5;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        TwoColumnTable.AddCell(ALLERGIESLine);
                    }
                    else
                    {
                        PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("___________________________________________________", Times));
                        ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        //ALLERGIESLine.Colspan = 5;
                        ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        TwoColumnTable.AddCell(ALLERGIESLine);
                    }

                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("Medications Presently Being Taken :", TableFont));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS.Colspan = 2;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(MEDICATIONS);

                    if (!string.IsNullOrEmpty(caseconddet.Medications.Trim()))
                    {
                        string Medications_desc = caseconddet.Medications.Replace("\r\n", " ");
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase(Medications_desc.Trim(), Timesline));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        //MEDICATIONSLine.Colspan = 4;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        TwoColumnTable.AddCell(MEDICATIONSLine);
                    }
                    else
                    {
                        PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("___________________________________________________", Times));
                        MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                        //MEDICATIONSLine.Colspan = 4;
                        MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        TwoColumnTable.AddCell(MEDICATIONSLine);
                    }
                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);
                }
                else
                {
                    PdfPCell ALLERGIES = new PdfPCell(new Phrase("Allergies or Food Restrictions :", TableFont));
                    ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(ALLERGIES);

                    PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("___________________________________________________", Times));
                    ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //ALLERGIESLine.Colspan = 5;
                    ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(ALLERGIESLine);

                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                    PdfPCell ALLERGIESLine1 = new PdfPCell(new Phrase("_________________________________________________________________", Times));
                    ALLERGIESLine1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ALLERGIESLine1.Colspan = 2;
                    ALLERGIESLine1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(ALLERGIESLine1);

                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                    PdfPCell MEDICATIONS = new PdfPCell(new Phrase("Medications Presently Being Taken :", TableFont));
                    MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONS.Colspan = 2;
                    MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(MEDICATIONS);


                    PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("___________________________________________________", Times));
                    MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                    //MEDICATIONSLine.Colspan = 5;
                    MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(MEDICATIONSLine);

                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                    PdfPCell MEDICATIONSLine1 = new PdfPCell(new Phrase("________________________________________________________________", Times));
                    MEDICATIONSLine1.HorizontalAlignment = Element.ALIGN_LEFT;
                    MEDICATIONSLine1.Colspan = 2;
                    MEDICATIONSLine1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(MEDICATIONSLine1);

                    //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                }

                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Child's Medical Insurance Carrier :", TableFont));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_LEFT;
                //Chld_Med_No.Colspan = 2;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(Chld_Med_No);

                if (!string.IsNullOrEmpty(chldMstDetails.MedInsurer.Trim()))
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase(chldMstDetails.MedInsurer.Trim(), Timesline));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Chld_Med_No_Line.Colspan = 4;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(Chld_Med_No_Line);
                }
                else
                {
                    PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("___________________________________________________", Times));
                    Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    //Chld_Med_No_Line.Colspan = 5;
                    Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    TwoColumnTable.AddCell(Chld_Med_No_Line);
                }

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                document.Add(TwoColumnTable);
                TwoColumnTable.DeleteBodyRows();

                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Insurance Number :", TableFont));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Chld_Med_Plan);

                if (!string.IsNullOrEmpty(chldMstDetails.MedPlan.Trim()))
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase(chldMstDetails.MedPlan.Trim(), Timesline));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.Colspan = 5;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Chld_Med_Plan_Line);
                }
                else
                {
                    PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("___________________________________________________", Times));
                    Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                    Chld_Med_Plan_Line.Colspan = 5;
                    Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    table.AddCell(Chld_Med_Plan_Line);
                }

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Hosp = new PdfPCell(new Phrase("Hospital Preference : _____________________________________ (In an emergency, the nearest hospital will be used)", Times));
                Hosp.HorizontalAlignment = Element.ALIGN_LEFT;
                Hosp.Colspan = 6;
                Hosp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Hosp);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                //PdfPCell Hosp1 = new PdfPCell(new Phrase("_______________________________________ (In an emergency, the nearest hospital will be used)", TableFont));
                //Hosp1.HorizontalAlignment = Element.ALIGN_LEFT;
                //Hosp1.Colspan = 5;
                //Hosp1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //table.AddCell(Hosp1);

                //PdfPCell Hosp2 = new PdfPCell(new Phrase("(In an emergency, the nearest hospital will be used)", TableFont));
                //Hosp2.HorizontalAlignment = Element.ALIGN_LEFT;
                //Hosp2.Colspan = 2;
                //Hosp2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //table.AddCell(Hosp2);

                PdfPCell HospOther = new PdfPCell(new Phrase("Other Important Medical History/Information : __________________________________________________________ ", TableFont));
                HospOther.HorizontalAlignment = Element.ALIGN_LEFT;
                HospOther.Colspan = 6;
                HospOther.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(HospOther);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                //PdfPCell HospOther1 = new PdfPCell(new Phrase("__________________________________________________", TableFont));
                //HospOther1.HorizontalAlignment = Element.ALIGN_LEFT;
                //HospOther1.Colspan = 4;
                //HospOther1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //table.AddCell(HospOther1);


            }
            else
            {
                PdfPCell Doctor = new PdfPCell(new Phrase("Child's Physician : ", TableFont));
                Doctor.HorizontalAlignment = Element.ALIGN_LEFT;
                Doctor.FixedHeight = 15f;
                Doctor.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doctor);

                PdfPCell Doc_Name = new PdfPCell(new Phrase("_________________________", TableFont));
                Doc_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Doc_Name.FixedHeight = 15f;
                Doc_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doc_Name);

                PdfPCell Doc_ph = new PdfPCell(new Phrase("Phone : ", TableFont));
                Doc_ph.HorizontalAlignment = Element.ALIGN_LEFT;
                Doc_ph.FixedHeight = 15f;
                Doc_ph.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doc_ph);

                PdfPCell Doc_Num = new PdfPCell(new Phrase("_________________________", TableFont));
                Doc_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                Doc_Num.FixedHeight = 15f;
                Doc_Num.Colspan = 3;
                Doc_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Doc_Num);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Dental = new PdfPCell(new Phrase("Child's Dentist : ", TableFont));
                Dental.HorizontalAlignment = Element.ALIGN_LEFT;
                Dental.FixedHeight = 15f;
                Dental.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dental);


                PdfPCell Dent_Name = new PdfPCell(new Phrase("_________________________", TableFont));
                Dent_Name.HorizontalAlignment = Element.ALIGN_LEFT;
                Dent_Name.FixedHeight = 15f;
                Dent_Name.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dent_Name);

                PdfPCell Dent_ph = new PdfPCell(new Phrase("Phone : ", TableFont));
                Dent_ph.HorizontalAlignment = Element.ALIGN_LEFT;
                Dent_ph.FixedHeight = 15f;
                Dent_ph.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dent_ph);


                PdfPCell Dent_Num = new PdfPCell(new Phrase("__________________________", TableFont));
                Dent_Num.HorizontalAlignment = Element.ALIGN_LEFT;
                Dent_Num.FixedHeight = 15f;
                Dent_Num.Colspan = 3;
                Dent_Num.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dent_Num);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Dtp = new PdfPCell(new Phrase("Latest DTP : ", TableFont));
                Dtp.HorizontalAlignment = Element.ALIGN_LEFT;
                Dtp.FixedHeight = 15f;
                Dtp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dtp);

                PdfPCell Dtp_ans = new PdfPCell(new Phrase("_________________________", TableFont));
                Dtp_ans.HorizontalAlignment = Element.ALIGN_LEFT;
                Dtp_ans.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Dtp_ans);

                PdfPCell SpaceSub = new PdfPCell(new Phrase(" ", TableFont));
                SpaceSub.HorizontalAlignment = Element.ALIGN_LEFT;
                SpaceSub.Colspan = 4;
                SpaceSub.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(SpaceSub);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                document.Add(table);
                table.DeleteBodyRows();



                PdfPCell ALLERGIES = new PdfPCell(new Phrase("Allergies or Food Restrictions : ", TableFont));
                ALLERGIES.HorizontalAlignment = Element.ALIGN_LEFT;
                ALLERGIES.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(ALLERGIES);

                PdfPCell ALLERGIESLine = new PdfPCell(new Phrase("___________________________________________", Times));
                ALLERGIESLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //ALLERGIESLine.Colspan =5 ;
                ALLERGIESLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(ALLERGIESLine);

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                PdfPCell ALLERGIESLine1 = new PdfPCell(new Phrase("_______________________________________________________________________", Times));
                ALLERGIESLine1.HorizontalAlignment = Element.ALIGN_LEFT;
                ALLERGIESLine1.Colspan = 2;
                ALLERGIESLine1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(ALLERGIESLine1);

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                PdfPCell MEDICATIONS = new PdfPCell(new Phrase("Medications Presently Being Taken : ", TableFont));
                MEDICATIONS.HorizontalAlignment = Element.ALIGN_LEFT;
                //MEDICATIONS.Colspan = 2;
                MEDICATIONS.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(MEDICATIONS);

                PdfPCell MEDICATIONSLine = new PdfPCell(new Phrase("________________________________________________", Times));
                MEDICATIONSLine.HorizontalAlignment = Element.ALIGN_LEFT;
                //MEDICATIONSLine.Colspan =5;
                MEDICATIONSLine.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(MEDICATIONSLine);

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                PdfPCell MEDICATIONSLine1 = new PdfPCell(new Phrase("_______________________________________________________________", Times));
                MEDICATIONSLine1.HorizontalAlignment = Element.ALIGN_LEFT;
                MEDICATIONSLine1.Colspan = 2;
                MEDICATIONSLine1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(MEDICATIONSLine1);

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);


                PdfPCell Chld_Med_No = new PdfPCell(new Phrase("Child's Medical Insurance Carrier : ", TableFont));
                Chld_Med_No.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_No.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(Chld_Med_No);


                PdfPCell Chld_Med_No_Line = new PdfPCell(new Phrase("______________________________________________", Times));
                Chld_Med_No_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                //Chld_Med_No_Line.Colspan = 4;
                Chld_Med_No_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                TwoColumnTable.AddCell(Chld_Med_No_Line);

                //PrintSpaceCell(TwoColumnTable, 2, TableFont, 12f);

                document.Add(TwoColumnTable);
                TwoColumnTable.DeleteBodyRows();

                PdfPCell Chld_Med_Plan = new PdfPCell(new Phrase("Insurance Number : ", TableFont));
                Chld_Med_Plan.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Chld_Med_Plan);


                PdfPCell Chld_Med_Plan_Line = new PdfPCell(new Phrase("_________________________________", Times));
                Chld_Med_Plan_Line.HorizontalAlignment = Element.ALIGN_LEFT;
                Chld_Med_Plan_Line.Colspan = 5;
                Chld_Med_Plan_Line.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Chld_Med_Plan_Line);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                PdfPCell Hosp = new PdfPCell(new Phrase("Hospital Preference : ", Times));
                Hosp.HorizontalAlignment = Element.ALIGN_LEFT;
                Hosp.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Hosp);

                PdfPCell Hosp1 = new PdfPCell(new Phrase("_________________________________ (In an emergency, the nearest hospital will be used)", TableFont));
                Hosp1.HorizontalAlignment = Element.ALIGN_LEFT;
                Hosp1.Colspan = 5;
                Hosp1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(Hosp1);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                //PdfPCell Hosp2 = new PdfPCell(new Phrase("(In an emergency, the nearest hospital will be used)", TableFont));
                //Hosp2.HorizontalAlignment = Element.ALIGN_LEFT;
                //Hosp2.Colspan = 2;
                //Hosp2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //table.AddCell(Hosp2);

                PdfPCell HospOther = new PdfPCell(new Phrase("Other Important Medical History/Information : __________________________________________________________ ", TableFont));
                HospOther.HorizontalAlignment = Element.ALIGN_LEFT;
                HospOther.Colspan = 6;
                HospOther.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(HospOther);

                //PrintSpaceCell(table, 6, TableFont, 12f);

                //PdfPCell HospOther1 = new PdfPCell(new Phrase("__________________________________________________________", Times));
                //HospOther1.HorizontalAlignment = Element.ALIGN_LEFT;
                //HospOther1.Colspan = 4;
                //HospOther1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //table.AddCell(HospOther1);
            }

            PdfPCell SpaceBelow = new PdfPCell(new Phrase("", TableFont));
            SpaceBelow.HorizontalAlignment = Element.ALIGN_LEFT;
            SpaceBelow.Colspan = 6;
            SpaceBelow.FixedHeight = 30f;
            SpaceBelow.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(SpaceBelow);

            PdfPCell Sign = new PdfPCell(new Phrase("Signature of Parent/Gardian : _____________________________________________", TableFont));
            Sign.HorizontalAlignment = Element.ALIGN_LEFT;
            Sign.FixedHeight = 15f;
            Sign.Colspan = 4;
            Sign.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Sign);

            PdfPCell Dt = new PdfPCell(new Phrase("Date : ____________", TableFont));
            Dt.HorizontalAlignment = Element.ALIGN_LEFT;
            Dt.FixedHeight = 15f;
            Dt.Colspan = 2;
            Dt.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Dt);

            PdfPCell Sign1 = new PdfPCell(new Phrase("Signature Staff : __________________________________________________", TableFont));
            Sign1.HorizontalAlignment = Element.ALIGN_LEFT;
            Sign1.FixedHeight = 15f;
            Sign1.Colspan = 4;
            Sign1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Sign1);

            PdfPCell Dt1 = new PdfPCell(new Phrase("Date : ____________", TableFont));
            Dt1.HorizontalAlignment = Element.ALIGN_LEFT;
            Dt1.FixedHeight = 15f;
            Dt1.Colspan = 2;
            Dt1.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(Dt1);

            document.Add(table);
            //PdfPCell R2 = new PdfPCell(new Phrase("Drop off time: ", TableFont));
            //R2.HorizontalAlignment = Element.ALIGN_CENTER;
            ////R1.Colspan = 2;
            //R2.Border = iTextSharp.text.Rectangle.BOX;
            //table.AddCell(R2);

            //PdfPCell R3 = new PdfPCell(new Phrase("Pick up time: ", TableFont));
            //R3.HorizontalAlignment = Element.ALIGN_CENTER;
            ////R1.Colspan = 2;
            //R3.Border = iTextSharp.text.Rectangle.BOX;
            //table.AddCell(R3);

            //PdfPCell R4 = new PdfPCell(new Phrase("Child's Name: "+BaseForm.BaseApplicationName.Trim(), TableFont));
            //R4.HorizontalAlignment = Element.ALIGN_LEFT;
            ////R1.Colspan = 2;
            //R4.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //table.AddCell(R4);


            //string BirthDate = string.Empty;
            //if (dtCaseSNP.Rows.Count > 0)
            //{
            //    foreach (DataRow drCaseSNP in dtCaseSNP.Rows)
            //    {
            //        if (drCaseMST["MST_FAMILY_SEQ"] != drCaseSNP["SNP_FAMILY_SEQ"].ToString().Trim())
            //        {
            //            BirthDate = drCaseSNP["SNP_ALT_BDATE"].ToString().Trim(); break;
            //        }
            //    }
            //}

            //PdfPCell R5 = new PdfPCell(new Phrase("Birth Date: " + BirthDate, TableFont));
            //R5.HorizontalAlignment = Element.ALIGN_LEFT;
            ////R1.Colspan = 2;
            //R5.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //table.AddCell(R5);

            //if (!string.IsNullOrEmpty(App_Attn_List[0].ROOM.Trim()))
            //{
            //    PdfPCell R6 = new PdfPCell(new Phrase("Room: " + App_Attn_List[0].ROOM.Trim(), TableFont));
            //    R6.HorizontalAlignment = Element.ALIGN_LEFT;
            //    //R1.Colspan = 2;
            //    R6.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    table.AddCell(R6);
            //}
            //else
            //{
            //    PdfPCell R6 = new PdfPCell(new Phrase("Room: _______________", TableFont));
            //    R6.HorizontalAlignment = Element.ALIGN_LEFT;
            //    //R1.Colspan = 2;
            //    R6.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //    table.AddCell(R6);
            //}

            //string Apt = string.Empty; string Floor = string.Empty;
            //if (!string.IsNullOrEmpty(Entity.Apt.Trim()))
            //    Apt = "  Apt  " + Entity.Apt.Trim();
            //if (!string.IsNullOrEmpty(Entity.Flr.Trim()))
            //    Apt = "  Flr  " + Entity.Flr.Trim();

            //PdfPCell R7 = new PdfPCell(new Phrase("Address: _______________", TableFont));
            //R7.HorizontalAlignment = Element.ALIGN_LEFT;
            ////R1.Colspan = 2;
            //R7.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //table.AddCell(R7);


            document.Close();
            fs.Close();
            fs.Dispose();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
        }


        #endregion


        private void PrintSpaceCell(PdfPTable table, int Spacesnum, iTextSharp.text.Font TableFont, float Height)
        {
            if (Spacesnum == 1)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 2)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 2;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 3)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 3;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 4)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 4;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 6)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 6;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 7)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 7;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 10)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 10;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 15)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 15;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
            else if (Spacesnum == 12)
            {
                PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
                S2.HorizontalAlignment = Element.ALIGN_LEFT;
                S2.Colspan = 12;
                if (Height > 0)
                    S2.FixedHeight = Height;
                S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                table.AddCell(S2);
            }
        }

        public string GetDaySuffix(int day)
        {
            switch (day)
            {
                case 1:
                case 21:
                case 31:
                    return "st";
                case 2:
                case 22:
                    return "nd";
                case 3:
                case 23:
                    return "rd";
                default:
                    return "th";
            }
        }

        public string HumanisedDate(string date1)
        {
            DateTime date=Convert.ToDateTime(date1.Trim());

            string ordinal;

            switch (date.Day)
            {
                case 1:
                case 21:
                case 31:
                    ordinal = "st";
                    break;
                case 2:
                case 22:
                    ordinal = "nd";
                    break;
                case 3:
                case 23:
                    ordinal = "rd";
                    break;
                default:
                    ordinal = "th";
                    break;
            }

            return string.Format("{0:MMMM dd}{1} ", date, ordinal);
        }

        private string SetLeadingZeros(string TmpSeq)
        {
            int Seq_len = TmpSeq.Trim().Length;
            string TmpCode = null;
            TmpCode = TmpSeq.ToString().Trim();
            switch (Seq_len)
            {
                case 8: TmpCode = "0" + TmpCode; break;
                case 7: TmpCode = "00" + TmpCode; break;
                case 6: TmpCode = "000" + TmpCode; break;
                case 5: TmpCode = "0000" + TmpCode; break;
                case 4: TmpCode = "00000" + TmpCode; break;
                case 3: TmpCode = "000000" + TmpCode; break;
                case 2: TmpCode = "0000000" + TmpCode; break;
                case 1: TmpCode = "00000000" + TmpCode; break;
                    //default: MessageBox.Show("Table Code should not be blank", "CAP Systems", MessageBoxButtons.OK);  TxtCode.Focus();
                    //    break;
            }
            return (TmpCode);
        }


    }
}